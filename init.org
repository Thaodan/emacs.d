* About
  This is my Emacs configuration based on various snippets around the internet.
  The refactor in an org-mode based approach is heavily inspired by Dakra's [[https://github.com/dakra/dmacs/][Dmacs]].

** Installation
   This config doesn't use ~package.el~ as package management but
   [[https://emacsmirror.net/manual/borg/][borg]] which uses git submodules.
   After first cloning this repository you have to call ~make bootstrap-borg~
   to download the `borg` library and the you can execute ~make bootstrap~
   to tangle this file and initialize all packages.
   After that you can just call ~make~ to tangle and rebuild the packages
   each time you make a change or ~make build-init~ if you only made
   changes to this file.

   If you want to check this file can be build before pushing
   you call install the hook in [[file:misc/git-hooks/pre-push][./misc/git-hooks/git/pre-push]] to run
   ~make build-init~ before each push.
   You can install the hook by executing [[file:misc/autogen.sh][./misc/autogen.sh]] from the root
   of this repository.

* Org-Configuration for this file                                  :noexport:
  :PROPERTIES:
  :CREATED:  [2024-07-18 Thu 23:25]
  :END:

  #+TITLE: Emacs Literate Configuration
  #+AUTHOR: BjÃ¶rn Bidar
  #+LANGUAGE: en_US
  #+BABEL: :cache yes
  #+PROPERTY: header-args :tangle yes
  #+PROPERTY: header-args:emacs-lisp :comments link :noweb yes
  #+SELECT_TAGS: export
  #+EXCLUDE_TAGS: noexport



* Private Init
  :PROPERTIES:
  :CREATED:  [2024-07-20 Sat 20:39]
  :END:

  This section includes a file that is not tracked inside this repository.
  You can either use a submodule, not track the file or use other means to store the file.

  The file in the section is to insert Noweb references (read [[info:org#Noweb Reference Syntax][org#Noweb Reference Syntax]])
  which then can contain information that is inserted by Org-Mode for each induvidual
  reference.

  The file can look for example like this:

  #+begin_src org :tangle no
  ,* Private-Userdata
    :PROPERTIES:
    :CREATED:  [2024-07-20 Sat 22:03]
    :header-args: :tangle no
    :END:

    It's important that all code blocks while are used as noweb referenced are grouped here so they
    are not tangled twice inside ~init.org~, once literally and once as reference.
  ,** Userdata
     :PROPERTIES:
     :CREATED:  [2024-07-20 Sat 21:18]
     :END:

     ,#+NAME: userdata_private
         ,#+begin_src emacs-lisp :tangle no
     (setopt user-full-name "Alice Bob"
           user-mail-address "alice@bob.de")
     ,#+end_src
  #+end_src

  The private init file should contain the following Noweb references
  for this init.el to work:

  - * Userdata
    - userdata_private
  - * Email/PIM
    - gnus_private
  - * SSH-Agent
    - ssh_agent_private
  - * Version Control
    - ** Magit
      - magit_private
    - ** Forge
      - forge_private
  - * Markup-Languages
    - * * Org Packages
      - * * * Org
        - org_mode_private
      - * * * Org-Agenda
        - org_agenda_private
      - * * * Org-Caldav
        - org_caldav_private
  - * Socialmedia
    - * * Circe
      - circe_private
    - * * Mastodon
      - mastodon_private
  - * Email/PIM
    - * * Gnus
      - gnus_private
      - gnus_alias_private
      - autocrypt_private
      - piem_private
  - * Elfeed
    - elfeed_protocol_private
    - elfeed_tube_private
  - * Project-Management
    - * Bug-Trackers
      - * Bug-Mode
        - bug_mode_private
      - * Debbbugs
        - debbugs_private
    - * Projectile
      - projectile_private

  Items starting with /*/ are sections not noweb-references.

  For an example look at [[file:misc/example_private_init.org]].

  #+INCLUDE: etc/private/init.org

* Emacs Initialization
  We want to use lexical scoping
  #+BEGIN_SRC emacs-lisp :comments nil
  ;;; init.el --- user-init-file                    -*- lexical-binding: t -*-
  #+END_SRC

  Show a few messages with timestamps to get a better overview of how fast
  Emacs is loading certain packages.
  #+BEGIN_SRC emacs-lisp
  (defvar before-user-init-time (current-time)
    "Value of `current-time' when Emacs begins loading `user-init-file'.")
  (message "Loading Emacs...done (%.3fs)"
       (float-time (time-subtract before-user-init-time
    			      before-init-time)))
  #+END_SRC

  We're going to increase the gc-cons-threshold to a very high number to decrease
  the load and compile time.  We'll lower this value significantly after
  initialization has completed. We don't want to keep this value too high or it
  will result in long GC pauses during normal usage.

  #+BEGIN_SRC emacs-lisp
  (setopt gc-cons-threshold (* 256 1024 1024))
  #+END_SRC

  Temporarily disable file name handlers as it's not needed on initialization
  #+BEGIN_SRC emacs-lisp
  (defvar file-name-handler-alist-old file-name-handler-alist)
  (setq file-name-handler-alist nil)
  #+END_SRC

  Increase max number of log messages
  #+BEGIN_SRC emacs-lisp
  (setopt message-log-max 16384)
  #+END_SRC

  Disable certain byte compiler warnings to cut down on the noise. This is a
  personal choice and can be removed if you would like to see any and all byte
  compiler warnings.

  Note: these mostly make sense if its your package or if a package would break soon.

  #+BEGIN_SRC emacs-lisp
  (setopt byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
  #+END_SRC

 Suppress warnings about lexical binding. Some packages store their data in Elisp
 files without lexical bindings or simply don't use it yet.
 #+begin_src emacs-lisp
 (setopt warning-suppress-types '((lexical-binding)))
 #+end_src

** Package Management
*** Org config tangle
    There is no ~emacs.el~ in this repo. It will automatically created for you
    from this file (~emacs.org~) when you run ~make build-init~.

    Don't forget to call ~make~ every time you edit this file.
    If this annoys you, you could simply add an ~after-save-hook~ that
    calls ~make~ every time you save this file.

*** Package Settings
    We use borg for package management and disable ~package.el~.

    Since Emacs 27.1 we have to disable package.el in the early init file.
    #+BEGIN_SRC emacs-lisp :tangle early-init.el
    (setopt package-enable-at-startup nil)
    #+END_SRC

    But still leave it here so it's also disabled on machines that don't
    have the latest Emacs from master installed.
    #+BEGIN_SRC emacs-lisp
    (setq package-enable-at-startup nil)
    ;; (package-initialize)
    #+END_SRC
    Prefer newer to avoid Emacs loading older byte-compiled files and accidentally
    old code to end up in depending files that are about to be byte-compiled.
    #+begin_src emacs-lisp
    (setopt load-prefer-newer t)
    #+end_src


*** System-packages
    Load some Emacs packages installed by the system package manager
    #+begin_src emacs-lisp
    (add-to-list 'load-path "/usr/share/emacs/site-lisp")
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/pdf-tools")
    (add-to-list 'load-path "/usr/lib/emacs/site-lisp")
    #+end_src

*** Borg
    #+begin_src emacs-lisp
    (setopt user-init-file (or load-file-name buffer-file-name))
    (setopt user-emacs-directory (file-name-directory user-init-file))
    (add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
    (require 'borg)
    (borg-initialize)
    (require 'magit-remote)

    ;; From https://github.com/dakra/dmacs/blob/c27a0638c75f3a77b675d1b214295c444546d085/init.org#unsortet-stuff-in-no-packages
    (defun borg-sync-drone-urls ()
      "Offer to update outdated upstream urls of all drones."
      (interactive)
      (let (moved)
        (dolist (drone (borg-clones))
          (let ((a (borg-get drone "url"))
    	        (b (ignore-errors (oref (epkg drone) url))))
            (when (and a b (not (forge--url-equal a b))
    	               (yes-or-no-p (format "Move %s: %s => %s" drone a b)))
              (push (list drone a b) moved))))
        (when (and moved
    	           (yes-or-no-p
    	            (concat (mapconcat (pcase-lambda (`(,drone ,a ,b))
    				                     (format "%s: %s => %s" drone a b))
    			                       moved "\n")
    		                "\n\nThese upstream repositories appear to have moved."
    		                "\s\sUpdate local configuration accordingly? ")))
          (let ((default-directory borg-user-emacs-directory))
            (pcase-dolist (`(,drone ,_ ,b) moved)
              (process-file "git" nil nil nil "config" "-f" ".gitmodules"
    		                (format "submodule.%s.url" drone) b))
            (process-file "git" nil nil nil "submodule" "sync")))))

    (defun borg-sync-drone-remotes (&optional drone)
      "Sync drone remotes with optional DRONE.
    Add remote from submodule.DRONE.remote to DRONE and set as default."
      (interactive (list (if current-prefix-arg
                             (read-from-minibuffer "Drone: ")
                           nil)))
      (let (remote-added)
        (dolist (drone (or drone
                           (borg-clones)))
          (let* ((drone-remote (borg-get drone "remote"))
                 (drone-remote-str (if drone-remote
                                       (split-string drone-remote " "))))
            (if drone-remote-str
                (let* ((drone-remote-name (car drone-remote-str))
                       (drone-remote-url (cadr drone-remote-str))
                       (default-directory (borg-worktree drone))
                       (magit-remote-add-set-remote.pushDefault drone-remote-name))
                  (if (file-exists-p default-directory)
                      (if (not (magit-remote-p drone-remote-name))
                          (magit-remote-add (car drone-remote-str) (cadr drone-remote-str)))
                    (message (format "Drone %s is not active, populate first" drone)))))))))
    #+end_src

*** Use-Package
    #+begin_src emacs-lisp
    ;;(defvar use-package-enable-imenu-support t)
    (require 'use-package)
    (if nil  ; Toggle init debug
	(setopt use-package-verbose t
	      use-package-expand-minimally nil
	      use-package-compute-statistics t
	      debug-on-error t)
      (setopt use-package-verbose nil
	    use-package-expand-minimally t))

    ;; For the :bind keyword
    (use-package bind-key :defer t)
    ;;(autoload #'use-package-autoload-keymap "use-package")
    #+end_src

*** Emacs native-comp
    #+begin_src emacs-lisp
    (use-package comp
      :config
      (setopt native-comp-compiler-options '("-flto" "-O2")))
    #+end_src

*** Auto-compile
    :PROPERTIES:
    :CREATED:  [2024-11-04 Mon 11:26]
    :END:
    #+begin_src emacs-lisp
    (use-package auto-compile
      :config
      (setopt auto-compile-display-buffer nil
              auto-compile-source-recreate-deletes-dest t
              auto-compile-mode-line-counter t
              auto-compile-toggle-deletes-nonlib-dest t))
    #+end_src

*** Epkg
    #+begin_src emacs-lisp
    (use-package epkg
      :init
      (setopt epkg-database-connector 'sqlite-builtin)
      (advice-add #'describe-package :override #'epkg-describe-package))
    #+end_src

* Don't litter configs

  #+begin_src emacs-lisp
  (use-package no-littering
    :demand t
    :config
    ;; /etc is version controlled and I want to store mc-lists in git
    (setopt mc/list-file (no-littering-expand-etc-file-name "mc-list.el"))
    ;; Put the auto-save files in the var directory to the other data files
    (setopt auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
  #+end_src

* Userdata

  #+begin_src emacs-lisp
<<userdata_private>>
  #+end_src

* Basic Mail Settings
  #+begin_src emacs-lisp
  (setopt read-mail-command 'gnus)
  #+end_src

* SSH-Agent

  Set =SSH_AUTH_SOCK= to our GPG-Agent.
  #+begin_src emacs-lisp
  <<ssh_agent_private>>
  #+end_src
  Private because the location of the SSH-Agent is user specific, so not really
  private but doesn't make sense to be here.

* Change Emacs default config

  #+begin_src emacs-lisp
  (defun kill-buffer-and-frame ()
    "Kill the current buffer and delete the selected frame."
    (interactive)
    (let ((quit-window-hook)
          (buffer-to-kill (current-buffer))
          (frame-to-kill (selected-frame)))
      (kill-buffer buffer-to-kill)
      (delete-frame frame-to-kill)))

  ;; Don't quit Emacs on C-x C-c
  (when (daemonp)
    (global-set-key (kbd "C-x C-c") 'kill-buffer-and-frame))

  ;; Increase the amount of data which Emacs reads from the process
  ;; (Useful for LSP where the LSP responses are in the 800k - 3M range)
  (setopt read-process-output-max (* 1024 1024)) ;; 1mb

  ;; Don't compact font caches during GC as it doesn't play too nice
  ;; with org-superstar-mode and some of my large org files (e.g. this file).
  ;; This might enlarge the Emacs memory footprint but I don't mind if Emacs
  ;; uses more memory but rather prefer speed.
  (setopt inhibit-compacting-font-caches t)

  ;; Always just use left-to-right text
  ;; This makes Emacs a bit faster for very long lines
  (setq-default bidi-paragraph-direction 'left-to-right)

  (setq-default indent-tabs-mode nil)   ; don't use tabs to indent
  (setq-default tab-width 4)            ; but maintain correct appearance
  ;; smart tab behavior - indent or complete
  (setopt tab-always-indent 'complete)

  ;; Newline at end of file
  (setopt require-final-newline t)

  ;; Default to utf-8 unix encoding
  (prefer-coding-system 'utf-8-unix)

  ;; Delete the selection with a keypress
  (delete-selection-mode t)

  ;; Activate character folding in searches i.e. searching for 'a' matches 'Ã¤' as well
  (setopt search-default-mode 'char-fold-to-regexp)

  ;; Only split vertically on very tall screens
  (setopt split-height-threshold 120)

  ;; Only split horizontally if there are at least 90 chars column after splitting
  (setopt split-width-threshold 180)

  ;; Paste with middle mouse button doesn't move the cursor
  (setopt mouse-yank-at-point t)

  ;; Save whateverâs in the current (system) clipboard before
  ;; replacing it with the Emacsâ text.
  ;; https://github.com/dakrone/eos/blob/master/eos.org
  (setopt save-interprogram-paste-before-kill t)

  (setopt ffap-machine-p-known 'reject)  ; don't "ping Germany" when typing test.de<TAB>

  ;; Accept 'UTF-8' (uppercase) as a valid encoding in the coding header
  (define-coding-system-alias 'UTF-8 'utf-8)

  ;; Silence ad-handle-definition about advised functions getting redefined
  (setopt ad-redefinition-action 'accept)

  ;; Use 'fancy' ellipses for truncated strings
  (setopt truncate-string-ellipsis "â¦")

  ;; Increase the 'Limit on number of Lisp variable bindings and unwind-protects.'
  ;; mu4e seems to need more sometimes and it can be safely increased.
  (setopt max-specpdl-size 8192)

  ;; Increase the limit to catch infinite recursions.
  ;; Large scala files need sometimes more and this value can safely be increased.
  (setopt max-lisp-eval-depth 10068)
  #+end_src

  Allow some commands as safe by default
  #+begin_src emacs-lisp
  ;; allow horizontal scrolling with "M-x >"
  (put 'scroll-left 'disabled nil)
  ;; enable narrowing commands
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-defun 'disabled nil)
  ;; enabled change region case commands
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

  ;; enable erase-buffer command
  (put 'erase-buffer 'disabled nil)
  #+end_src

* Configure Emacs builtin packages

** Auto-revert: Revert buffer when file changes on disk

   #+begin_src emacs-lisp
   (use-package autorevert
     :defer 1
     ;;:hook (find-file . auto-revert-mode)
     :config
     ;; We only really need auto revert for git files
     ;; and we use magits `magit-auto-revert-mode' for that
     ;;; revert buffers automatically when underlying files are changed externally
     (global-auto-revert-mode nil)
     ;; auto revert dired buffers
     (setopt global-auto-revert-non-file-buffers t)
     ;; Turn off auto revert messages
     (setopt auto-revert-verbose nil))
   #+end_src

** Select: Clipboard / primary selection
   #+begin_src emacs-lisp
   (use-package select
     :config
     ;; Use clipboard and primary selection for copy/paste
     (setopt select-enable-primary nil)

     (defun select-add-selection-to-kill-ring ()
       "Add clipboard and primary selection to the kill ring."
       (interactive)
       (when-let* ((primary (gui-get-primary-selection))
		   (not-empty? (not (string-empty-p primary))))
	 (kill-new primary))
       (when-let* ((clipboard (gui-backend-get-selection 'CLIPBOARD 'STRING))
		   (not-empty? (not (string-empty-p clipboard)))))))
   #+end_src


** Epa: the EasyPG Assistant, transparent file encryption (gpg)

   #+begin_src emacs-lisp
   (use-package epa
     :defer t
     :config
     ;; Always replace encrypted text with plain text version
     (setopt epa-replace-original-text t))
   (use-package epg
     :defer t
     :config
     ;; Let Emacs query the passphrase through the minibuffer
     (setopt epg-pinentry-mode 'loopback))
   #+end_src

** Save-place
   #+begin_src emacs-lisp
   (use-package saveplace
     :unless noninteractive
     :config
     (setopt save-place-limit 1000)
     (save-place-mode))
   #+end_src

** Savehist: Keep track of minibuffer history
   #+begin_src emacs-lisp
   (use-package savehist
     :unless noninteractive
     :defer 1
     :config
     (setopt savehist-additional-variables
             '(compile-command
               kill-ring
               regexp-search-ring
               helm-dired-history-variable))
     (savehist-mode 1))
   #+end_src

** Info: View info pages
   #+begin_src emacs-lisp
   (use-package info
     :init
     ;;(global-unset-key (kbd "C-h i"))
     :bind (("C-h i " . info-other-window)
            :map Info-mode-map
            ("c" . info-copy-current-node-name-web))
     :hook ((Info-selection . info-rename-buffer))
     :config
     ;; Disable breadcrumbs in mode-line it breaks doom-modeline and I don't like the
     ;; the look of it as it doesn't use * around the buffer identification
     (setopt Info-breadcrumbs-in-mode-line-mode nil)
     ;; From: https://www.reddit.com/r/emacs/comments/9sp7hh/show_me_your_functions/e8s1mgg/
     (defun info-copy-current-node-name-web (arg)
       "Copy the lispy form of the current node.
    With a prefix argument, copy the link to the online manual instead."
       (interactive "P")
       (let* ((manual (file-name-sans-extension
                       (file-name-nondirectory Info-current-file)))
              (node Info-current-node)
              (link (if (not arg)
      	                 (format "(info \"(%s) %s\")" manual node)
                      ;; NOTE this will only work with emacs-related nodes...
                      (format "https://www.gnu.org/software/emacs/manual/html_node/%s/%s.html"
      	                       manual (if (string= node "Top")
      			                          "index"
      		                            (replace-regexp-in-string " " "-" node))))))
         (kill-new link)
         (message link))))

   (use-package info+
     :config
     (Info-persist-history-mode))
   #+end_src

** Man: Browse UNIX manual pages
   :PROPERTIES:
   :CREATED:  [2024-08-14 Wed 14:27]
   :END:
   #+begin_src emacs-lisp
   (use-package man
     :bind (("C-h M" . man))
     :config
     (setopt Man-support-remote-systems t)
     (setopt Man-switches "-a"))
   #+end_src

** Goto-addr: Buttonize URLs and e-mail addresses in the current buffer
#+begin_src emacs-lisp
(use-package goto-addr
  :hook ((compilation-mode
	  prog-mode
	  eshell-mode
	  shell-mode
	  lui-mode) . goto-address-mode)
  :bind (:map goto-address-highlight-keymap
         ("<RET>" . goto-address-at-point)
         ("M-<RET>" . newline)))
#+end_src

** Time
   #+begin_src emacs-lisp
   (use-package time
     :defer t
     :config
     ;; Only show loads of above 0.9 in the modeline
     (setopt display-time-load-average-threshold 0.9)
     ;; A list of timezones to show for `display-time-world`
     (setopt zoneinfo-style-world-list
	   '(("Asia/Kuala_Lumpur" "Kuala Lumpur")
	     ("Europe/Berlin" "Berlin")
	     ("America/Los_Angeles" "Los Angeles")
	     ("America/New_York" "New York")
	     ("Australia/Sydney" "Sydney")))

     (setopt display-time-24hr-format t)
     ;; Enable to show time in modeline
     ;; (display-time-mode)
     ;; Right align time and org clocked-in task
     (require 'org-clock)
     (add-to-list
      'global-mode-string
      '(:eval (propertize " " 'display `((space :align-to (- right
							     ,(length display-time-string)
							     ,(if (org-clocking-p)
								  (length org-mode-line-string)
								0)
							     1)))))))
   #+end_src

** Calendar
   #+begin_src emacs-lisp
   (use-package calendar
     :hook (calendar-today-visible . calendar-mark-today)
     :config
     ;; Set coordinates so you can press `S` in the calendar for sunrise/sunset times
     ;;(setopt calendar-latitude 34.103
     ;;      calendar-longitude -118.337
     ;;      calendar-location-name "Los Angeles, USA")
     ;;(setopt calendar-latitude -37.841
     ;;      calendar-longitude 144.939
     ;;      calendar-location-name "Melbourne, Australia")
     ;;(setopt calendar-latitude 3.143
     ;;      calendar-longitude 101.686
     ;;      calendar-location-name "Kuala Lumpur, Malaysia")
     ;; (setopt calendar-latitude 48.97
     ;;       calendar-longitude 8.45
     ;;       calendar-location-name "Karlsruhe, Germany")
     ;; Start week on Monday
     (setopt calendar-week-start-day 1)
     ;; Highlight public holidays
     (setopt calendar-holiday-marker t))
   #+end_src

** Desktop
   #+begin_src emacs-lisp
   (use-package desktop
     :demand t
     :if (daemonp)
     :init
     (require 'no-littering)
     ;; Automatically save and restore sessions
     (setopt desktop-dirname         (no-littering-expand-var-file-name "desktop")
           desktop-base-file-name      "emacs.desktop"
           desktop-base-lock-name      "lock"
           desktop-path                (list desktop-dirname)
           desktop-save                t
           desktop-files-not-to-save   (concat "/su:.*\\|^/sudo:.*\\|^/ssh:.*\\|"  ;reload tramp paths
                                               (string-replace "." "\\." (no-littering-expand-var-file-name
                                                                            "gnus/dribble/newsrc-dribble"))
                                               "\\|"  ;; don't restore Gnu's newsrc dribble
                                               (string-replace "." "\\." (no-littering-expand-var-file-name "bbdb.el"))
                                               ;; don't restore bbdb file
                                               )
           desktop-load-locked-desktop t)
     ;; Not sure if these hooks are still needed. Lets keep them after some
     ;; testing when using desktop-save without them
     (add-hook 'auto-save-hook  #'(lambda ()
                                    (desktop-save
                                     (no-littering-expand-var-file-name "desktop"))))
     (add-hook 'before-save-hook #'time-stamp)
     (add-hook 'server-after-make-frame-hook
               #'(lambda ()
                   (unless desktop-save-mode
                     (add-hook 'server-done-hook
                               #'(lambda ()
                                   (desktop-save
                                    (no-littering-expand-var-file-name
                                     "desktop"))))
                     (desktop-save-mode 1)
                     (desktop-read)))))


   #+end_src

** Compress
   Transparently open compressed files
   #+begin_src emacs-lisp
   (auto-compression-mode t)
   #+end_src

** Dir-locals
   :PROPERTIES:
   :CREATED:  [2024-08-11 Sun 23:42]
   :END:
   #+begin_src emacs-lisp
   (setopt enable-remote-dir-locals t)
   #+end_src

** Printing
   #+begin_src emacs-lisp
   (use-package printing
     :config
     ;; Make sure we use localhost as cups server
     (setenv "CUPS_SERVER" "localhost")
     (pr-update-menus t))
   #+end_src

** View
   :PROPERTIES:
   :CREATED:  [2024-01-22 Mon 15:11]
   :END:
   Open files which are read-only in ~view-mode~.
   #+begin_src emacs-lisp
   (setopt view-read-only t)
   #+end_src

** Custom
   :PROPERTIES:
   :CREATED:  [2024-09-06 Fri 16:09]
   :END:
   #+begin_src emacs-lisp
   (use-package custom
     :config
     ;; We don't use custom and don't have to set custom-file even
     ;; in the case when we "accidentally" click save in a custom buffer,
     ;; `init.el' would get modified which gets overwrite the next time
     ;; we run `make'.

     ;; Keep custom variables in /etc for dir-locals save variables and so on
     ;; The file isn't actually used except for testing purposes
     (setopt custom-file (no-littering-expand-etc-file-name "custom.el"))

     ;; Treat all themes as safe
     (setf custom-safe-themes t))
   #+end_src

* Set some early UI settings
  Disable Tool- and Menubar in the early-init file via
  =default-frame-alist=. This is slightly faster than first loading the
  tool-/menu-bar and then turning it off again.
  #+BEGIN_SRC emacs-lisp :tangle early-init.el
  (push '(tool-bar-lines . 0) default-frame-alist)
 ;; (push '(menu-bar-lines . 0) default-frame-alist) Keep menu-bar in gui because of globalmenu
  #+END_SRC

  Deactivate tool- and menu-bar for terminal Emacs as well.
  #+BEGIN_SRC emacs-lisp
  (unless (display-graphic-p)
    (tool-bar-mode -1))
  #+END_SRC

  Disable the scroll-bar
  #+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  #+END_SRC

  # FIXME: Not sure if this good
  Set the fringe color to the same color as the background
  #+BEGIN_SRC emacs-lisp
  ;; (set-face-background 'fringe (face-attribute 'default :background))
  #+END_SRC

  Disable startup screen and startup echo area message and select the
  scratch buffer by default
  #+BEGIN_SRC emacs-lisp
  (setopt inhibit-startup-buffer-menu t)
  (setopt inhibit-startup-screen t)
  (setopt inhibit-startup-echo-area-message "")
  (setopt initial-buffer-choice t)
  (setopt initial-scratch-message nil)
  (setopt initial-major-mode 'org-mode)
  #+END_SRC

  Don't use dialog boxes
  #+BEGIN_SRC emacs-lisp
  (setopt use-dialog-box nil)
  #+END_SRC

  Per default youâre required to type out a full âyesâ or ânoâ whenever the function
  yes-or-no-p is invoked, letâs substitute its function definition to allow a âyâ or ânâ
  without even requiring confirmation.
  #+begin_src emacs-lisp
  (setopt use-short-answers t)
  #+end_src

* Auth-Source

#+begin_src emacs-lisp
;; Put authinfo.gpg first so new secrets will be stored there by default and not in plain text
(setopt auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
;; Don't ask to store credentials in .authinfo.gpg
(setopt auth-source-save-behavior nil)
#+end_src

* Password-store
  #+begin_src emacs-lisp
  (use-package auth-source-pass
    :config
    ;; Make auth-source-pass honor arguments such as :user or :host when searching for matching
    ;; passwords so it traverses through the directory instead of building a password-file name
    ;; that matches the arguments supplied in the query
    (setopt auth-source-pass-extra-query-keywords t)
    (auth-source-pass-enable))

  (use-package helm-pass)
  #+end_src

* Ui
  Here go packages that are mostly user-interface related, this isn't
  that exact since the definition is quite fluent.

** Basic Ui settings not associated to any mode.

   Enable syntax highlighting for older Emacsen that have it off
   #+begin_src emacs-lisp
   (global-font-lock-mode t)
   #+end_src

   Highlight matching parentheses when the point is on them.
   #+begin_src emacs-lisp
   (show-paren-mode 1)
   #+end_src


   Set title.
   #+begin_src emacs-lisp
   (setopt frame-title-format
         '((:eval (if (buffer-file-name)
    	               (abbreviate-file-name (buffer-file-name))
    	             "%b"))
           (:eval (if (buffer-modified-p)
    	               " â¢"))
           " - Emacs"))
   #+end_src

   Load theme
   #+begin_src emacs-lisp
   (use-package ir-black-theme
     :disabled t
     :unless noninteractive
     :config (load-theme 'ir-black t))
   #+end_src

   #+begin_src emacs-lisp
   (use-package modus-themes
     :unless noninteractive
     :init
     (setopt modus-themes-italic-constructs t
           modus-themes-bold-constructs t
           modus-themes-mixed-fonts nil
           modus-themes-subtle-line-numbers nil
           modus-themes-intense-mouseovers nil
           modus-themes-deuteranopia nil
           modus-themes-tabs-accented t
           modus-themes-variable-pitch-ui nil
           modus-themes-inhibit-reload t ; only applies to `customize-set-variable' and related

           modus-themes-fringes nil ; {nil,'subtle,'intense}

           ;; Options for `modus-themes-lang-checkers' are either nil (the
           ;; default), or a list of properties that may include any of those
           ;; symbols: `straight-underline', `text-also', `background',
           ;; `intense' OR `faint'.
           modus-themes-lang-checkers '(straight-underline)

           ;; Options for `modus-themes-mode-line' are either nil, or a list
           ;; that can combine any of `3d' OR `moody', `borderless',
           ;; `accented', a natural number for extra padding (or a cons cell
           ;; of padding and NATNUM), and a floating point for the height of
           ;; the text relative to the base font size (or a cons cell of
           ;; height and FLOAT)
           modus-themes-mode-line '(accented moody (padding . 4)
       				                      (height . 0.9))

           ;; Same as above:
           ;; modus-themes-mode-line '(accented borderless 4 0.9)

           ;; Options for `modus-themes-markup' are either nil, or a list
           ;; that can combine any of `bold', `italic', `background',
           ;; `intense'.
           ;;modus-themes-markup '(background italic)

           ;; Options for `modus-themes-syntax' are either nil (the default),
           ;; or a list of properties that may include any of those symbols:
           ;; `faint', `yellow-comments', `green-strings', `alt-syntax'
           modus-themes-syntax '(faint)

           ;; Options for `modus-themes-hl-line' are either nil (the default),
           ;; or a list of properties that may include any of those symbols:
           ;; `accented', `underline', `intense'
           modus-themes-hl-line '(underline accented)

           ;; Options for `modus-themes-paren-match' are either nil (the
           ;; default), or a list of properties that may include any of those
           ;; symbols: `bold', `intense', `underline'
           modus-themes-paren-match '(bold intense)

           ;; Options for `modus-themes-links' are either nil (the default),
           ;; or a list of properties that may include any of those symbols:
           ;; `neutral-underline' OR `no-underline', `faint' OR `no-color',
           ;; `bold', `italic', `background'
           modus-themes-links '(neutral-underline background)

           ;; Options for `modus-themes-box-buttons' are either nil (the
           ;; default), or a list that can combine any of `flat', `accented',
           ;; `faint', `variable-pitch', `underline', `all-buttons', the
           ;; symbol of any font weight as listed in `modus-themes-weights',
           ;; and a floating point number (e.g. 0.9) for the height of the
           ;; button's text.
           modus-themes-box-buttons '(variable-pitch flat faint 0.9)

           ;; Options for `modus-themes-prompts' are either nil (the
           ;; default), or a list of properties that may include any of those
           ;; symbols: `background', `bold', `gray', `intense', `italic'
           modus-themes-prompts '(intense bold)

           ;; The `modus-themes-completions' is an alist that reads three
           ;; keys: `matches', `selection', `popup'.  Each accepts a nil
           ;; value (or empty list) or a list of properties that can include
           ;; any of the following (for WEIGHT read further below):
           ;;
           ;; `matches' - `background', `intense', `underline', `italic', WEIGHT
           ;; `selection' - `accented', `intense', `underline', `italic', `text-also' WEIGHT
           ;; `popup' - same as `selected'
           ;; `t' - applies to any key not explicitly referenced (check docs)
           ;;
           ;; WEIGHT is a symbol such as `semibold', `light', or anything
           ;; covered in `modus-themes-weights'.  Bold is used in the absence
           ;; of an explicit WEIGHT.
           modus-themes-completions '((matches . (extrabold))
       			                   (selection . (semibold accented))
       			                   (popup . (accented intense)))

           modus-themes-mail-citations nil ; {nil,'intense,'faint,'monochrome}

           ;; Options for `modus-themes-region' are either nil (the default),
           ;; or a list of properties that may include any of those symbols:
           ;; `no-extend', `bg-only', `accented'
           modus-themes-region '(bg-only no-extend)

           ;; Options for `modus-themes-diffs': nil, 'desaturated, 'bg-only
           modus-themes-diffs 'desaturated

           modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}

           modus-themes-org-agenda ; this is an alist: read the manual or its doc string
           '((header-block . (variable-pitch 1.3))
             (header-date . (grayscale workaholic bold-today 1.1))
             (event . (accented varied))
             (scheduled . uniform)
             (habit . traffic-light)))

     ;;modus-themes-headings ; this is an alist: read the manual or its doc string
     ;; '((1 . (overline background variable-pitch 1.3))
     ;; (2 . (rainbow overline 1.1))
     ;; (t . (semibold))))
     :config
     ;; For the dark theme I want a lightly lighter background than completely black
     ;;(setopt modus-themes-vivendi-color-overrides '((bg-main . "#101010")))

     ;; (modus-themes-load-operandi)  ;; light theme
     (modus-themes-load-vivendi)  ;; dark theme
     ;;     (modus-themes-load-theme 'modus-vivendi-deuteranopia)
     )
   #+end_src

** minions: put minor modes from modeline in menu
   #+begin_src emacs-lisp
   (use-package minions
     :unless noninteractive
     :defer 2
     :config
     (setopt minions-mode-line-lighter "+")
     (setopt minions-prominent-modes '(projectile-mode
                                     flycheck-mode
                                     multiple-cursors-mode
                                     sticky-buffer-mode
                                     company
                                     guess-language-mode))
     (minions-mode))
   #+end_src

** Mode-icons: Show icon instead of mode name if aviable

   #+begin_src emacs-lisp
   (use-package mode-icons
     :disabled t
     :config
     (mode-icons-mode))
   #+end_src

** Doom-Modeline

   #+begin_src emacs-lisp
   (use-package doom-modeline
     :init (doom-modeline-mode 1)

     ;; How to detect the project root.
     ;; nil means to use `default-directory'.
     ;; The project management packages have some issues on detecting project root.
     ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
     ;; to hanle sub-projects.
     ;; You can specify one if you encounter the issue.
     (setopt doom-modeline-project-detection 'auto)
     ;; Determines the style used by `doom-modeline-buffer-file-name'.
     ;;
     ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
     ;;   auto => emacs/l/comint.el (in a project) or comint.el
     ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
     ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
     ;;   truncate-with-project => emacs/l/comint.el
     ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
     ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
     ;;   truncate-all => ~/P/F/e/l/comint.el
     ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
     ;;   relative-from-project => emacs/lisp/comint.el
     ;;   relative-to-project => lisp/comint.el
     ;;   file-name => comint.el
     ;;   buffer-name => comint.el<2> (uniquify buffer name)
     ;;
     ;; If you are experiencing the laggy issue, especially while editing remote files
     ;; with tramp, please try `file-name' style.
     ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
     (setopt doom-modeline-buffer-file-name-style 'auto)
     ;; Whether display icons in the mode-line.
     ;; While using the server mode in GUI, should set the value explicitly.
     (setopt doom-modeline-icon t)

     ;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
     (setopt doom-modeline-major-mode-icon t)

     ;; Whether display the colorful icon for `major-mode'.
     ;; It respects `all-the-icons-color-icons'.
     (setopt doom-modeline-major-mode-color-icon t)

     ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
     (setopt doom-modeline-buffer-state-icon t)

     ;; Whether display the modification icon for the buffer.
     ;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
     (setopt doom-modeline-buffer-modification-icon t)

     ;; Whether display the time icon. It respects variable `doom-modeline-icon'.
     (setopt doom-modeline-time-icon t)

     ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
     (setopt doom-modeline-unicode-fallback t)

     ;; Whether display the buffer name.
     (setopt doom-modeline-buffer-name t)

     ;; Whether display the minor modes in the mode-line.
     (setopt doom-modeline-minor-modes t)

     ;; If non-nil, a word count will be added to the selection-info modeline segment.
     (setopt doom-modeline-enable-word-count nil)

     ;; Major modes in which to display word count continuously.
     ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
     ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
     ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
     (setopt doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

     ;; Whether display the buffer encoding.
     (setopt doom-modeline-buffer-encoding t)

     ;; Whether display the indentation information.
     (setopt doom-modeline-indent-info t)

     ;; If non-nil, only display one number for checker information if applicable.
     (setopt doom-modeline-check-simple-format t)

     ;; The maximum number displayed for notifications.
     (setopt doom-modeline-number-limit 99)

     ;; The maximum displayed length of the branch name of version control.
     (setopt doom-modeline-vcs-max-length 12)

     ;; Whether display the workspace name. Non-nil to display in the mode-line.
     (setopt doom-modeline-workspace-name t)

     ;; Whether display the perspective name. Non-nil to display in the mode-line.
     (setopt doom-modeline-persp-name t)

     ;; If non nil the default perspective name is displayed in the mode-line.
     (setopt doom-modeline-display-default-persp-name nil)

     ;; If non nil the perspective name is displayed alongside a folder icon.
     (setopt doom-modeline-persp-icon t)

     ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
     (setopt doom-modeline-lsp t)

     ;; Whether display the GitHub notifications. It requires `ghub' package.
     (setopt doom-modeline-github t)

     ;; The interval of checking GitHub.
     (setopt doom-modeline-github-interval (* 30 60))

     ;; Whether display the modal state icon.
     ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
     (setopt doom-modeline-modal-icon t)

     ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
     ;;(setopt doom-modeline-mu4e nil)
     ;; also enable the start of mu4e-alert
     ;;(mu4e-alert-enable-mode-line-display)

     ;; Whether display the gnus notifications.
     (setopt doom-modeline-gnus t)

     ;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
     (setopt doom-modeline-gnus-timer 0)

     ;; Wheter groups should be excludede when gnus automatically being updated.
     (setopt doom-modeline-gnus-excluded-groups '("nntp+Gmane:gmane.emacs.bugs"
                                                "nntp+Gmane:gmane.emacs.devel"
                                                "nntp+Gmane:gmane.emacs.gnus.general"
                                                "nntp+Gmane:gmane.emacs.gnus.user"
                                                "nntp+Gmane:gmane.emacs.help"
                                                "nntp+Gmane:gmane.emacs.announce"
                                                "nntp+Gmane:gmane.emacs.emacsconf"
                                                "nntp+Gmane:gmane.emacs.emms.user"
                                                "nntp+Gmane:gmane.emacs.erc.general"
                                                "nntp+Gmane:gmane.linux.arch.announce"))

     ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
     (setopt doom-modeline-irc t)

     ;; Function to stylize the irc buffer names.
     (setopt doom-modeline-irc-stylize 'identity)

     ;; Whether display the time. It respects `display-time-mode'.
     (setopt doom-modeline-time t)

     ;; Whether display the misc segment on all mode lines.
     ;; If nil, display only if the mode line is active.
     (setopt doom-modeline-display-misc-in-all-mode-lines t)

     ;; Whether display the environment version.
     (setopt doom-modeline-env-version t)

     ;; ;; Or for individual languages
     ;; (setopt doom-modeline-env-enable-python t)
     ;; (setopt doom-modeline-env-enable-ruby t)
     ;; (setopt doom-modeline-env-enable-perl t)
     ;; (setopt doom-modeline-env-enable-go t)
     ;; (setopt doom-modeline-env-enable-elixir t)
     ;; (setopt doom-modeline-env-enable-rust t)

     ;; ;; Change the executables to use for the language version string
     ;; (setopt doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
     ;; (setopt doom-modeline-env-ruby-executable "ruby")
     ;; (setopt doom-modeline-env-perl-executable "perl")
     ;; (setopt doom-modeline-env-go-executable "go")
     ;; (setopt doom-modeline-env-elixir-executable "iex")
     ;; (setopt doom-modeline-env-rust-executable "rustc")

     ;; What to display as the version while a new one is being loaded
     (setopt doom-modeline-env-load-string "...")

     ;; Hooks that run before/after the modeline version string is updated
     ;;(setopt doom-modeline-before-update-env-hook nil)
     ;;(setopt doom-modeline-after-update-env-hook nil)


     ;;    (defun smf/irc-icons (buffer)
     ;;   "Given a BUFFER name, return an icon. Else return buffer."
     ;;   (cond
     ;;    ((string-match "#mercurial" buffer)
     ;;     (all-the-icons-faicon "mercury" :v-adjust .05))
     ;;    ((string-match "#bitbucket" buffer)
     ;;     (all-the-icons-faicon "bitbucket" :v-adjust .05))
     ;;    ((string-match "#octobus-hg" buffer)
     ;;     ;; this inserts a custom fonticon, in this case, octobus
     ;;     (propertize "\xe900"
     ;; 		'face '(:family "smf-custom-icons")
     ;; 		'rear-nonsticky t
     ;; 		'display '(raise -0.1)
     ;; 		'font-lock-ignore t))
     ;;    (t buffer)))

     ;; (setopt doom-modeline-irc-stylize #'smf/irc-icons)

     )
   #+end_src

** Beacon: Highlight current line/cursor when switching frames
   #+begin_src emacs-lisp
   (use-package beacon
     :defer 5
     :config (beacon-mode 1))
   #+end_src

** Cursor-cgh
   #+begin_src emacs-lisp
   (use-package cursor-chg
     :config
     (toggle-cursor-type-when-idle 1) ; Turn on cursor change when Emacs is idle
     (change-cursor-mode 1)) ; Turn on change for overwrite, read-only, and input mode
   #+end_src

** Emoji font
A font with emoji symbols (like twemoji, noto-fonts-emoji and/or ttf-symbola) has to be installed.
#+begin_src emacs-lisp
;; Use "C-x 8 RET <type name>"
(defun --set-emoji-font (frame)
  "Adjust the font settings of FRAME so Emacs can display emoji properly."
  (set-fontset-font t 'emoji (font-spec :family "Noto Color Emoji") frame)
 ;; (set-fontset-font t 'emoji (font-spec :family "Twitter Color Emoji") frame 'apend)
  ;;(set-fontset-font t 'emoji (font-spec :family "EmojiOne") frame 'append)
  (set-fontset-font "fontset-default" 'symbol "Noto Color Emoji"))
;; For when Emacs is started in GUI mode:
(--set-emoji-font nil)
;; Hook for when a frame is created with emacsclient
;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
(add-hook 'after-make-frame-functions '--set-emoji-font)
#+end_src

** Emojify: Emoji support for Emacs
   #+begin_src emacs-lisp
   (use-package emojify
     :config
     (setopt emojify-display-style 'unicode)
     (add-hook 'after-init-hook #'global-emojify-mode))
   #+end_src

** Ligatures
#+begin_src emacs-lisp :noweb no
(use-package ligature
  :hook (prog-mode . ligature-mode)
  :config
  ;; Some ligatures supported by most fonts. E.g. Fira Code, Victor Mono
  (ligature-set-ligatures 'prog-mode '("~~>" "##" "|-" "-|" "|->" "|=" ">-" "<-" "<--" "->"
                                       "-->" "-<" ">->" ">>-" "<<-" "<->" "->>" "-<<" "<-<"
                                       "==>" "=>" "=/=" "!==" "!=" "<==" ">>=" "=>>" ">=>"
                                       "<=>" "<=<" "=<=" "=>=" "<<=" "=<<"
                                       "=:=" "=!=" "==" "===" "::" ":=" ":>" ":<" ">:"
                                       ";;" "__" "&&" "++")))
#+end_src

** default-text-scale
   #+begin_src  emacs-lisp
   (use-package default-text-scale
     :bind (("C-M-=" . default-text-scale-increase)
	    ("C-M--" . default-text-scale-decrease)
	    ("C-M-0" . default-text-scale-reset))
     :config
     (default-text-scale-mode))
   #+end_src

** So-long: Mitigating slowness due to extremely long lines
   #+begin_src emacs-lisp
   (use-package so-long
     :config
     (global-so-long-mode))
   #+end_src

** Alert: Growl-style notification system
   #+BEGIN_SRC emacs-lisp
   (use-package alert
     :defer t
     :config

     (defun thao/alert-notifications-notify (info)
       "Show the alert defined by INFO with `notifications-notify modified for personal
   usage'."
       (let ((id (notifications-notify :title (plist-get info :title)
                                       :body  (plist-get info :message)
                                       :app-icon (plist-get info :icon)
                                       :desktop-entry notifications-application-name
                                       :sound-file "/usr/share/sounds/freedesktop/stereo/message-new-instant.oga"
                                       :timeout (if (plist-get info :persistent) 0 -1)
                                       :replaces-id (gethash (plist-get info :id) alert-notifications-ids)
                                       :urgency (cdr (assq (plist-get info :severity)
                                                           alert-notifications-priorities))
                                       :actions '("default" "Open corresponding buffer")
                                       :on-action (lambda (id action)
                                                    (when (string= action "default")
                                                      (switch-to-buffer (plist-get info :buffer)))))))
         (when (plist-get info :id)
           (puthash (plist-get info :id) id alert-notifications-ids)))
       (alert-message-notify info))

     (defun alert-notifications-remove (info)
       "Remove the `notifications-notify' message based on INFO :id."
       (let ((id (and (plist-get info :id)
                      (gethash (plist-get info :id) alert-notifications-ids))))
         (when id
           (notifications-close-notification id)
           (remhash (plist-get info :id) alert-notifications-ids))))

     (alert-define-style 'notifications-thao :title "Notify using notifications with sound"
                         :notifier #'thao/alert-notifications-notify)


     ;; send alerts by default to D-Bus
     (setopt alert-default-style 'notifications-thao)
     ;; Display alerts for org-pomodoro messages
     ;; https://colekillian.com/posts/org-pomodoro-and-polybar/
     (setopt alert-user-configuration (quote ((((:category . "org-pomodoro")) thao/alert-notifications-notify nil)))))
   #+END_SRC

** Helm

*** Base
    The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
    Changed to "C-c h". Note: We must set "C-c h" globally, because we
    cannot change `helm-command-prefix-key' once `helm-config' is loaded.
    #+begin_src emacs-lisp
    (global-unset-key (kbd "C-x c"))
    (use-package helm
      :demand
      :init (global-set-key (kbd "C-c h") 'helm-command-prefix)
      :commands (helm-M-x helm-mini helm-imenu helm-resume helm-execute-persistent-action helm-select-action helm-command-prefix)
      :bind  (("M-x"     . helm-M-x)
              ("C-x C-m" . helm-M-x)
              ("M-y"     . helm-show-kill-ring)
              ("C-x b"   . helm-mini)
              ("C-x C-b" . helm-buffers-list)
              ("C-x C-f" . helm-find-files)
              ("C-h r"   . helm-info-emacs)
              ("C-h C-l" . helm-locate_library)
              ("C-x r b" . helm-filtered-bookmarks)  ; Use helm bookmarks
              ("C-c f r" . helm-recentf)
              ;; Override standard imenu
              ;; Similar to standard imenu plus flimenu-mode
              ("M-g i"   . helm-imenu)
              ("C-c C-r" . helm-resume)
              ("C-c h"   . helm-command-prefix)
              :map helm-map
              ("<tab>" . helm-execute-persistent-action)  ; Rebind tab to run persistent action
              ("C-i"   . helm-execute-persistent-action)  ; Make TAB work in terminals
              ("C-z"   . helm-select-action)  ; List actions
              ("<tab>"   . helm-execute-persistent-action)
              :map shell-mode-map  ;; Shell history
              ("C-c C-l" . helm-comint-input-ring))
      :config
      (when (executable-find "curl")
        (setopt helm-net-prefer-curl t))
      (setopt helm-split-window-inside-p           t; open helm buffer inside current window, not occupy whole other window
            helm-move-to-line-cycle-in-source     t; move to end or beginning of source when reaching top or bottom of source.
            helm-ff-search-library-in-sexp        t; search for library in `require' and `declare-function' sexp.
            helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
            helm-ff-file-name-history-use-recentf t
                                            ;helm-echo-input-in-header-line t)
            )
      (setopt helm-buffers-fuzzy-matching t
            helm-recentf-fuzzy-match    t)
      (setopt helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
      (setopt helm-semantic-fuzzy-match t
            helm-imenu-fuzzy-match    t
            ;; Just use a plain "/" as delimer and not " / "
            helm-imenu-imenu-delimiter "/")
      (setopt helm-apropos-fuzzy-match t)
      (setopt helm-lisp-fuzzy-completion t)
      (setopt helm-autoresize-max-height 0)
      (setopt helm-autoresize-min-height 30)
      (helm-autoresize-mode 1)
      (helm-mode)
      :custom-face
      (helm-M-x-key ((t (:foreground "orange" :underline t
    			                     :box nil)))))
    #+end_src

*** Helm-Bookmark
    #+begin_src emacs-lisp
    (use-package helm-bookmark
      :after helm
      :config
      ;; Show bookmarks (and create bookmarks) in helm-mini
      (setopt helm-mini-default-sources '(helm-source-buffers-list
    				                    helm-source-recentf
    				                    helm-source-bookmarks
    				                    helm-source-bookmark-set
    				                    helm-source-buffer-not-found)))
    #+end_src

*** Helm-Ag
    #+begin_src emacs-lisp
    (use-package helm-ag
      :disabled t
      :after helm
      :commands (helm-ag helm-ag-this-file helm-do-ag helm-do-ag-this-file helm-do-ag-project-root))
    #+end_src

*** Helm-Projectile
    #+begin_src emacs-lisp
    (use-package helm-projectile
      :after (helm projectile)
      :defer 2
      :config (helm-projectile-on))
    #+end_src

*** Helm-Ext
    Helm "hacks" like better path expandsion
    #+begin_src emacs-lisp
    (use-package helm-ext
      :disabled t
      :after helm
      :config
      ;; Skip . and .. for non empty dirs
      (helm-ext-ff-enable-skipping-dots t)


      ;; Enable zsh/fish shell like path expansion
      (helm-ext-ff-enable-zsh-path-expansion t)
      (helm-ext-ff-enable-auto-path-expandsion t)
      (helm-ext-minibuffer-enable-header-line-maybe t))
    #+end_src

*** Helm-Make:  Don't use minibuffer if there's something there already
    #+begin_src emacs-lisp
    (use-package helm-make
      :disabled t
      :after helm
      :commands (helm-make helm-make-projectile))
    #+end_src

*** Helm-Backup
    #+begin_src emacs-lisp
    (use-package helm-backup :load-path "repos/helm-backup"
      :disabled t
      :after helm
      :commands (helm-backup-versioning helm-backup)
      :hook (after-save . helm-backup-versioning))
    #+end_src

*** Swiper-Helm
    Use swiper with helm backend for search
    #+begin_src emacs-lisp
    (use-package swiper-helm
      :disabled t
      :after helm
      :bind ("\C-s" . swiper-helm))
    #+end_src

*** Helm-icons: Icons in helm-buffers
    #+begin_src emacs-lisp
    (use-package helm-icons
      :init
      (setopt helm-icons-provider 'nerd-icons)
      (helm-icons-enable))
    #+end_src

*** Helm-Descbinds
    #+begin_src  emacs-lisp
    (use-package helm-descbinds
      :bind ("C-h b" . helm-descbinds)
      :init (fset 'describe-bindings 'helm-descbinds))
    #+end_src

** Dired

   #+BEGIN_SRC emacs-lisp
   ;; dired config mostly from https://github.com/Fuco1/.emacs.d/blob/master/files/dired-defs.org
   (use-package dired
     :hook ((dired . gnus-dired-mode))
     :bind (("C-x d" . dired)
            :map dired-mode-map
            ("j" . swiper)
            ("M-u" . dired-up-directory)
            ("M-RET" . emms-play-dired)
            ("e" . dired-ediff-files))
     ;;     ("C-c C-d" . dired-dragon-popup)
     ;;     ("C-c C-e" . dired-toggle-read-only))
     :config
     ;; Tell dired-x to not bind "I" key to `dired-info' or "N" to `dired-man'
     (setopt dired-bind-info nil)
     (setopt dired-bind-man nil)

     ;; Allow drag and drop out of dired into other apps (e.g. browser)
     (setopt dired-mouse-drag-files t)

     ;; When point is on a file name only search file names
     (setopt dired-isearch-filenames 'dwim)

     ;; dired - reuse current buffer by pressing 'a'
     (put 'dired-find-alternate-file 'disabled nil)

     ;; Open directories in same buffer
     (setopt dired-kill-when-opening-new-dired-buffer t)

     ;; always delete and copy recursively
     (setopt dired-recursive-deletes 'always)
     (setopt dired-recursive-copies 'always)

     ;; if there is a dired buffer displayed in the next window, use its
     ;; current subdir, instead of the current subdir of this dired buffer
     (setopt dired-dwim-target t)

     (defconst my-dired-media-files-extensions
       '("mp3" "mp4" "MP3" "MP4" "avi" "mpg" "flv" "ogg")
       "Media files.")

     ;; dired list size in human-readable format and list directories first
     (setopt dired-listing-switches "-AGhlv --group-directories-first --time-style=long-iso")

     ;; Not needed anymore since Emacs 29+ has native drag and drop support out of dired
     (defun dired-dragon-popup ()
       "Open dragon (drag and drop) with the marked files or the file at point."
       (interactive)
       (make-process
        :name "dragon"
        :command (append '("dragon-drop") (dired-get-marked-files))))

     ;; Easily diff 2 marked files in dired
     ;; https://oremacs.com/2017/03/18/dired-ediff/
     (defun dired-ediff-files ()
       (interactive)
       (let ((files (dired-get-marked-files))
             (wnd (current-window-configuration)))
         (if (<= (length files) 2)
             (let ((file1 (car files))
                   (file2 (if (cdr files)
                              (cadr files)
                            (read-file-name
                             "file: "
                             (dired-dwim-target-directory)))))
               (if (file-newer-than-file-p file1 file2)
                   (ediff-files file2 file1)
                 (ediff-files file1 file2))
               (add-hook 'ediff-after-quit-hook-internal
                         (lambda ()
                           (setopt ediff-after-quit-hook-internal nil)
                           (set-window-configuration wnd))))
           (error "no more than 2 files should be marked")))))

   (use-package dired-aux
     :after dired
     :config
     ;; Add unrar to `dired-compress'
     (add-to-list 'dired-compress-file-suffixes '("\\.rar\\'" "" "unrar x %i")))

   (use-package wdired
     :after dired
     :config
     ;; Make permission bits editable
     (setopt wdired-allow-to-change-permissions t))

   (use-package dired-x
     :bind ("C-x C-j" . dired-jump)
     :config
     (add-to-list 'dired-guess-shell-alist-user
                  (list (concat "\\."
                                (regexp-opt my-dired-media-files-extensions)
                                "\\'")
                        "mpv")))

   ;; Display the recursive size of directories in Dired
   (use-package dired-du
     :after dired
     :config
     ;; human readable size format
     (setopt dired-du-size-format t))

   (use-package async
     :config
     (setopt async-bytecomp-package-mode nil))

   (use-package dired-async  ; Part of async
     :after dired
     :config (dired-async-mode 1))
   (use-package dired-filter
     :after dired
     :config
     ;; Define standard keybind for filter mode and also the
     ;; same keybind used in Dolphin
     (define-key dired-mode-map (kbd "/") dired-filter-map)
     (define-key dired-mode-map (kbd "C-i") dired-filter-map))
   #+END_SRC
*** dired-rsync
    #+BEGIN_SRC txt :tangle arch-pkglist.txt
 rsync
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
    (use-package dired-rsync
                                            ; Needs to be after dired-x as it binds the "Y" key too
      :after dired-x
      :bind (:map dired-mode-map
                  ("Y" . dired-rsync)))
    #+END_SRC

*** Dired-hacks
    #+BEGIN_SRC emacs-lisp
    (use-package dired-hacks-utils
      :hook (dired-mode . dired-utils-format-information-line-mode))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
    (use-package dired-rainbow
      :after dired
      :config
      (dired-rainbow-define html "#4e9a06" ("htm" "html" "xhtml"))
      (dired-rainbow-define xml "#b4fa70" ("xml" "xsd" "xsl" "xslt" "wsdl"))

      (dired-rainbow-define document font-lock-function-name-face ("doc" "docx" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub"))
      (dired-rainbow-define excel "#3465a4" ("xlsx"))
      ;; FIXME: my-dired-media-files-extensions not defined?
      ;;(dired-rainbow-define media "#ce5c00" my-dired-media-files-extensions)
      (dired-rainbow-define image "#ff4b4b" ("jpg" "png" "jpeg" "gif"))

      (dired-rainbow-define log "#c17d11" ("log"))
      (dired-rainbow-define sourcefile "#fcaf3e" ("py" "c" "cc" "cpp" "h" "java" "pl" "rb" "R"
                                                  "php" "go" "rust" "js" "ts" "hs"))

      (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
      (dired-rainbow-define compressed "#ad7fa8" ("zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar"
                                                  "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
      (dired-rainbow-define packaged "#e6a8df" ("deb" "rpm"))
      (dired-rainbow-define encrypted "LightBlue" ("gpg" "pgp"))

      (dired-rainbow-define-chmod executable-unix "Green" "-.*x.*"))

    (use-package dired-collapse
      :bind (:map dired-mode-map
                  (")" . dired-collapse-mode))
      :hook (dired-mode . dired-collapse-mode))
    #+END_SRC

    Browse compressed archives in dired (requires `avfs' to be installed)
    Run `mountavfs' to start `avfsd' which is needed for it to work.

    #+BEGIN_SRC txt :tangle arch-pkglist.txt
 avfs
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
    (use-package dired-avfs
      :after dired
      :config
      ;; Don't warn about opening archives less than 512MB (default 100)
      (setopt dired-avfs-file-size-threshold 512))

    (use-package dired-open
      :after dired
      :bind (:map dired-mode-map
                  ("RET" . dired-open-file)
                  ([return] . dired-open-file)
                  ("f" . dired-open-file)
                  ("C-RET" . dired-open-xdg)
                  ([(control return)] . dired-open-xdg))
      :config
      (setopt dired-open-functions '(dired-open-by-extension dired-open-guess-shell-alist dired-open-subdir)))

    (use-package dired-ranger
      :after dired
      :init
      (bind-keys :map dired-mode-map
                 :prefix "c"
                 :prefix-map dired-ranger-map
                 :prefix-docstring "Map for ranger operations."
                 ("c" . dired-ranger-copy)
                 ("p" . dired-ranger-paste)
                 ("m" . dired-ranger-move))

      (bind-keys :map dired-mode-map
                 ("'" . dired-ranger-bookmark)
                 ("`" . dired-ranger-bookmark-visit)))

    ;;narrow dired to match filter
    (use-package dired-narrow
      :after dired
      :bind (:map dired-mode-map
                  ("/" . dired-narrow)))

    (use-package dired-subtree
      :after dired
      :bind (:map dired-mode-map
                  ("i" . dired-subtree-insert)
                  ("I" . dired-subtree-remove)))
    #+END_SRC

*** Treemacs-icons-dired: Treemacs icons for dired
     #+BEGIN_SRC emacs-lisp
     (use-package treemacs-icons-dired
       :disabled t
       :hook ((dired-mode . treemacs-icons-dired-mode)))
     #+END_SRC

*** Dired-History
    :PROPERTIES:
    :CREATED:  [2024-03-09 Sat 00:58]
    :END:
    #+begin_src emacs-lisp
    (use-package helm-dired-history)
    #+end_src

*** Dirvish
    :PROPERTIES:
    :CREATED:  [2024-06-15 Sat 12:49]
    :END:
    #+begin_src emacs-lisp
    (use-package dirvish
      :init
      (dirvish-override-dired-mode)
      :config
      ;; (dirvish-peek-mode) ; Preview files in minibuffer
      ;; (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
      (setopt dirvish-mode-line-format
              '(:left (sort symlink) :right (omit yank index)))
      (setopt dirvish-attributes
              '(nerd-icons file-time file-size collapse subtree-state vc-state git-msg))
      (setopt delete-by-moving-to-trash t)
      (setopt dirvish-subtree-state-style 'nerd)
      (setopt dirvish-preview-environment
              '((inhibit-message . t)
                (non-essential . t)
                (delay-mode-hooks . t)
                (enable-dir-local-variables)
                (enable-local-variables . :safe)
                (buffer-read-only . t)))
      (setopt dired-listing-switches
              "-l --almost-all --human-readable --group-directories-first --no-group")
      :bind ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
      (:map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
            ("f"   . dirvish-file-info-menu)
            ("y"   . dirvish-yank-menu)
            ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
            ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
        ;;    ("TAB" . dirvish-subtree-toggle)
            ("M-f" . dirvish-history-go-forward)
            ("M-b" . dirvish-history-go-backward)
            ("M-l" . dirvish-ls-switches-menu)
            ("M-m" . dirvish-mark-menu)
            ("M-t" . dirvish-layout-toggle)
            ("M-s" . dirvish-setup-menu)
            ("M-e" . dirvish-emerge-menu))
      )

    (use-package dirvish-fd
      :bind
      (("C-c f f" . dirvish-fd)
       :map dirvish-mode-map
       ("M-j" . dirvish-fd-jump)))

    (use-package dirvish-history
      :bind (:map dirvish-mode-map
                  ("^"   . dirvish-history-last)
                  ("h"   . dirvish-history-jump) ; remapped `describe-mode'
                  ))

    (use-package dirvish-quick-access
      :config
      (require 'xdg)
      (setopt dirvish-quick-access-entries    `(("h" "~/"                          "Home")
                                                ("d" ,(xdg-user-dir "DOWNLOAD")             "Downloads")
                                                ("p" ,(xdg-user-dir "PICTURES") "Pictures")
                                                ("t" "~/.local/share/Trash/files/" "TrashCan")))
      :bind
      (:map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
            ("a"   . dirvish-quick-access)))

    (use-package dirvish-narrow
      :bind
      (:map dirvish-mode-map
            ("N"   . dirvish-narrow)))
    #+end_src

*** Image-dired
    :PROPERTIES:
    :CREATED:  [2024-06-15 Sat 15:40]
    :END:
#+begin_src emacs-lisp
(use-package image-dired
  :config
  (setopt image-dired-thumbnail-storage 'standard-large))
#+end_src

** Highlight indentations
   #+begin_src emacs-lisp
   ;; highlight indentations in python
   (use-package highlight-indent-guides
     :hook ((python-mode python-ts-mode yaml-mode) . highlight-indent-guides-mode)
     :config
     ;; Don't highlight first level (that would be a line at column 1)
     (defun my-highlighter (level responsive display)
       (if (> 1 level) ; replace `1' with the number of guides you want to hide
	   nil
	 (highlight-indent-guides--highlighter-default level responsive display))

       (setopt highlight-indent-guides-highlighter-function 'my-highlighter)
       (setopt highlight-indent-guides-method 'character)
       (setopt highlight-indent-guides-character ?\|)

       ;; (setopt highlight-indent-guides-auto-odd-face-perc 15)
       ;; (setopt highlight-indent-guides-auto-even-face-perc 15)
       ;; (setopt highlight-indent-guides-auto-character-face-perc 20)
       ;; (highlight-indent-guides-auto-set-faces)

       (setopt highlight-indent-guides-auto-enabled nil)
       (set-face-foreground 'highlight-indent-guides-character-face "#3a3a3a")))
   #+end_src

** Whitespace
   #+begin_src emacs-lisp
   (use-package whitespace
     :defer t
     ;; :hook (prog-mode . whitespace-mode)
     :config
     (setopt whitespace-style '(face tabs empty trailing lines-tail))
     ;; highlight lines with more than `fill-column' characters
     (setopt whitespace-line-column nil))
   #+end_src

** Symbol-Overlay
   #+begin_src emacs-lisp
   (use-package symbol-overlay
     :hook ((prog-mode html-mode css-mode) . symbol-overlay-mode)
     :bind (("C-c s" . symbol-overlay-put)
	    :map symbol-overlay-mode-map
	    ("M-n" . symbol-overlay-jump-next)
	    ("M-p" . symbol-overlay-jump-prev)
	    :map symbol-overlay-map
	    ("M-n" . symbol-overlay-jump-next)
	    ("M-p" . symbol-overlay-jump-prev)
	    ("C-c C-s r" . symbol-overlay-rename)
	    ("C-c C-s k" . symbol-overlay-remove-all)
	    ("C-c C-s q" . symbol-overlay-query-replace)
	    ("C-c C-s t" . symbol-overlay-toggle-in-scope)
	    ("C-c C-s n" . symbol-overlay-jump-next)
	    ("C-c C-s p" . symbol-overlay-jump-prev))
     :init (setopt symbol-overlay-temp-in-scope t)
     :config
     ;;(set-face-background 'symbol-overlay-temp-face "gray30")
     ;; Remove all default bindings
     (setopt symbol-overlay-map (make-sparse-keymap)))
   #+end_src

** Smart-Parens
   #+begin_src emacs-lisp
   (use-package smartparens
     :defer 1
     :disabled t
     :hook ((
             emacs-lisp-mode lisp-mode lisp-data-mode clojure-mode cider-repl-mode hy-mode
             prolog-mode go-mode cc-mode python-mode
             typescript-mode json-mode javascript-mode java-mode
             java-ts-mode typescript-ts-mode python-ts-mode js-ts-mode json-ts-mode
             ) . smartparens-strict-mode)
     ;; :hook (prog-mode . smartparens-strict-mode)
     :bind (:map smartparens-mode-map
                 ;; This is the paredit mode map minus a few key bindings
                 ;; that I use in other modes (e.g. M-?)
                 ("C-M-f" . sp-forward-sexp) ;; navigation
                 ("C-M-b" . sp-backward-sexp)
                 ("C-M-u" . sp-backward-up-sexp)
                 ("C-M-d" . sp-down-sexp)
                 ("C-M-p" . sp-backward-down-sexp)
                 ("C-M-n" . sp-up-sexp)
                 ("M-s" . sp-splice-sexp) ;; depth-changing commands
                 ("M-r" . sp-splice-sexp-killing-around)
                 ("M-(" . sp-wrap-round)
                 ("C-)" . sp-forward-slurp-sexp) ;; barf/slurp
                 ("C-<right>" . sp-forward-slurp-sexp)
                 ("C-}" . sp-forward-barf-sexp)
                 ("C-<left>" . sp-forward-barf-sexp)
                 ("C-(" . sp-backward-slurp-sexp)
                 ("C-M-<left>" . sp-backward-slurp-sexp)
                 ("C-{" . sp-backward-barf-sexp)
                 ("C-M-<right>" . sp-backward-barf-sexp)
                 ("M-S" . sp-split-sexp) ;; misc
                 ("M-j" . sp-join-sexp))
     :config
     (require 'smartparens-config)
     (setopt sp-base-key-bindings 'paredit)
     (setopt sp-autoskip-closing-pair 'always)

     ;; Always highlight matching parens
     (show-smartparens-global-mode +1)
     (setopt blink-matching-paren nil)  ;; Don't blink matching parens

     ;; Create keybindings to wrap symbol/region in pairs
     (defun prelude-wrap-with (s)
       "Create a wrapper function for smartparens using S."
       `(lambda (&optional arg)
          (interactive "P")
          (sp-wrap-with-pair ,s)))
     (define-key prog-mode-map (kbd "M-(") (prelude-wrap-with "("))
     (define-key prog-mode-map (kbd "M-[") (prelude-wrap-with "["))
     (define-key prog-mode-map (kbd "M-{") (prelude-wrap-with "{"))
     (define-key prog-mode-map (kbd "M-\"") (prelude-wrap-with "\""))
     (define-key prog-mode-map (kbd "M-'") (prelude-wrap-with "'"))
     (define-key prog-mode-map (kbd "M-`") (prelude-wrap-with "`"))

     ;; smart curly braces
     (sp-pair "{" nil :post-handlers
              '(((lambda (&rest _ignored)
                   (crux-smart-open-line-above)) "RET")))
     (sp-pair "[" nil :post-handlers
              '(((lambda (&rest _ignored)
                   (crux-smart-open-line-above)) "RET")))
     (sp-pair "(" nil :post-handlers
              '(((lambda (&rest _ignored)
                   (crux-smart-open-line-above)) "RET")))

     ;; Don't include semicolon ; when slurping
     (add-to-list 'sp-sexp-suffix '(java-mode regexp "")))
   #+end_src

** Grep-Context: Get more context for compilation/grep buffers by pressing +/-
   #+begin_src emacs-lisp
   (use-package grep-context
     :after helm
     :bind (:map compilation-mode-map
    	          ("+" . grep-context-more-around-point)
    	          ("-" . grep-context-less-around-point)
    	          :map grep-mode-map
    	          ("+" . grep-context-more-around-point)
    	          ("-" . grep-context-less-around-point)
    	          :map ivy-occur-grep-mode-map
    	          ("+" . grep-context-more-around-point)
    	          ("-" . grep-context-less-around-point)))
   #+end_src

** Which-Key: Display available keybindings in popup
   #+begin_src emacs-lisp
   (use-package which-key
     :defer nil
     :config (which-key-mode 1))
   #+end_src

** Which-func: Show the name of the current function definition in the modeline
   #+begin_src emacs-lisp
   (use-package which-func
     :disabled t
     :defer 5
     :config (which-function-mode 1))
   #+end_src

** Uniquify: Nicer buffer name for buffers with same name
   #+begin_src emacs-lisp
   (use-package uniquify
     :config
     (setopt uniquify-buffer-name-style 'forward)
     (setopt uniquify-separator "/")
     (setopt uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
     (setopt uniquify-ignore-buffers-re "^\\*")) ; don't muck with special buffers)
   #+end_src

** Eldoc: Display help
   #+begin_src emacs-lisp
   (use-package eldoc
     :hook (prog-mode . eldoc-mode))
   #+end_src

** Hl-todo: Highlight and navigate TODO keywords
   #+begin_src emacs-lisp
   (use-package hl-todo
     :defer 2
     :config (global-hl-todo-mode))
   #+end_src

** Minibuffer interaction
   #+begin_src emacs-lisp
   (setopt enable-recursive-minibuffers t)
   #+end_src

** Marginalia in the minibuffer
   Enable richer annotations using the Marginalia package.

   #+BEGIN_SRC emacs-lisp
   (use-package marginalia
     ;; Either bind `marginalia-cycle` globally or only in the minibuffer
     :bind (("M-A" . marginalia-cycle)
            :map minibuffer-local-map
            ("M-A" . marginalia-cycle))
     :init (marginalia-mode))
   #+END_SRC

** Emacs transparent frames / alpha-background
   :PROPERTIES:
   :CREATED:  [2023-10-13 Fri 01:07]
   :END:
   #+begin_src emacs-lisp
   (defun system-process-running? (process-name)
     "Checks if process with PROCESS-NAME is running on the system."
     (->> (list-system-processes)
          (mapcar
           (lambda (pid) (string-match-p process-name (alist-get 'args (process-attributes pid)))))
          (-any? #'identity)))

   (setopt alpha-background-default 80)

   (defun alpha-background-frame-opaque-p ()
     "Return if current frame is opaque."
     (let ((current-alpha (frame-parameter nil 'alpha-background)))
       (or (not current-alpha) (= current-alpha 100))))

   (defun alpha-background-frame-toggle (&optional alpha-background)
     "Toggle transparency for the current frame.
   Toggle alpha-background to `alpha-background' or `alpha-background-default' when not specified."
     (interactive "P")
     ;; Start picom if it's not running already
     (unless (system-process-running? "picom")
       (start-process-shell-command "picom" nil "picom"))
     (let ((alpha-bkg (when (alpha-background-frame-opaque-p)
                        (or alpha-background alpha-background-default))))
       (set-frame-parameter nil 'alpha-background alpha-bkg)))

   (defun --alpha-background-frame-default (frame)
     (set-frame-parameter frame 'alpha-background alpha-background-default))
   ;; Hook for when a frame is created with emacsclient
   ;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
   (add-hook 'after-make-frame-functions '--alpha-background-frame-default)
   #+end_src

** i3
   :PROPERTIES:
   :CREATED:  [2023-10-13 Fri 01:40]
   :END:
   #+begin_src emacs-lisp
   (use-package i3
     :demand t
     ;; only load when i3 is present FIXME
     :bind (("s-j" . i3-windmove-left)
            ("s-l" . i3-windmove-right)
            ("s-i" . i3-windmove-up)
            ("s-k" . i3-windmove-down)
            ("s-J" . i3-windmove-swap-states-left)
            ("s-L" . i3-windmove-swap-states-right))
     :config
     (require 'i3-integration)
     (require 'windmove)
     (i3-advise-visible-frame-list-on)
     (defun i3-windmove-left (&optional arg)
       "Like windmove-left but call i3 command `focus left'
   if there is no window on the left."
       (interactive "P")
       (if (windmove-find-other-window 'left arg)
           (windmove-do-window-select 'left arg)
         ;; No window to the left
         (i3-command 0 "focus left")))

     (defun i3-windmove-right (&optional arg)
       "Like windmove-right but call i3 command `focus right'
   if there is no window on the right."
       (interactive "P")
       (if (windmove-find-other-window 'right arg)
           (windmove-do-window-select 'right arg)
         ;; No window to the right
         (i3-command 0 "focus right")
         ;; (i3-command 0 "mode 'default'")
         ))

     (defun i3-windmove-up (&optional arg)
       "Like windmove-up but call i3 command `focus up'
   if there is no window on the up."
       (interactive "P")
       (if (windmove-find-other-window 'up arg)
           (windmove-do-window-select 'up arg)
         ;; No window to the up
         (i3-command 0 "focus up")))

     (defun i3-windmove-down (&optional arg)
       "Like windmove-down but call i3 command `focus down'
   if there is no window on the down."
       (interactive "P")
       (let ((other-window (windmove-find-other-window 'down arg)))
         (if (or (and other-window
                      (not (window-minibuffer-p other-window)))
                 (and (window-minibuffer-p other-window)
                      (minibuffer-window-active-p other-window)))
             (windmove-do-window-select 'down arg)
           ;; No window to the down
           (i3-command 0 "focus down"))))

     (defun i3-windmove-swap-states-left (&optional arg)
       "Like windmove-swap-states-left but call i3 command `move left'
   if there is no window on the left."
       (interactive "P")
       (if (windmove-find-other-window 'left arg)
           (windmove-swap-states-in-direction 'left)
         ;; No window to the left
         (i3-command 0 "move left")))

     (defun i3-windmove-swap-states-right (&optional arg)
       "Like windmove-swap-states-right but call i3 command `move right'
   if there is no window on the right."
       (interactive "P")
       (if (windmove-find-other-window 'right arg)
           (windmove-swap-states-in-direction 'right)
         ;; No window to the right
         (i3-command 0 "move right"))))
   #+end_src
   Better syntax highlighting for .config/i3/config

   #+begin_src emacs-lisp
   (use-package i3wm-config-mode
     :defer t)
   #+end_src

** Frame
   :PROPERTIES:
   :CREATED:  [2023-11-06 Mon 11:24]
   :END:
   #+begin_src emacs-lisp
   (use-package frame
     :config
     (undelete-frame-mode))
   #+end_src

** Nerd-icons-ibuffer: Nerd-Icons in ibuffer
   :PROPERTIES:
   :CREATED:  [2023-11-14 Tue 03:52]
   :END:
   #+begin_src emacs-lisp
   (use-package nerd-icons-ibuffer
     :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
   #+end_src

* Navigation

  #+begin_src emacs-lisp
  (use-package bookmark
    :defer t
    :config (setopt bookmark-save-flag 1))

  ;; Nicer mark ring navigation (C-x C-SPC or C-x C-Left/Right)
  (use-package back-button
    :defer 2
    :config (back-button-mode))

  ;; Goto last change
  (use-package goto-chg
    :bind (("C-c \\" . goto-last-change)
           ("C-c |" . goto-last-change-reverse)))

  ;; Map scrolling keys to heir appropriate functions
  (global-set-key (kbd "<next>") #'forward-page)
  (global-set-key (kbd "<prior>") #'backward-page)
  (global-set-key (kbd "<home>") 'beginning-of-buffer)
  (global-set-key (kbd "<end>") 'end-of-buffer)
  #+end_src

** Avy: Quickly jump to any character on screen
   #+begin_src emacs-lisp
   (use-package avy
     :bind ("C-;" . avy-goto-char-timer)
     :config
     (setopt avy-background t)
     (setopt avy-style 'at-full)
     (setopt avy-timeout-seconds 0.2))
   #+end_src

** Ace-link: Quickly jump to any link on screen
   #+begin_src emacs-lisp
   (use-package ace-link
     :after org  ;; Otherwise can't bind to org-mode-map
     :bind (:map Info-mode-map ("o" . ace-link-info)
                 :map help-mode-map ("o" . ace-link-help)
                 :map compilation-mode-map ("o" . ace-link-compilation)
                 :map org-mode-map ("M-o" . ace-link-org))
     :init
     (eval-after-load "woman"
       `(define-key woman-mode-map ,"o" 'ace-link-woman))
     (eval-after-load "man"
       `(define-key Man-mode-map ,"o" 'ace-link-woman))
     (eval-after-load "eww"
       `(progn
          (define-key eww-link-keymap ,"o" 'ace-link-eww)
          (define-key eww-mode-map ,"o" 'ace-link-eww))))
   #+end_src

** Ace-window: Select/move/swap windows
   #+begin_src emacs-lisp
   (use-package ace-window
     :bind ("s-a" . ace-window)
     :config
     (setopt aw-scope 'visible))
   #+end_src

** Display Buffer Action
   :PROPERTIES:
   :CREATED:  [2024-07-26 Fri 18:34]
   :END:

** Dumb-jump: Jump to definition with smart regex searches
   Dumb Jump is an Emacs "jump to definition" package with support for 40+ programming languages that favors
   "just working" over speed or accuracy.  This means minimal -- and ideally zero -- configuration with absolutely
   no stored indexes (TAGS) or persistent background processes.  Dumb Jump performs best with The Silver Searcher
   `ag` or ripgrep `rg` installed.

   #+BEGIN_SRC emacs-lisp
   (use-package dumb-jump
     :bind (("M-g o" . xref-find-definitions-other-window)
            ("M-g j" . xref-find-definitions)
            ("M-g p" . xref-go-back))
     :init
     (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
     :config
     (setopt dumb-jump-selector 'helm))
   #+END_SRC

** ibuffer
    #+BEGIN_SRC emacs-lisp
    (use-package ibuffer
      :bind ("C-x C-b" . ibuffer))

    (use-package ibuffer-projectile
      :hook (ibuffer . ibuffer-projectile-init)
      :commands ibuffer-projectile-init
      :config
      (defun ibuffer-projectile-init()
        (ibuffer-projectile-set-filter-groups)
        (unless (eq ibuffer-sorting-mode 'alphabetic)
          (ibuffer-do-sort-by-alphabetic))))
    #+END_SRC

** Frames only mode
   #+begin_src emacs-lisp
   (use-package frames-only-mode
     :config
     (setopt frames-only-mode-kill-frame-when-buffer-killed-buffer-list
             '("*RefTeX Select*"
               "*Help*"
               "*Popup Help*"
               "*Completions*"
               ))
     (setopt frames-only-mode-configuration-variables
             '((pop-up-frames graphic-only)
               (mouse-autoselect-window nil)
               (focus-follows-mouse nil)
               (frame-auto-hide-function delete-frame)
               (org-agenda-window-setup other-frame)
               (org-src-window-setup other-frame)
               (ediff-window-setup-function ediff-setup-windows-plain)
               (ido-default-buffer-method selected-window)
           ;;    (magit-commit-show-diff nil)
               (magit-bury-buffer-function frames-only-mode-magit-bury-buffer-function)
               (flycheck-display-errors-function frames-only-mode-flycheck-display-errors)))
     (frames-only-mode))
   #+end_src

** Hydras
   :PROPERTIES:
   :CREATED:  [2023-09-15 Fri 13:55]
   :END:
   #+begin_src emacs-lisp
   (use-package hydra
     :disabled t
     :bind (("C-c S" . hydra-scratchpad/body)
            ("C-x t" . hydra-toggle-stuff/body)
            ("C-x l" . hydra-emacs-launcher/body))
         ;;   ("C-x C-l" . hydra-emacs-launcher/body))
           ;; ("C-x L" . hydra-external-launcher/body))
     :config
     (hydra-add-font-lock)

     (defhydra hydra-scratchpad (:hint nil)
       "
        _p_ython    _e_lisp        _s_ql
        _g_o        _j_avascript   _t_ypescript
        _r_ust      _R_est-client  _h_tml
        _o_rg-mode  _T_ext         _m_arkdown
        "
       ("p" (switch-to-buffer "*python*scratchpad.py"))
       ("e" (switch-to-buffer "*elisp*scratchpad.el"))
       ("s" (switch-to-buffer "*sql*scratchpad.sql"))
       ("g" (switch-to-buffer "*go*scratchpad.go"))
       ("j" (switch-to-buffer "*js*scratchpad.js"))
       ("t" (switch-to-buffer "*ts*scratchpad.ts"))
       ("r" (switch-to-buffer "*rust*scratchpad.rs"))
       ("R" (switch-to-buffer "*rest*scratchpad.rest"))
       ("h" (switch-to-buffer "*html*scratchpad.html"))
       ("o" (switch-to-buffer "*org*scratchpad.org"))
       ("T" (switch-to-buffer "*text*scratchpad.txt"))
       ("m" (switch-to-buffer "*markdown*scratchpad.md")))

     (eval-and-compile
       (defmacro hydra-help-toggle (text toggle)
         `(if (bound-and-true-p ,toggle)
              (format "[x] %s" ,text)
            (format "[ ] %s" ,text))))

     (defhydra hydra-toggle-stuff (:color blue :hint nil)
       "Toggle"
       ("a" abbrev-mode (hydra-help-toggle "abbrev" abbrev-mode) :column "Misc")
       ;; ("b" dakra-toggle-browser (format "[%s] toggle eww/firefox"
       ;;                                   (if (eq browse-url-browser-function 'browse-url-firefox) "Firefox" "eww")))
       ("d" toggle-debug-on-error (hydra-help-toggle "debug-on-error" debug-on-error))
       ("s" sticky-buffer-mode (hydra-help-toggle "Sticky buffer mode" sticky-buffer-mode))
       ("t" alpha-background-frame-toggle (format "[%s] toggle transparency"
                                                   (if (alpha-background-frame-opaque-p) " " "x")))
       ("c" column-number-mode (hydra-help-toggle "column-number-mode" column-number-mode) :column "Text")
       ("f" auto-fill-mode (hydra-help-toggle "fill-mode" auto-fill-function))
       ("F" web-server-file-server-toggle (hydra-help-toggle "Toggle file file-server" web-server-file-server))
       ("w" whitespace-mode (hydra-help-toggle "whitespace-mode" whitespace-mode))
       ("l" toggle-truncate-lines (hydra-help-toggle "truncate-lines" truncate-lines))
       ("ol" org-toggle-link-display (hydra-help-toggle "org link-display" org-descriptive-links) :column "Org")
       ("op" org-toggle-pretty-entities (hydra-help-toggle "org pretty-entities" org-pretty-entities))
       ("oi" org-toggle-inline-images (hydra-help-toggle "org inline-images" org-inline-image-overlays)))


     ;; Start different emacs packages (like elfeed or mu4e)
     (defhydra hydra-emacs-launcher (:color blue :hint nil)
       "Launch emacs package"
       ("i" circe "Circe - IRC" :column "Apps")
       ("I" circe-connect-all "Circe - IRC (connect all)")
       ("e" elfeed-summary "Elfeed - RSS/Atom Newsreader")
       ("t" transmission "Transmission - Torrent")
       ("g" gnus-other-frame "Gnus - Mail")
       ("m" mastodon "Mastodon.el - Mastodon")
       ("p" proced "proced")
       ("c" quick-calc "calc - Quick calc" :column "Utils")
       ("d" docker "docker")
       ("C" calendar "calendar")
       ("T" world-clock "time - Display world time")
       ("s" hydra-systemctl/body "Systemctl")
       ("j" journalctl "Journalctl")
       ("t" multi-vterm "Vterm"  :column "Misc")
       ("b" brain-fm-play "brain.fm - Stream music")
       ("E" elisp-index-search "elisp-index-search")
       ("S" scrot "Screenshot with scrot")
       ("w" woman "woman - Man page viewer"))

     ;; ;; Start different external programs (like Termite or Firefox).
     ;; (defhydra hydra-external-launcher (:color blue :hint nil)
     ;;   "Start external program"
     ;;   ("p" (start-process-shell-command "pavucontrol" nil "pavucontrol") "pavucontrol - sound settings")
     ;;   ("f" (start-process-shell-command "firefox" nil "env GTK_THEME=Arc firefox") "Firefox")
     ;;   ("F" (start-process-shell-command "firefox-developer-edition" nil "env GTK_THEME=Arc firefox-developer-edition") "Firefox Developer Edition")
     ;;   ("k" (start-process-shell-command "keepassxc" nil "keepassxc") "keepassxc - Password Manager")
     ;;   ("l" (start-process-shell-command "i3lockr" nil "i3lockr --blur 25 -- --nofork --ignore-empty-password") "Lock screen")
     ;;   ("n" (start-process-shell-command "networkmanager_dmenu" nil "networkmanager_dmenu") "Networkmanager")
     ;;   ("s" (start-process-shell-command "shutter" nil "shutter") "shutter - Screenshot")

     (defhydra hydra-diff-hl (:color red)
       "diff-hl"
       ("=" diff-hl-diff-goto-hunk "goto hunk")
       ("<RET>" diff-hl-diff-goto-hunk "goto hunk")
       ("u" diff-hl-revert-hunk "revert hunk")
       ("[" diff-hl-previous-hunk "prev hunk")
       ("p" diff-hl-previous-hunk "prev hunk")
       ("]" diff-hl-next-hunk "next hunk")
       ("n" diff-hl-next-hunk "next hunk")
       ("q" nil "cancel")))
   #+end_src

** Sticky-buffer: Lock a buffer to a window
   :PROPERTIES:
   :CREATED:  [2024-06-24 Mon 00:29]
   :END:
   From http://lists.gnu.org/archive/html/help-gnu-emacs/2007-05/msg00975.html
   #+begin_src emacs-lisp
   (define-minor-mode sticky-buffer-mode
     "Make the current window always display this buffer."
     :lighter " sticky"
     (set-window-dedicated-p (selected-window) sticky-buffer-mode))

   (defun display-buffer-window-dedicated (buffer)
     "Like `display-buffer' but the returning window is set as dedicated."
     (when-let ((window (display-buffer buffer '(nil (inhibit-same-window . t)))))
       (set-window-dedicated-p window t)
       window))

   #+end_src

** Transient
   :PROPERTIES:
   :CREATED:  [2024-10-04 Fri 13:02]
   :END:
   #+begin_src emacs-lisp
   (use-package use-package-transient)

   (defmacro transient-toggle-description (text toggle)
     `(lambda ()
        (if (bound-and-true-p ,toggle)
            (format "[x] %s" ,text)
          (format "[ ] %s" ,text))))
   (defmacro transient-toggle-description-function-p
       (text toggle-function)
     `(lambda ()
        (if (,toggle-function)
            (format "[ ] %s" ,text)
          (format "[x] %s" ,text))))

   (use-package transient
     :bind (("C-c S" . thao/transient-scratchpad)
            ("C-x t" . thao/transient-toggle-stuff)
            ("C-x l" . thao/transient-emacs-launcher))
     :transient-prefix
     (thao/transient-toggle-stuff ()
      "Toggle"
      [:class transient-columns
              ["Misc"
               ("a" abbrev-mode :description ,(transient-toggle-description
                                               "abbrev" abbrev-mode))
               ("d" toggle-debug-on-error :description
                ,(transient-toggle-description "debug-on-error" debug-on-error))
               ("s" sticky-buffer-mode
                :description ,(transient-toggle-description
                               "Sticky buffer mode" sticky-buffer-mode))
               ("t" alpha-background-frame-toggle
                :description ,(transient-toggle-description-function-p
                               "toggle transparency"
                               alpha-background-frame-opaque-p))
               ("c" centered-window-mode
                :description ,(transient-toggle-description "centered-window" centered-window-mode))]
              ["Text"
               ;; Enabled for text related modes
               ;; logview-mode falls into that category but doesn't
               ;; derive from text- or prog-mode
               :if-derived (prog-mode text-mode logview-mode)
               ("f" auto-fill-mode :description
                ,(transient-toggle-description "fill-mode" auto-fill-mode))
               ;;     ("F" web-server-file-file-server-toggle :description
               ;; ,(transient-toggle-description "Toggle file-server"
               ;;                               web-server-file-server))
               ("w" whitespace-mode :description
                ,(transient-toggle-description "whitespace-mode" whitespace-mode))
               ("v" view-mode :description
                ,(transient-toggle-description "view-mode" view-mode))
               ("l" toggle-truncate-lines :description
                ,(transient-toggle-description "truncate-lines" truncate-lines))]
              ["Org-mode"
               :if-derived org-mode
               ("ol" org-toggle-link-display :description
                ,(transient-toggle-description "org link-display"
                                               org-descriptive-links))
               ("op" org-toggle-pretty-entities :description
                ,(transient-toggle-description "org pretty-entries"
                                               org-pretty-entities))
               ("om" org-modern-mode :description
                ,(transient-toggle-description "org-modern-mode"
                                               org-modern-mode))
               ("oi" org-toggle-inline-images :description
                ,(transient-toggle-description "org inline-images"
                                               org-inline-image-overlays))]])
     (thao/transient-scratchpad ()
      "Open selected scratchpad buffer"
      ["Open Scratchbuffer"
       [("p" "Python"
         (lambda ()
           (interactive)
           (switch-to-buffer "*python*scratchpad.py")))
        ("e" "Elisp"
         (lambda ()
           (interactive)
           (switch-to-buffer "*elisp*scratchpad.el")))
        ("s" "SQL"
         (lambda ()
           (interactive)
           (switch-to-buffer "*sql*scratchpad.sql")))
        ("g" "Go"
         (lambda ()
           (interactive)
           (switch-to-buffer "*python*scratchpad.go")))]
       [("j" "JavaScript"
         (lambda ()
           (interactive)
           (switch-to-buffer "*js*scratchpad.js")))
        ("t" "TypeScript"
         (lambda ()
           (interactive)
           (switch-to-buffer "*ts*scratchpad.ts")))
        ("r" "Rust"
         (lambda ()
           (interactive)
           (switch-to-buffer "*rust*scratchpad.rs")))
        ("R" "Rest-Client"
         (lambda ()
           (interactive)
           (switch-to-buffer "*rest*scratchpad.rest")))]
       [("h" "HTML"
         (lambda ()
           (interactive)
           (switch-to-buffer "*html*scratchpad.html")))
        ("o" "Org-Mode"
         (lambda ()
           (interactive)
           (switch-to-buffer "*org*scratchpad.org")))
        ("T" "Text"
         (lambda ()
           (interactive)
           (switch-to-buffer "*text*scratchpad.txt")))
        ("m" "Markdown"
         (lambda ()
           (interactive)
           (switch-to-buffer "*markdown*scratchpad.md")))]])
     (thao/transient-emacs-launcher ()
       "Launch emacs package"
       ["Launch emacs packaged"
        ["Apps"
         ("i" "Circe - IRC" circe)
         ("I" "Circe - IRC (connect all)" circe-connect-all)
         ("e" "Elfeed - RSS/Atom Newsreader" elfeed-summary)
         ;; ("t" "Transmission - Torrent" transmission)
         ("g" "Gnus - Mail/Newsreader" gnus-other-frame)
         ("m" "Mastodon.el - Mastodon" mastodon)
         ("p" "proced" proced)]
        ["Utils"
         ("c" "calc - Quick calc" quick-calc)
         ;; ("d" "docker" docker)
         ("C" "calendar" calendar)
         ("T" "time - Display world time" world-clock)
         ;; ("s" "Systemctl" thao/transient-systemctl)
         ("j" "Journalctl" journalctl)]
        ["Misc"
         ("t" "Vterm" multi-vterm)
         ;; ("b" "Brain.fm - Stream music" brain-fm-play)
         ("E" "elisp-index-search" elisp-index-search)
         ;; ("S" "Screenshot with scrot" scrot)
         ("w" "woman - Man page viewer" man)]])
     :config
     ;; Display transient buffer below current window
     ;; and not bottom of the complete frame (minibuffer like)
     ;; Keep stock setting to avoid:
     ;; https://github.com/magit/transient/issues/338
     ;; (setopt transient-display-buffer-action
     ;;        '(display-buffer-below-selected))
     )
   #+end_src

** Imenu-List
   :PROPERTIES:
   :CREATED:  [2024-12-06 Fri 02:33]
   :END:
   #+begin_src emacs-lisp
   (use-package imenu-list
     :after imenu
     :config
     :bind
     ("C-," . imenu-list))
   #+end_src

* Editor

** Move-Text
   Move current line or region with M-up or M-down.
   #+begin_src emacs-lisp
   (use-package move-text
     :bind (([(control shift up)]   . move-text-up)
	    ([(control shift down)] . move-text-down)
	    ([(meta shift up)]      . move-text-up)
	    ([(meta shift down)]    . move-text-down)))
   #+end_src

** Grep (wgrep/rg/ag)
   :PROPERTIES:
   :CREATED:  [2024-06-24 Mon 00:57]
   :END:
   #+begin_src emacs-lisp
   (use-package wgrep
     :bind (:map grep-mode-map
                 ("C-x C-q" . wgrep-change-to-wgrep-mode))
     :config
     (setopt wgrep-auto-save-buffer t))

   (use-package wgrep-ag
     :after wgrep)
   #+end_src

** Editorconfig
   Installing editorconfig-core-c is not a hard requirement but recommended.
   #+begin_src emacs-lisp
   (use-package editorconfig
     :config
     (editorconfig-mode 1))
   #+end_src

** Vim-Modeline: Support VIM-Modeline in Emacs
   #+begin_src emacs-lisp
   (use-package vim-modeline
     :hook (find-file . vim-modeline/do))
   #+end_src
** With-Editor: Use local Emacs instance as $EDITOR (e.g. in `git commitâ or `crontab -eâ)
   #+begin_src emacs-lisp
   (use-package with-editor
     ;; Use local Emacs instance as $EDITOR (e.g. in `git commit' or `crontab -e')
     :hook (((shell-mode eshell-mode vterm-mode term-exec) .
             with-editor-export-editor)
            ;; Close frame opened when visiting buffer opened by with-editor
            ((with-editor-post-finish with-editor-post-cancel) . delete-frame)))
   #+end_src

** White space butler
   #+begin_src emacs-lisp
   (use-package ws-butler
     :hook ((text-mode prog-mode) . ws-butler-mode)
     :config (setopt ws-butler-keep-whitespace-before-point nil))
   #+end_src
   
** Rainbow-Delimiters: Different color for each parenthesis level

   #+begin_src emacs-lisp
   (use-package rainbow-delimiters
     :hook ((emacs-lisp-mode
	     lisp-mode hy-mode
	     clojure-mode
	     cider-repl-mode
	     sql-mode) . rainbow-delimiters-mode))
   #+end_src

** crux: Various small useful utility functions
   :PROPERTIES:
   :CREATED:  [2024-06-24 Mon 00:41]
   :END:
   #+begin_src emacs-lisp
   (use-package crux
     :bind (("C-c U" . crux-view-url)
            ("C-c f c" . write-file)
            ("C-c f r" . rename-visited-file)
            ("C-c f d" . crux-delete-file-and-buffer)
            ;;("s-k"   . crux-kill-whole-line)
            ;;("s-o"   . crux-smart-open-line-above)
            ("C-a"   . crux-move-beginning-of-line)
            ([(shift return)] . crux-smart-open-line)
            ([(control shift return)] . crux-smart-open-line-above)))
   #+end_src

** Subword: CamelCase aware editing operations

#+begin_src emacs-lisp
(use-package subword
  :hook ((python-mode python-ts-mode yaml-mode conf-mode go-mode clojure-mode cider-repl-mode
                      java-mode cds-mode js-mode c++-mode c++-ts-mode qml-mode
                      java-ts-mode js-ts-mode) . subword-mode))
#+end_src

** Electric-Pair-mode
   #+begin_src emacs-lisp
   (use-package elec-pair
     :init
     (electric-pair-mode 1))
   #+end_src

** Smart-region: Smart region selection
Smart region guesses what you want to select by one command:
- If you call this command multiple times at the same position, it expands the selected region (with `er/expand-regionâ).
- Else, if you move from the mark and call this command, it selects the region rectangular (with `rectangle-mark-modeâ).
- Else, if you move from the mark and call this command at the same column as mark, it adds a cursor to each line (with `mc/edit-linesâ).

  #+begin_src emacs-lisp
  (use-package expand-region
    :defer t)

  (use-package smart-region
    ;; C-SPC is smart-region
    :bind (([remap set-mark-command] . smart-region)))
  #+end_src


** Selected: One key keybindings for regions when selection active
   #+begin_src emacs-lisp
   (use-package selected
     :hook ((text-mode prog-mode) . selected-minor-mode)
     :init (defvar selected-org-mode-map (make-sparse-keymap))
     :bind (:map selected-keymap
		 ("q" . selected-off)
		 ("u" . upcase-region)
		 ("d" . downcase-region)
		 ("w" . count-words-region)
		 ("m" . apply-macro-to-region-lines)
		 ;; multiple cursors
		 ("v" . mc/vertical-align-with-space)
		 ("a" . mc/mark-all-dwim)
		 ("A" . mc/mark-all-like-this)
		 ("m" . mc/mark-more-like-this-extended)
		 ("p" . mc/mark-previous-like-this)
		 ("P" . mc/unmark-previous-like-this)
		 ("S" . mc/skip-to-previous-like-this)
		 ("n" . mc/mark-next-like-this)
		 ("N" . mc/unmark-next-like-this)
		 ("s" . mc/skip-to-next-like-this)
		 ("r" . mc/edit-lines)
		 :map selected-org-mode-map
		 ("t" . org-table-convert-region)))
   #+end_src

** Multiple-cursors
   #+begin_src emacs-lisp
   (use-package multiple-cursors
     :bind (("C-c m" . mc/mark-all-dwim)
	    ("C->" . mc/mark-next-like-this)
	    ("C-<" . mc/mark-previous-like-this)
	    :map mc/keymap
	    ("C-x v" . mc/vertical-align-with-space)
	    ("C-x n" . mc-hide-unmatched-lines-mode))
     :config
     (global-unset-key (kbd "M-<down-mouse-1>"))
     (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)

     (with-eval-after-load 'multiple-cursors-core
       ;; Immediately load mc list, otherwise it will show as
       ;; changed as empty in my git repo
       (mc/load-lists)

       (define-key mc/keymap (kbd "M-T") 'mc/reverse-regions)
       (define-key mc/keymap (kbd "C-,") 'mc/unmark-next-like-this)
       (define-key mc/keymap (kbd "C-.") 'mc/skip-to-next-like-this)))
   #+end_src

** Smartrep: Repeat previous command without prefix key
   #+begin_src emacs-lisp
   (use-package operate-on-number
     :defer t)
   (use-package smartrep
     :defer 5
     :config
     (smartrep-define-key global-map "C-x"
			  '(("{" . shrink-window-horizontally)
			    ("}" . enlarge-window-horizontally)
			    ("^" . enlarge-window)
			    ("%" . shrink-window)))

     (smartrep-define-key global-map "C-c ."
			  '(("+" . apply-operation-to-number-at-point)
			    ("-" . apply-operation-to-number-at-point)
			    ("*" . apply-operation-to-number-at-point)
			    ("/" . apply-operation-to-number-at-point)
			    ("\\" . apply-operation-to-number-at-point)
			    ("^" . apply-operation-to-number-at-point)
			    ("<" . apply-operation-to-number-at-point)
			    (">" . apply-operation-to-number-at-point)
			    ("#" . apply-operation-to-number-at-point)
			    ("%" . apply-operation-to-number-at-point)
			    ("'" . operate-on-number-at-point))))
   #+end_src

** copy-as-format: Copy text as GitHub/Slack/JIRA/HipChat/â¦ formatted code
   #+begin_src emacs-lisp
   (use-package copy-as-format
     :bind (:map mode-specific-map
		 :prefix-map copy-as-format-prefix-map
		 :prefix "w"
		 ("w" . copy-as-format)
		 ("g" . copy-as-format-github)
		 ("t" . copy-as-format-markdown-table)
		 ("h" . copy-as-format-hipchat-pidgin)
		 ("j" . copy-as-format-jira)
		 ("m" . copy-as-format-markdown)
		 ("o" . copy-as-format-org-mode)
		 ("r" . copy-as-format-rst)
		 ("s" . copy-as-format-slack)
		 ("v" . org-copy-visible))
     :config
     ;; (setopt copy-as-format-default "slack")
     ;; Define own format since pidgin doesn't allow to begin a message with `/code'
     ;; FIXME: Bitlbee?
     (defun copy-as-format--hipchat-pidgin (text _multiline)
       (format "/say /code %s" text))
     (add-to-list 'copy-as-format-format-alist '("hipchat-pidgin" copy-as-format--hipchat-pidgin))
     (defun copy-as-format-hipchat-pidgin ()
       (interactive)
       (setq copy-as-format-default "hipchat-pidgin")
       (copy-as-format))

     (defun copy-as-format--markdown-table (text _multiline)
       (s-replace "--+--" "--|--" text))
     (add-to-list 'copy-as-format-format-alist '("markdown-table" copy-as-format--markdown-table))
     (defun copy-as-format-hipchat-pidgin ()
       (interactive)
       (setq copy-as-format-default "markdown-table")
       (copy-as-format)))
   #+end_src

** zop-to-char: Remove multiple characters at once
   #+begin_src emacs-lisp
   ;; Replace zap-to-char functionaity with the more powerful zop-to-char
   (use-package zop-to-char
     :bind (("M-z" . zop-up-to-char)
	    ("M-Z" . zop-to-char)))
   #+end_src

** Outline-mode and related
   :PROPERTIES:
   :CREATED:  [2024-12-05 Thu 22:53]
   :END:

*** Outline-Mode: a for editing in outline-format
    :PROPERTIES:
    :CREATED:  [2024-12-05 Thu 22:54]
    :END:
    #+begin_src emacs-lisp
    (use-package outline
      :hook ((prog-mode message-mode markdown-mode) . outline-minor-mode)
      :config
      (setopt outline-minor-mode-cycle t)
      (setopt outline-minor-mode-highlight nil))
    #+end_src

*** Bicycle: Cycle outline and code visibility
    :PROPERTIES:
    :CREATED:  [2024-12-05 Thu 22:00]
    :END:
    #+begin_src emacs-lisp
    ;; Minor mode to selectively hide/show code and comment blocks
    (use-package bicycle
      :after outline
      :bind (:map outline-minor-mode-map
                  ([C-tab] . bicycle-cycle)
                  ([S-tab] . bicycle-cycle-global)))
    #+END_src

*** Outline-Minor-Faces: Highlight only section headings
    :PROPERTIES:
    :CREATED:  [2024-12-05 Thu 22:00]
    :END:
    #+BEGIN_src emacs-lisp 
    (use-package outline-minor-faces
      ;; I don't know why it breaks non lisp modes but disabling
      ;; is the best fix at the moment.
      :disabled t
      :hook (outline-minor-mode . outline-minor-faces-mode))
    #+end_src

*** Backline: Preserve appearance of collapsed outline headings until right window edge 
    :PROPERTIES:
    :CREATED:  [2024-12-05 Thu 22:00]
    :END:
    #+begin_src emacs-lisp
    (use-package backline
      :after outline
      :config (advice-add 'outline-flag-region :after 'backline-update))
    #+end_src

** edit-indirect: Edit a region in a separate buffer
   #+begin_src emacs-lisp
   (use-package edit-indirect
     :bind (("C-c '" . edit-indirect-dwim)
	    :map edit-indirect-mode-map
	    ("C-x n" . edit-indirect-commit))
     :config
     (defvar edit-indirect-string nil)
     (put 'edit-indirect-string 'end-op
	  (lambda ()
	    (while (nth 3 (syntax-ppss))
	      (forward-char))
	    (backward-char)))
     (put 'edit-indirect-string 'beginning-op
	  (lambda ()
	    (let ((forward (nth 3 (syntax-ppss))))
	      (while (nth 3 (syntax-ppss))
		(backward-char))
	      (when forward
		(forward-char)))))

     (defun edit-indirect-dwim (beg end &optional display-buffer)
       "DWIM version of edit-indirect-region.
   When region is selected, behave like `edit-indirect-region'
   but when no region is selected and the cursor is in a 'string' syntax
   mark the string and call `edit-indirect-region' with it."
       (interactive
	(if (or (use-region-p) (not transient-mark-mode))
	    (prog1 (list (region-beginning) (region-end) t)
	      (deactivate-mark))
	  (if (nth 3 (syntax-ppss))
	      (list (beginning-of-thing 'edit-indirect-string)
		    (end-of-thing 'edit-indirect-string)
		    t)
	    (user-error "No region marked and not inside a string."))))
       (edit-indirect-region beg end display-buffer))

     (defvar edit-indirect-guess-mode-history nil)
     (defun edit-indirect-guess-mode-fn (_buffer _beg _end)
       (let* ((lang (completing-read "Mode: "
				     '("gfm" "rst"
				       "emacs-lisp" "clojure" "python" "sql"
				       "typescript" "js2" "web" "scss")
				     nil nil nil 'edit-indirect-guess-mode-history))
	      (mode-str (concat lang "-mode"))
	      (mode (intern mode-str)))
	 (unless (functionp mode)
	   (error "Invalid mode `%s'" mode-str))
	 (funcall mode)))
     (setopt edit-indirect-guess-mode-function #'edit-indirect-guess-mode-fn))
   #+end_src

** Company
*** Company: Auto completion
    #+begin_src emacs-lisp
    (use-package company
      :demand t
      :bind (:map company-active-map
                  ([return] . nil)
                  ("RET" . nil)

                  ("TAB" . company-complete-selection)
                  ([tab] . company-complete-selection)
                  ;; ("S-TAB" . company-select-previous)
                  ;; ([backtab] . company-select-previous)
                  ("C-j" . company-complete-selection))
      :config
      (setopt company-idle-delay 0.1)
      (setopt company-tooltip-limit 10)
      (setopt company-minimum-prefix-length 1)
      ;; Don't display icons
      (setopt company-format-margin-function nil)
      ;; Aligns annotation to the right hand side
      (setopt company-tooltip-align-annotations t)
      (setopt company-dabbrev-downcase nil)

      ;; invert the navigation direction if the the completion popup-isearch-match
      ;; is displayed on top (happens near the bottom of windows)
      (setopt company-tooltip-flip-when-above t)
      ;; start autocompletion only after typing
      (setopt company-begin-commands '(self-insert-command
                                     org-self-insert-command
                                     orgtbl-self-insert-command))
      (global-company-mode 1)

      (use-package company-emoji
        :disabled t
        :config (add-to-list 'company-backends 'company-emoji))

      (use-package company-quickhelp
        :disabled t
        :config (company-quickhelp-mode 1))

      ;; Add yasnippet support for all company backends
      (defvar company-mode/enable-yas t
        "Enable yasnippet for all backends.")
      (defun company-mode/backend-with-yas (backend)
        (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
            backend
          (append (if (consp backend) backend (list backend))
                  '(:with company-yasnippet))))
      (setopt company-backends (mapcar #'company-mode/backend-with-yas company-backends)))
    #+end_src

*** Company-tng
    company-tng (tab and go) allows you to use TAB to both select a completion candidate from the list and to insert it into the buffer.

    It cycles the candidates like `yank-popâ or `dabbrev-expandâ or Vim: Pressing TAB selects the first item in the completion menu and inserts it in the buffer.
    Pressing TAB again selects the second item and replaces the inserted item with the second one.
    This can continue as long as the user wishes to cycle through the menu.

    #+begin_src emacs-lisp
    (use-package company-tng
      :disabled t
      :after company
      :bind (:map company-active-map
		  ([return] . nil)
		  ("RET" . nil)
		  ("TAB" . company-select-next)
		  ([tab] . company-select-next)
		  ("S-TAB" . company-select-previous)
		  ([backtab] . company-select-previous)
		  ("C-j" . company-complete-selection))
      :config
      (company-tng-mode))
    #+end_src
*** Company-Shell
    #+begin_src emacs-lisp
    (use-package company-shell
      :hook ((sh-mode shell-mode) . sh-mode-init)
      :config
      (defun sh-mode-init ()
	(setq-local company-backends '((company-shell
					company-shell-env
					company-files
					company-dabbrev-code
					company-capf
					company-yasnippet)))))
    #+end_src

* Search and replace
  :PROPERTIES:
  :CREATED:  [2024-06-24 Mon 01:06]
  :END:

** Re-builder
   :PROPERTIES:
   :CREATED:  [2024-06-24 Mon 01:08]
   :END:
   #+begin_src emacs-lisp
   ;; You can change syntax in regex-builder with "C-c TAB"
   ;; "read" is 'code' syntax
   ;; "string" is already read and no extra escaping. Like what Emacs prompts interactively
   (use-package re-builder
     :defer t
     :config (setopt reb-re-syntax 'string))
   #+end_src

** Visual-regex:
   :PROPERTIES:
   :CREATED:  [2024-06-24 Mon 01:06]
   :END:
   #+begin_src emacs-lisp
   (use-package visual-regexp
     :bind (:map mode-specific-map
                 :prefix-map visual-regexp-prefix-map
                 :prefix "r"
                 ("r" . vr/query-replace)
                 ("R" . vr/replace)
                 ("m" . vr/mc-mark)
                 ("s" . query-replace)))

   (use-package visual-regexp-steroids
     :after visual-regexp)
   #+end_src

* Spellchecking

** Ispell
   :PROPERTIES:
   :CREATED:  [2023-09-29 Fri 18:41]
   :END:
   First Ispell and Flyspell:
   #+begin_src emacs-lisp
   (use-package ispell
     :disabled t
     :config
     (setopt ispell-program-name "hunspell"))
   #+end_src

** Flyspell
   :PROPERTIES:
   :CREATED:  [2023-09-29 Fri 18:41]
   :END:
   #+begin_src emacs-lisp
   (use-package flyspell
     :disabled t
     :config
     :hook ((prog-mode . flyspell-prog-mode)
            ((org-mode
              mu4e-compose-mode
              markdown-mode rst-mode
              text-mode
              change-log-mode
              log-edit
              lui-mode) . flyspell-mode))
     )
   #+end_src

** Guess-Language
   :PROPERTIES:
   :CREATED:  [2023-09-29 Fri 18:41]
   :END:
   Now guess-language.
   #+begin_src emacs-lisp
   (use-package guess-language
     :disabled t
     :after flyspell
     ;; Only guess language for emails
     :hook ((text-mode org-mode lui-mode message-mode ) . guess-language-mode)
     :config
     (setopt guess-language-langcodes '((en . ("en_US" "English" "ðºð¸" "English"))
                                      (de . ("de_DE" "German" "ð©ðª" "German"))))
     (setopt guess-language-languages '(en de))
     (setopt guess-language-min-paragraph-length 35))
   #+end_src

** Jinx
   :PROPERTIES:
   :CREATED:  [2023-09-29 Fri 19:19]
   :END:
   #+begin_src emacs-lisp
   (use-package jinx
     :bind ([remap ispell-word] . jinx-correct)
     :hook (((prog-mode
              org-mode
              mu4e-compose-mode
              markdown-mode rst-mode
              text-mode
              change-log-mode
              log-edit
              lui-mode) . jinx-mode))
     :config
     (setopt jinx-languages "en_US de_DE fi_Fi")
     (defun jinx--read-only-p (start)
     (get-text-property start 'read-only))
     (add-to-list 'jinx--predicates #'jinx--read-only-p))
   #+end_src

* Project Management

** Projectile
   #+begin_src emacs-lisp
   (use-package projectile
     :defer nil
     :after helm
     :bind-keymap
     ;;(("s-p p"   . projectile-command-map)
     ("C-x p" . projectile-command-map)
     :bind (
            :map projectile-command-map
            ("SPC"  . consult-project-extra-find))
     ;;("s s" . consult-ripgrep))
     :init
     ;; Allow all file-local values for project root
     (put 'projectile-project-root 'safe-local-variable 'stringp)
     ;; Don't show "Projectile" as liter when not in a project
     (setq-default projectile-mode-line-prefix "")
     :config
     (require 'projectile)
     (setopt projectile-other-file-alist
             (cl-union projectile-other-file-alist
                       '(("py" "sql" "py")
                         ("sql" "py")
                         ;; rpm spec <-> rpm changes file
                         ("spec" "changes"))))

     ;; Register a java project type that uses gradle and has src and test dirs set
     (projectile-register-project-type 'java '("gradlew")
                                       :compile "./gradlew build"
                                       :test "./gradlew test"
                                       :test-suffix "Test"
                                       :src-dir "src/main"
                                       :test-dir "src/test/")

     (projectile-register-project-type 'mb2 '(".mb2")
                                       :project-file ".mb2"
                                       :compile "mb2 build -p"
                                       :test "mb2 package")
     (defun thao/cmake-configure ()
       (concat (projectile--cmake-configure-command)
               " -DCMAKE_EXPORT_COMPILE_COMMANDS=YES"))

     (projectile-update-project-type
      'cmake
      :configure #'thao/cmake-configure)


     ;; Shorten the mode line to only "P" and do not include the project type
     ;;(defun projectile-short-mode-line ()
       "Short version of the default projectile mode line."
       ;;(format " P[%s]" (projectile-project-name)))
     ;;(setopt projectile-mode-line-function 'projectile-short-mode-line)

     ;; https://sideshowcoder.com/2017/10/24/projectile-and-tramp/
     ;; (defadvice projectile-on (around exlude-tramp activate)
     ;;   "This should disable projectile when visiting a remote file"
     ;;   (unless  (--any? (and it (file-remote-p it))
     ;;                    (list
     ;;                     (buffer-file-name)
     ;;                     list-buffers-directory
     ;;                     default-directory
     ;;                     dired-directory))
     ;;     ad-do-it))

     ;; (counsel-projectile-mode)


     ;; Insert private projectile configuration here
     ;; E.g. to set projectile-project-search-path
     <<projectile_private>>

     ;; cache projectile project files
     ;; projectile-find-files will be much faster for large projects.
     ;; C-u C-c p f to clear cache before search.
     (setopt projectile-enable-caching t)

     ;; Enable CMake preset support
     (setopt projectile-enable-cmake-presets t)

     (setopt projectile-per-project-compilation-buffer t)

     ;; Call magit instead of the default projectile-find-file
     (setopt projectile-switch-project-action 'projectile-vc)

     ;; Use git-grep for git projects
     (setopt projectile-use-git-grep t)

     (projectile-mode))
   #+end_src

** Treemacs: A tree layout file explorer
   #+begin_src emacs-lisp
   (use-package treemacs
     :bind (([f8]        . treemacs-toggle-or-select)
            :map treemacs-mode-map
            ("C-t a" . treemacs-add-project-to-workspace)
            ("C-t d" . treemacs-remove-project)
            ("C-t r" . treemacs-rename-project)
            ;; If we only hide the treemacs buffer (default binding) then, when we switch
            ;; a frame to a different project and toggle treemacs again we still get the old project
            ("q" . treemacs-kill-buffer))
     :config
     (defun treemacs-toggle-or-select (&optional arg)
       "Initialize or toggle treemacs.
   - If the treemacs window is visible and selected, hide it.
   - If the treemacs window is visible select it.
   - If a treemacs buffer exists, but is not visible show it.
   - If no treemacs buffer exists for the current frame create and show it.
   - If the workspace is empty additionally ask for the root path of the first
     project to add.

   With one `C-u' prefix argument, display current project exclusively.
   With two `C-u' `C-u' prefix args, add and display current project."
       (interactive "p")
       (cond ((or (not arg) (eq arg 1))
              (pcase (treemacs-current-visibility)
                ('visible (if (string-prefix-p treemacs--buffer-name-prefix (buffer-name))
                              (delete-window (treemacs-get-local-window))
                            (treemacs--select-visible-window)))
                ('exists  (treemacs-select-window))
                ('none    (treemacs--init))))
             ((eq arg 4) (treemacs-add-and-display-current-project-exclusively))
             ((eq arg 16) (treemacs-add-and-display-current-project))))

     (defun treemacs-ignore-python-files (file _)
       (or (s-ends-with-p ".pyc" file)
           (string= file "__pycache__")))
     (add-to-list 'treemacs-ignored-file-predicates 'treemacs-ignore-python-files)

     ;; Read input from minibuffer instead of childframe (which requires an extra package)
     (setopt treemacs-read-string-input 'from-minibuffer)

     (setopt treemacs-follow-after-init          t
           treemacs-indentation                1
           treemacs-width                      30
           treemacs-collapse-dirs              5
           treemacs-silent-refresh             nil
           treemacs-is-never-other-window      t)
     (treemacs-filewatch-mode t)
     (treemacs-follow-mode -1)
     (treemacs-git-mode 'simple))

   (use-package treemacs-projectile
     :after (treemacs)
     :bind (:map treemacs-mode-map
                 ("C-p p" . nil)
                 ("C-p" . nil)  ; I often still type C-p for UP
                 ("C-t p" . treemacs-projectile))
     :config (setopt treemacs-header-function #'treemacs-projectile-create-header))

   ;; Use magit hooks to notify treemacs of git changes
   (use-package treemacs-magit
     :after treemacs)

   ;; Enable all the icons in treemacs
   (use-package treemacs-nerd-icons
     :after treemacs
     :config
     (treemacs-load-theme "nerd-icons"))
   #+end_src

** Bug-Trackers: Modes related to bug- and issue trackers
   :PROPERTIES:
   :CREATED:  [2024-08-20 Tue 12:07]
   :END:

*** Bug-Reference: Buttonize bug references
    :PROPERTIES:
    :CREATED:  [2024-08-20 Tue 12:14]
    :END:
 #+begin_src emacs-lisp
 ;; Highlight and link issue IDs to website
 ;; bug-reference-url-format has to be set in dir-locals (S-p E)
 ;; E.g. for github: (bug-reference-url-format . "https://github.com/atomx/api/issues/%s")
 (use-package bug-reference
   :hook (prog-mode . bug-reference-prog-mode)
   :config
   ;; (setopt bug-reference-bug-regexp "#\\(?2:[0-9]+\\)")
   (setopt bug-reference-bug-regexp "\\(\\b\\(?:[Bb]ug ?#?\\|[Ii]ssue ?#\\|[Pp]atch ?#\\|RFE ?#\\|PR [a-z+-]+/\\)\\([0-9]+\\(?:#[0-9]+\\)?\\)\\)"))
 #+end_src

*** Bug-mode: A mode to interface with bug/issue tracking systems from within Emacs
     #+begin_src emacs-lisp
     (use-package bug-mode
       :defer t
       :config
       ;;(require 'bug-mode-autoloads)
       (require 'bug-custom)
       (require 'bug-persistent-data)
       (setopt bug-default-instance :work)

       (bug--read-data-file)

       <<bug_mode_private>>)

     (use-package bug-auth
       :after bug-mode
       :commands (bug-login bug-logout))

     (use-package bug-backend-bz-rpc)

     (use-package bug-comment-mode)

     (use-package org-bug
       :after bug-mode)
     #+end_src

*** Debbugs: SOAP library to access debbugs servers
    :PROPERTIES:
    :CREATED:  [2024-08-20 Tue 12:51]
    :END:
    #+begin_src emacs-lisp
    (use-package debbugs
      :config
      (setopt debbugs-show-progress t))

    (use-package debbugs-gnu
      :commands (debbugs-gnu
                 debuggs-gnu-search)
      :config
      (setopt debbugs-gnu-trunk-directory "~/dev/emacs/emacs")

      <<debbbugs_private>>

      (setopt debbugs-gnu-apply-patch-prefers-magit t))
    #+end_src

* Shell relating things

** Eshell
   :PROPERTIES:
   :CREATED:  [2024-09-22 Sun 22:59]
   :END:

*** Base-Settings
    :PROPERTIES:
    :CREATED:  [2024-09-23 Mon 06:49]
    :END:
    #+begin_src emacs-lisp
    (use-package eshell
      :bind (("C-x m" . eshell)
             ("C-x M" . thao/eshell-split)
             :map eshell-mode-map
             ("M-P" . eshell-previous-prompt)
             ("C-d" . thao/eshell-quit-or-delete-char)
         ;;    ("C-r" . consult-history)
             ("M-N" . eshell-next-prompt)
             ("M-R" . eshell-list-history)
             ("<DEL>" . eshell-delete-backward-char)
             ([remap eshell-pcomplete] . completion-at-point)
             ;; ([remap eshell-pcomplete] . helm-esh-pcomplete)
             )
      :hook ((eshell-mode . thao/eshell-config-hook)
             (eshell-pre-command . eshell-append-history))
      :config
      (require 'esh-mode)
      ;; Always show file size in human readable format
      (setopt eshell-ls-initial-args "-h")

      ;; Config for xterm-color
      (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
      (setopt eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
      (setenv "TERM" "xterm-256color")

      (defun thao/eshell-split (&optional arg)
        "Like eshell but use pop-to-buffer to display."
        (interactive "P")
        (let ((cur-buf (buffer-name))
              (eshell-buf (eshell arg)))
          (pop-to-buffer-same-window cur-buf)
          (pop-to-buffer eshell-buf)))

      ;; Don't print the welcome banner and
      ;; use native 'sudo', system sudo asks for password every time.
      (require 'em-tramp)
      (setopt eshell-modules-list
            '(eshell-alias
              eshell-basic
              eshell-cmpl
              eshell-dirs
              eshell-glob
              eshell-hist
              eshell-ls
              eshell-pred
              eshell-prompt
              eshell-script
              eshell-term
              eshell-tramp
              eshell-unix))

      (require 'em-smart)
      (setq-default eshell-where-to-jump 'begin)
      (setq-default eshell-review-quick-commands nil)
      (setq-default eshell-smart-space-goes-to-end t)

      (require 'em-hist)
      ;; Some ideas from https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org
      (setq-default eshell-scroll-to-bottom-on-input 'all
                    eshell-error-if-no-glob t
                    eshell-hist-ignoredups t
                    eshell-visual-commands '("ptpython" "ipython" "pshell" "tail" "vi" "vim" "watch"
                                             "nmtui" "dstat" "mycli" "pgcli" "vue" "ngrok"
                                             "castnow" "mitmproxy" "rmapi"
                                             "tmux" "screen" "top" "htop" "less" "more" "ncftp")
                    eshell-prefer-lisp-functions nil)

      ;; Fix eshell overwriting history.
      ;; From https://emacs.stackexchange.com/a/18569/15023.
      (setopt eshell-save-history-on-exit nil)
      (defun eshell-append-history ()
        "Call `eshell-write-history' with the `append' parameter set to `t'."
        (when eshell-history-ring
          (let ((newest-cmd-ring (make-ring 1)))
            (ring-insert newest-cmd-ring (car (ring-elements eshell-history-ring)))
            (let ((eshell-history-ring newest-cmd-ring))
              (eshell-write-history eshell-history-file-name t)))))

      ;; Increase eshell history size from default of only 128
      (setopt eshell-history-size 8192)

      ;; Used to C-d exiting from a shell? Want it to keep working, but still allow deleting a character?
      ;; We can have it both
      (require 'em-prompt)
      (defun thao/eshell-quit-or-delete-char (arg)
        (interactive "p")
        ;; Somehow eshell-finge-status-mode adds an additional (not visible?)
        ;; character to eol since Emacs 30.
        ;; Just quit eshell if point is at the last or last but one position.
        (if (and (>= (point) (1- (point-max)))
                 (looking-back eshell-prompt-regexp nil))
            (progn
              (eshell-life-is-too-much) ; Why not? (eshell/exit)
              (ignore-errors
                (when (= arg 4)  ; With prefix argument, also remove eshell frame/window
                  (progn
                    ;; Remove frame if eshell is only window (otherwise just close window)
                    (if (one-window-p)
                        (delete-frame)
                      (delete-window))))))
          (delete-char arg)))

      (defun eshell-delete-backward-char (n)
        "Only call `(delete-backward-char N)' when not at beginning of prompt."
        (interactive "p")
        (if (looking-back eshell-prompt-regexp nil)
            (message "Beginning of prompt")
          (delete-char (- n))))

      ;; Fixme eshell-mode-map maps to global keybindings? Check "C-d"
      ;; Issue: https://github.com/jwiegley/use-package/issues/332
      (defun thao/eshell-config-hook ()
        ;; Support imenu
        (setq-local imenu-generic-expression `(("Prompt" ,eshell-prompt-regexp 1)))
        ;; Support outline (e.g. consult-outline)
        (setq-local outline-regexp eshell-prompt-regexp)

        ;;(eshell-smart-initialize)
        ;; Emacs bug where * gets removed
        ;; See https://github.com/company-mode/company-mode/issues/218
        ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=18951
        ;;(require 'company)
        ;;(setq-local company-idle-delay 0.1)
        ;;(setq-local company-backends '(company-capf company-eshell-autosuggest))
        ;; (setq-local company-backends '(company-capf))
        ;; (setq-local company-frontends '(company-preview-frontend))

        ;; Disable overwriting the history on eshell exit
        ;; See eshell-append-history above
        (remove-hook 'eshell-exit-hook #'eshell-write-history t)

        (setq xterm-color-preserve-properties t)

        (setq-local company-backends '((company-eshell-history
                                        company-shell
                                        company-shell-env
                                        company-files
                                        company-dabbrev-code
                                        company-capf
                                        company-yasnippet)))
        )

      ;; Functions starting with `eshell/' can be called directly from eshell
      ;; with only the last part. E.g. (eshell/foo) will call `$ foo'
      (defun eshell/d (&optional dir)
        "Open dired in current directory."
        (dired (or dir ".")))

      (defun eshell/ccat (file)
        "Like `cat' but output with Emacs syntax highlighting."
        (with-temp-buffer
          (insert-file-contents file)
          (let ((buffer-file-name file))
            (delay-mode-hooks
              (set-auto-mode)
              (if (fboundp 'font-lock-ensure)
                  (font-lock-ensure)
                (with-no-warnings
                  (font-lock-fontify-buffer)))))
          (buffer-string)))

      (defun eshell/lcd (&optional directory)
        "Like regular 'cd' but don't jump out of a tramp directory.
    When on a remote directory with tramp don't jump 'out' of the server.
    So if we're connected with sudo to 'remotehost'
    '$ lcd /etc' would go to '/sudo:remotehost:/etc' instead of just
    '/etc' on localhost."
        (setq directory (or directory "~/"))
        (unless (file-remote-p directory)
          (setq directory (concat (file-remote-p default-directory) directory)))
        (eshell/cd directory))

      (defun eshell/gst (&rest args)
        (magit-status-setup-buffer (or (pop args) default-directory))
        (eshell/echo))   ;; The echo command suppresses output

      (defun eshell/f (filename &optional dir try-count)
        "Searches for files matching FILENAME in either DIR or the
    current directory. Just a typical wrapper around the standard
    `find' executable.

    Since any wildcards in FILENAME need to be escaped,
    this wraps the shell command.

    If not results were found, it calls the `find' executable up to
    two more times, wrapping the FILENAME pattern in wildcard
    matches. This seems to be more helpful to me."
        (let* ((cmd (concat
                     (executable-find "find")
                     " " (or dir ".")
                     "      -not -path '*/.git*'"
                     " -and -not -path '*node_modules*'"
                     " -and -not -path '*classes*'"
                     " -and "
                     " -type f -and "
                     "-iname '" filename "'"))
               (results (shell-command-to-string cmd)))

          (if (not (s-blank-str? results))
              results
            (cond
             ((or (null try-count) (= 0 try-count))
              (eshell/f (concat filename "*") dir 1))
             ((or (null try-count) (= 1 try-count))
              (eshell/f (concat "*" filename) dir 2))
             (t "")))))

      (defun eshell/ef (filename &optional dir)
        "Searches for the first matching filename and loads it into a
    file to edit."
        (let* ((files (eshell/f filename dir))
               (file (car (s-split "\n" files))))
          (find-file file)))

      (defun eshell/find (&rest args)
        "Wrapper around the âfindâ executable."
        (let ((cmd (concat "find " (string-join args " "))))
          (shell-command-to-string cmd)))

      (defun execute-command-on-file-buffer (cmd)
        "Execute command on current buffer file."
        (interactive "sCommand to execute: ")
        (let* ((file-name (buffer-file-name))
               (full-cmd (concat cmd " " file-name)))
          (shell-command full-cmd)))

      (defun execute-command-on-file-directory (cmd)
        "Execute command on current buffer directory."
        (interactive "sCommand to execute: ")
        (let* ((dir-name (file-name-directory (buffer-file-name)))
               (full-cmd (concat "cd " dir-name "; " cmd)))
          (shell-command full-cmd))))

    (use-package eshell-bookmark
      :hook (eshell-mode . eshell-bookmark-setup)
      :after eshell)
    #+end_src

*** Company Eshell-Completition-backend
    :PROPERTIES:
    :CREATED:  [2024-09-23 Mon 07:06]
    :END:
    #+begin_src emacs-lisp
    (defun company-eshell-history (command &optional arg &rest ignored)
      (interactive (list 'interactive))
      (cl-case command
        (interactive (company-begin-backend 'company-eshell-history))
        (prefix (and (eq major-mode 'eshell-mode)
                     (let ((word (company-grab-word)))
                       (save-excursion
                         (beginning-of-line)
                         (and (looking-at-p (s-concat word "$")) word)))))
        (candidates (cl-remove-duplicates
                     (->> (ring-elements eshell-history-ring)
                          (cl-remove-if-not (lambda (item) (s-prefix-p arg item)))
                          (mapcar 's-trim))
                     :test 'string=))
        (sorted t)))

    #+end_src

*** Aweshell: Awesome shell extension base on eshell with wonderful features!
    :PROPERTIES:
    :CREATED:  [2024-09-23 Mon 07:20]
    :END:
    #+begin_src emacs-lisp
    (use-package aweshell
      :after eshell
      :config
      ;; Synchronal buffer name by directory change.
      (defun aweshell-sync-dir-buffer-name ()
        "Change aweshell buffer name by directory change."
        (when (equal major-mode 'eshell-mode)
          (rename-buffer (format "*Eshell: [%s*]%%" (epe-fish-path default-directory))
                         t)))

      (remove-hook 'eshell-directory-change-hook #'aweshell-sync-dir-buffer-name)
      (remove-hook 'eshell-mode-hook #'aweshell-sync-dir-buffer-name)

      ;; Synchronal buffer name by directory change.
      (defun thao/aweshell-sync-dir-buffer-name ()
        "Change aweshell buffer name by directory change."
        (when (derived-mode-p 'eshell-mode)
          (rename-buffer (format "*Eshell: [%s*]%%" (epe-fish-path default-directory))
                         t)))

      (add-hook 'eshell-directory-change-hook #'thao/aweshell-sync-dir-buffer-name)
      (add-hook 'eshell-mode-hook #'thao/aweshell-sync-dir-buffer-name)

      (defun thao/aweshell-dedicated-pop-window ()
        "Pop aweshell dedicated window if it exists.
    Modified to not use a side-window"
        (setq aweshell-dedicated-window (display-buffer (car (aweshell-get-buffer-names)) `(display-buffer)))
        (select-window aweshell-dedicated-window)
        (set-window-buffer aweshell-dedicated-window aweshell-dedicated-buffer)
        (set-window-dedicated-p (selected-window) t))
      (advice-add 'aweshell-dedicated-pop-window :override #'thao/aweshell-dedicated-pop-window)

      (setopt aweshell-search-history-key "C-r"))
    #+end_src

*** Prompt: Display extra information for your eshell prompt
    :PROPERTIES:
    :CREATED:  [2024-09-23 Mon 06:49]
    :END:
    #+begin_src emacs-lisp
    (use-package eshell-prompt-extras
      :config
      (defun thao/epe-theme-pipeline ()
        "A eshell-prompt theme with full path, smiliar to oh-my-zsh theme.
    Modified to not contain Î»"
        (setq eshell-prompt-regexp "^[^#\n]* [#]* ")
        (concat
         (if (epe-remote-p)
             (progn
    	       (concat
    	        (epe-colorize-with-face "ââ[" 'epe-pipeline-delimiter-face)
    	        (epe-colorize-with-face (epe-remote-user) 'epe-pipeline-user-face)
    	        (epe-colorize-with-face "@" 'epe-pipeline-delimiter-face)
    	        (epe-colorize-with-face (epe-remote-host) 'epe-pipeline-host-face)))
           (progn
             (concat
    	      (epe-colorize-with-face "ââ[" 'epe-pipeline-delimiter-face)
    	      (epe-colorize-with-face (user-login-name) 'epe-pipeline-user-face)
    	      (epe-colorize-with-face "@" 'epe-pipeline-delimiter-face)
    	      (epe-colorize-with-face (system-name) 'epe-pipeline-host-face))))
         (concat
          (epe-colorize-with-face "]ââ[" 'epe-pipeline-delimiter-face)
          (when epe-pipeline-show-time
            (concat
             (epe-colorize-with-face
              (format-time-string "%H:%M" (current-time)) 'epe-pipeline-time-face)
             (epe-colorize-with-face "]ââ[" 'epe-pipeline-delimiter-face)))
          (epe-colorize-with-face (epe-pwd) 'epe-dir-face)
          (epe-colorize-with-face  "]\n" 'epe-pipeline-delimiter-face)
          (epe-colorize-with-face "ââ>" 'epe-pipeline-delimiter-face))
         (when (and epe-show-python-info (bound-and-true-p venv-current-name))
           (epe-colorize-with-face (concat "(" venv-current-name ") ") 'epe-venv-face))
         (when (epe-git-p)
           (concat
            (epe-colorize-with-face ":" 'epe-dir-face)
            (epe-colorize-with-face
             (epe-git-prompt-info)
             'epe-git-face)))
         (epe-colorize-with-face " " 'epe-symbol-face)
         (epe-colorize-with-face (if (= (user-uid) 0) "#" "") 'epe-sudo-symbol-face)
         " "))

      (setopt eshell-highlight-prompt nil
              eshell-prompt-function 'thao/epe-theme-pipeline))

    #+end_src

*** Eshell-up: Quickly go to a specific parent directory in eshell
    :PROPERTIES:
    :CREATED:  [2024-09-23 Mon 06:54]
    :END:
    #+begin_src emacs-lisp
    (use-package eshell-up
      :after eshell)
    #+end_src

*** Z: cd to frequent directory
    :PROPERTIES:
    :CREATED:  [2024-09-23 Mon 06:52]
    :END:
    #+begin_src emacs-lisp
    (use-package eshell-z
      :after eshell)
    #+end_src

*** Eshell-Vterm: Vterm for visual commands in eshell
    :PROPERTIES:
    :CREATED:  [2024-09-22 Sun 23:05]
    :END:
    #+begin_src emacs-lisp
    (use-package eshell-vterm
      :after eshell
      :config
      (eshell-vterm-mode))
    #+end_src

** Tramp
   #+begin_src emacs-lisp
   (use-package tramp
     :defer t
     :config
     (setopt tramp-default-method "ssh")

     ;; Only for debugging slow tramp connections
     ;; (setopt tramp-verbose 3)

     ;; Skip version control for tramp files
     (setopt vc-ignore-dir-regexp
             (format "\\(%s\\)\\|\\(%s\\)"
                     vc-ignore-dir-regexp
                     tramp-file-name-regexp))

     ;; Use ControlPath from .ssh/config
     ;;(setopt tramp-ssh-controlmaster-options nil)

     ;; Add tramp method for yadm
     (add-to-list  'tramp-methods
                   '("yadm"
                     (tramp-login-program "yadm")
                     (tramp-login-args (;; This is hack to pass the tramp-compute-multi-hops check member %h
                                        ;; doesn't pass if %h is inside a string next to other characters
                                        ;; The %% is escape the % character
                                        ("--yadm-dir" "$(printf \'%%s%%s%%s\\n\'" "~/.local/" "%h" "/etc/yadm)")
                                        ("--yadm-data" "~/.local/%h/share/yadm")
                                        ("--yadm-repo" "~/.local/%h/share/yadm/repo.git")
                                        ("enter")))
                     (tramp-login-env (("SHELL") ("/bin/sh")))
                     (tramp-remote-shell "/bin/sh")
                     (tramp-remote-shell-args ("-c"))))
     ;; Make it possible to default with empty %h
     (add-to-list 'tramp-default-host-alist '("yadm" nil ""))
     (add-to-list 'tramp-completion-multi-hop-methods "yadm")

     ;; Setup directory class for yadm tramp method so we don't so down magit with all the untracked and ignore files
     (dir-locals-set-class-variables 'magit-yadm
                                     '((magit-status-mode .
                                                          ((magit-disabled-section-inserters . (magit-insert-untracked-files
                                                                                                magit-insert-ignored-files))))))
     (dir-locals-set-directory-class "/yadm:private:" 'magit-yadm)
     (dir-locals-set-directory-class "/yadm::" 'magit-yadm)
     ;; Add /yadm:: to directories that are always considered as safe ([[help:safe-local-variable-directories]])
     (setq safe-local-variable-directories (cl-union
                                            safe-local-variable-directories
                                            '("/yadm::"
                                              "/yadm:private:")))

     ;; Backup tramp files like local files and don't litter the remote
     ;; file system with my emacs backup files
     (setopt tramp-backup-directory-alist backup-directory-alist)

     ;; See https://www.gnu.org/software/tramp/#Ad_002dhoc-multi_002dhops
     ;; For all hosts, except my local one, first connect via ssh, and then apply sudo -u root:
     ;;(dolist (tramp-proxies '((nil "\\`root\\'" "/ssh:%h:")
     ;; ((regexp-quote (system-name)) nil nil)
     ;; ("localhost" nil nil)
     ;; ("blif\\.vpn" nil nil)
     ;; ("skor-pi" nil nil)
     ;; ;; Add tramp proxy for atomx user
     ;; (nil "atomx" "/ssh:%h:")))
     ;;(setopt tramp-default-proxies-alist nil)))
                                           ;(add-to-list 'tramp-default-proxies-alist tramp-proxies))
     )
   #+end_src

** Vterm
   Setup for vterm-mode is loaded from packaged native mode module.

   #+begin_src emacs-lisp
   (use-package vterm
     :bind (:map vterm-mode-map
                 ("C-s" . isearch-forward)
                 ("S-<home>" . beginning-of-buffer)
                 ("S-<end>" . end-of-buffer))
     :config
     (setopt vterm-max-scrollback 100000)
     ;; Include the title in vterm and multi-vterm buffers
     ;; setting multi-vterm-buffer-name isn't enough.
     (setopt vterm-buffer-name-string "*vterm %s*")
     (defun thao/vterm-eval-cmd-to-sh-list ()
       "Return list of cmds in `vterm-eval-cmds' to be used in `vterm-environment'
   for shells to export and parse as aliases."
       (let ((cmd-list)
              (cmd-list-sh))
         (dolist (cmd vterm-eval-cmds)
           (cl-pushnew (car cmd) cmd-list))
         (dolist (cmd cmd-list)
           (setq cmd-list-sh (concat cmd-list-sh cmd " "))) cmd-list-sh))

     ;; Allow vterm to evoke some elisp functions
     ;; e.g. to replace commands with Emacs function
     ;; Requires that there's an alias to the replaced command
     ;; from the wrapper e.g
     ;; if [ $INSIDE_EMACS ] ; then
     ;;   alias man='vterm_cmd man'
     ;; fi
     ;; Can also be done automatically see below.
     (setopt vterm-eval-cmds '(("find-file" find-file)
                               ("message" message)
                               ("vterm-clear-scrollback" vterm-clear-scrollback)
                               ("man" man)))
     ;; Define commands which should be repalced with Emacs functions using aliases
     (setopt vterm-environment `(,(concat  "VTERM_EVAL_CMD_ALIASES=" (thao/vterm-eval-cmd-to-sh-list)"")))
     (setopt vterm-clear-scrollback-when-clearing t)
     (setopt vterm-tramp-shells '(("docker" .  "/bin/sh")
                                  ("ssh" . "/bin/zsh"))))
   #+end_src


  Instead of defining aliases manually you can also use the environment variable ~VTERM_EVAL_CMD_ALIASES~ shown above
  to define aliases like this in your shell:
  #+begin_src sh :tangle no
  if [ $INSIDE_EMACS ] ; then

      if [ -n "${ZSH_VERSION}" ] ; then
          setopt sh_word_split
      fi

      for alias in $VTERM_EVAL_CMD_ALIASES ; do
          alias $alias="vterm_cmd $alias"
      done
      unset alias

      if [ -n "${ZSH_VERSION}" ] ; then
          unsetopt sh_word_split
      fi

  fi
  #+end_src

** Multi-Vterm
   #+begin_src emacs-lisp
   (use-package multi-vterm
     :config
     (setopt multi-vterm-buffer-name "vterm"))
   #+end_src

** Piper: Shell scripting with Emacs
   :PROPERTIES:
   :CREATED:  [2023-09-15 Fri 13:42]
   :END:

   #+begin_src emacs-lisp
   (use-package piper :defer t)
   #+end_src

* Sort-Packages
** Recentf
   #+BEGIN_SRC emacs-lisp
   (use-package recentf
     :defer 2
     :config
     (add-to-list 'recentf-exclude "^/\\(?:ssh\\|su\\|sudo\\)?:")
     (add-to-list 'recentf-exclude no-littering-var-directory)

     (setopt recentf-max-saved-items 1500
       recentf-max-menu-items 15
       ;; disable recentf-cleanup on Emacs start, because it can cause
       ;; problems with remote files
       recentf-auto-cleanup 'never)

     (recentf-mode))
   #+END_SRC

** View Large Files
   #+BEGIN_SRC emacs-lisp
   ;; View Large Files
   (use-package vlf-setup
     ;; Require vlf-setup which autoloads `vlf'
     ;; to have vlf offered as choice when opening large files
     :config
     ;; Set batch size for browsing large files to 5MB (default 1)
     (setopt vlf-batch-size 5242880)
     ;; warn when opening files bigger than 30MB
     (setopt large-file-warning-threshold 30000000))

   ;; Logview provides syntax highlighting, filtering and other features for various log files
   (use-package logview
     :defer t
     :config
     (setopt logview-additional-submodes
	   '(("Logback4me"
	      (format . "TIMESTAMP [THREAD] {} LEVEL NAME -")
	      (levels . "SLF4J")))))
   #+END_SRC

** atomic-chrome / GhostText: Edit text area in browser
   #+begin_src emacs-lisp
   (use-package atomic-chrome
     :if (daemonp)
     :bind (:map atomic-chrome-edit-mode-map
            ("C-c C-k" . atomic-chrome-close-current-buffer)
            ("C-c C-c" . atomic-chrome-send-buffer-text))
     :defer 10
     :config
     ;; Set port to a less common one
     ;; Must be changed in Firefox too!
     (setopt atomic-chrome-server-ghost-text-port 8326)
     (setopt atomic-chrome-default-major-mode 'gfm-mode)
     (setopt atomic-chrome-buffer-open-style 'frame)
     (setopt atomic-chrome-url-major-mode-alist
           '(("reddit\\.com" . markdown-mode)
             ("github\\.com" . gfm-mode)
             ("gitlab\\.com" . gfm-mode)
             ("gitlab\\.freedesktop\\.org" . gfm-mode)
             ("invent\\.kde\\.org" . gfm-mode)
             ("git\\.swf\\.daimler\\.com" . gfm-mode)
             ("issue.swf.daimler.com" . jira-markup-mode)))
     (atomic-chrome-start-server))
   #+end_src

** PDF-tools
   ~emacs-pdftools-git~ musst be installed before.
   #+begin_src emacs-lisp
   (use-package pdf-tools
     ;; manually update
     ;; after each update we have to call:
     ;; Install pdf-tools but don't ask or raise error (otherwise daemon mode will wait for input)
     ;; (pdf-tools-install t t t)
     :magic ("%PDF" . pdf-view-mode)
     :mode (("\\.pdf\\'" . pdf-view-mode))
     :hook ((pdf-view-mode . pdf-view-init))
     :bind (:map pdf-view-mode-map
                 ("C-s" . isearch-forward)
                 ("M-w" . pdf-view-kill-ring-save)
                 ("M-p" . print-pdf))
     :config
     (require 'whole-line-or-region)
     (defun pdf-view-init ()
       "Enable dark theme and disable while-line-or-region to free keybindings."
       ;; (pdf-view-midnight-minor-mode)
       (require 'pdf-virtual)
       (whole-line-or-region-local-mode -1))

     (setopt pdf-misc-print-program-executable "hp-print")
     ;; more fine-grained zooming; +/- 10% instead of default 25%
     (setopt pdf-view-resize-factor 1.1)
     ;; Improve font rending to avoid blurry font's on high-dpi displays
     (setopt pdf-view-use-scaling t)
     ;; Always use midnight-mode and almost same color as default font.
     ;; Just slightly brighter background to see the page boarders
     ;;(pdf-tools-enable-minor-modes)
     (setopt pdf-view-midnight-colors '("#c6c6c6" . "#363636")))

   (use-package pdf-history
     :hook (pdf-view-mode . pdf-history-minor-mode))

   (use-package pdf-isearch
     :hook (pdf-view-mode .  pdf-isearch-minor-mode))

   (use-package pdf-links
     :hook (pdf-view-mode .  pdf-links-minor-mode))

   (use-package pdf-misc
     :hook ((pdf-view-mode . pdf-misc-minor-mode)
            (pdf-view-mode . pdf-misc-size-indication-minor-mode)
            (pdf-view-mode . pdf-misc-menu-bar-minor-mode)
            (pdf-view-mode . pdf-misc-context-menu-minor-mode)))

   (use-package pdf-outline
     :hook (pdf-view-mode . pdf-outline-minor-mode)
     :config
     (setopt pdf-outline-imenu-use-flat-menus t))

   (use-package pdf-annot
     :hook (pdf-view-mode . pdf-annot-minor-mode))

   (use-package pdf-sync
     :hook (pdf-view-mode . pdf-sync-minor-mode))

   (use-package pdf-cache
     :hook (pdf-view-mode . pdf-cache-prefetch-minor-mode))

   (use-package pdf-view
     :hook (pdf-view-mode . pdf-view-auto-slice-minor-mode))

   (use-package pdf-occur
     :hook (pdf-view-mode . pdf-occur-global-minor-mode))

   (use-package pdf-virtual
     :hook (pdf-view-mode . pdf-virtual-global-minor-mode))
   #+end_src

** Midnight-Mode: Do tasks on midnight
   #+begin_src emacs-lisp
   (use-package midnight
     :config
     (midnight-delay-set 'midnight-delay "4:30am")
     (setopt clean-buffer-list-delay-general 4)
     (setopt clean-buffer-list-kill-regexps '("^.*$"))
     (setopt clean-buffer-list-kill-never-buffer-names
           (nconc clean-buffer-list-kill-never-buffer-names
                  '("*eshell*"
                    "*ielm*"
                    "*mail*"
                    "*w3m*"
                    "*Messages*"
                    "*i3-process*"
                    "tq-temp-emms-mpd"
                    "*Group*" ;; Gnus Group buffer
                    "*w3m-cache*")))
     (setopt clean-buffer-list-kill-never-regexps
           '("\\` \\*Minibuf-.*\\*\\'"
             ;; emms
             "\\`*Browse by.*" ;; emms browser
             "\\`*Browsing by.*" ;; emms browser
             "\\`*EMMS Playlist.*" ;; emms playlist
             "\\`*EMMS.*" ;; any other emms buffer
             "\\`\\*tramp/.*"
             "\\`\\*ftp .*\\*"
             "\\`*#.*" ;; circe channel
             "\\`\\*Summary.*" ;; Gnus Summary
             "\\`\\*Article.*" ;; Gnus Article
             "\\`\\*Original Article *.*" ;; Gnus Article
             "\\`\\*http.*" ;; http buffers from e.g. Mastodon.el
             "\\`â.*" ;;circe server
             "\\`.*@.*"  ;; other circe buffers like queries
             "\\`\\*helm.*\\*\\'")))
   #+end_src

* Version-Control

** Code-Review
   #+begin_src emacs-lisp
   (use-package code-review
     :bind (:map code-review-mode-map
                 ("C-c C-n" .  code-review-comment-jump-next)
                 ("C-c C-p" . code-review-comment-jump-previous))
                 ;; :map code-review-feedback-selection-map
                 ;; ("k" . code-review-section-delete-comment)
                 ;; :map code-review-local-comment-section-map
                 ;; ("k" . code-review-section-delete-comment)
                 ;; :map code-review-reply-comment-section-map
                 ;; ("k" . code-review-section-delete-comment)
     :hook (code-review . emoiji-mode)
     :config
     (setopt code-review-fill-column 80)
     (setopt code-review-auth-login-marker 'forge))
   #+end_src

** Git-Email: Format and send patches in Emacs
   :PROPERTIES:
   :CREATED:  [2024-08-04 Sun 17:57]
   :END:
   #+begin_src emacs-lisp
   (use-package git-email)
   #+end_src

** Magit

   If you want to use magit-commit-absorb you need git-absorb installed.
   ~git-absorb~

   #+begin_src emacs-lisp
   (use-package libgit
     :defer t)

   (use-package gitconfig-mode
     :mode ("/\\.gitconfig\\'"      "/\\.git/config\\'"
            "/modules/.*/config\\'" "/git/config\\'"
            "/\\.gitmodules\\'"     "/etc/gitconfig\\'"))
   (use-package gitignore-mode
     :mode ("/\\.gitignore\\'"  "gitignore_global\\'"
            "/info/exclude\\'" "/git/ignore\\'"))
   (use-package git-commit
     ;; Highlight issue ids in commit messages and spellcheck
     ;; :hook (git-commit-setup . git-commit-turn-on-flyspell)
     :init
     (define-derived-mode git-commit-gfm-mode markdown-mode "GIT-GFM"
       "Major mode for editing commit messages in GitHub Flavored Markdown.
   Like the official markdown gfm-mode but `#' at the beginning of a line
   is not a title but instead is displayed as a comment."
       (setopt markdown-link-space-sub-char "-")
       (setq-local markdown-regex-comment-start "^#")
       (setq-local markdown-regex-comment-end "$")
       (setq-local markdown-table-at-point-p-function 'gfm--table-at-point-p)
       (markdown-gfm-parse-buffer-for-languages))

     ;; Mark a few major modes as safe
     (put 'git-commit-major-mode 'safe-local-variable
          (lambda (m) (or (eq m 'git-commit-gfm-mode)
    		               (eq m 'gfm-mode)
    		               (eq m 'text-mode)
    		               (eq m 'git-commit-elisp-text-mode))))
     :config (setopt git-commit-major-mode 'git-commit-gfm-mode))
   #+end_src

   #+begin_src emacs-lisp
   (use-package magit
     :bind (("C-x g" . magit-status)
            ("C-x G" . magit-dispatch)
            ("C-x M-g" . magit-dispatch)
            ("s-m p" . magit-list-repositories)
            ("s-m m" . magit-status)
            ("s-m f" . magit-file-dispatch)
            ("s-m l" . magit-log)
            ("s-m L" . magit-log-buffer-file)
            ("s-m b" . magit-blame-addition)
            ("s-m B" . magit-blame))
     :hook (after-save . magit-after-save-refresh-status)
     :defines (magit-ediff-dwim-show-on-hunks)
     :init
     (defcustom magit-push-protected-branch nil
       "When set, ask for confirmation before pushing to this branch (e.g. master)."
       :type 'string
       :safe #'stringp
       :group 'magit)
     :config
     (require 'magit-popup)  ;; Some libs don't have explicit dependency listed
     (defun magit-push--protected-branch (magit-push-fun &rest args)
       "Ask for confirmation before pushing a protected branch."
       (if (equal magit-push-protected-branch (magit-get-current-branch))
           ;; Arglist is (BRANCH TARGET ARGS)
           (if (yes-or-no-p (format "Push branch %s? " (magit-get-current-branch)))
               (apply magit-push-fun args)
             (error "Push aborted by user"))
         (apply magit-push-fun args)))

     (advice-add 'magit-push-current-to-pushremote :around #'magit-push--protected-branch)
     (advice-add 'magit-push-current-to-upstream :around #'magit-push--protected-branch)

     ;; Add switch to invert the filter e.g. show all authors but `--author=foo'
     ;; (magit-define-popup-switch 'magit-log-popup
     ;;   ?i "Invert filter" "--invert-grep")

     ;; Show gravatars
     (setopt magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))

     ;; Don't show fringe indicators (Not really visible with our small exwm fringe)
     ;;(setopt magit-section-visibility-indicator nil)

     ;; Always show recent/unpushed/unpulled commits
     (setopt magit-section-initial-visibility-alist '((unpushed . show)
                                                    (unpulled . show)))

     (setopt magit-repository-directories
           '(("~/dev" . 1)
             ("~/dev/arch" . 1)
             ("~/dev/arch/repos" . 2)
             ("~/dev/arch/aur" . 1)
             ("~/dev/sailfish/jolla/pkgs" . 2)
             ("~/dev/sailfish/jolla/sdk" . 2)
             ("~/dev/sailfish/jolla/it" . 2)
             ("~/dev/sailfish/pkgs" . 2)
             ("~/dev/kde" . 3)
             ("~/dev/emacs" . 3)
             ("~/dev/pidgin" . 3)
             ("~/dev/daimler" . 1)
             ("~/dev/kernel" . 1)
             ("~/dev/wow" . 1)
             ("~/dev/gnu" . 1)))

     ;; "b b" is only for checkout and doesn't automatically create a new branch
     ;; remap to `magit-branch-or-checkout' that checks out an existing branch
     ;; or asks to create a new one if it doesn't exist
     ;; (magit-remove-popup-key 'magit-branch-popup :action ?b)
     ;; (magit-define-popup-action 'magit-branch-popup
     ;;   ?b "Checkout or create" 'magit-branch-or-checkout
     ;;   'magit-branch t)

     ;; Show submodules section to magit status
     (magit-add-section-hook 'magit-status-sections-hook
                             'magit-insert-modules
                             'magit-insert-stashes
                             'append)

     ;; Show ignored files section to magit status
     (magit-add-section-hook 'magit-status-sections-hook
                             'magit-insert-ignored-files
                             'magit-insert-untracked-files
                             nil)
     ;; Disable safety nets
     (setopt magit-commit-squash-confirm nil)
     (setopt magit-save-repository-buffers 'dontask)
     (setf (nth 2 (assq 'magit-stash-pop  magit-dwim-selection)) t)
     ;;(setf (nth 2 (assq 'magit-stash-drop magit-dwim-selection)) t)
     (add-to-list 'magit-no-confirm 'rename t)
     (add-to-list 'magit-no-confirm 'resurrect t)
     (add-to-list 'magit-no-confirm 'trash t)

     ;; Don't override date for extend or reword
     (setopt magit-commit-extend-override-date nil)
     (setopt magit-commit-reword-override-date nil)

     ;; Set remote.pushDefault
     (setopt magit-remote-set-if-missing 'default)

     ;; When showing refs (In magit status press `y y') show only merged into master by default
     ;;(setopt magit-show-refs-arguments '("--merged=master"))
     ;; Show color and graph in magit-log. Since color makes it a bit slow, only show the last 128 commits
     (setopt magit-log-arguments '("--graph" "--color" "--decorate" "-n128"))
     ;; Always highlight word differences in diff
     (setopt magit-diff-refine-hunk 'all)

     ;; Only show 2 ediff panes
     (setopt magit-ediff-dwim-show-on-hunks t)

     ;; Don't change my window layout after quitting magit
     ;; Ofter I invoke magit and then do a lot of things in other windows
     ;; On quitting, magit would then "restore" the window layout like it was
     ;; when I first invoked magit. Don't do that!
     (setopt magit-bury-buffer-function 'magit-mode-quit-window)


     ;; Small helper to launch Magit with yadm
     (defun yadm-magit-status (&optional profile)
       "Like `magit-status', with PROFILE or default, but for `(man)yadm 1'. "
       (interactive "sProfile: ")
       (magit-status-setup-buffer (format "/yadm:%s:" profile)))

     ;; Sh ow magit status in the same window
     (setopt magit-display-buffer-function #'display-buffer-window-dedicated))

   (use-package magit-wip
     :after magit
     :config
     ;; Disable more safety nets that can be reverted with WIP mode
     (add-to-list 'magit-no-confirm 'safe-with-wip t)
     (magit-wip-mode))

   (use-package magit-libgit)

   (use-package magit-patch-changelog)
   #+end_src
** Forge

   #+begin_src emacs-lisp
   (use-package forge
     :after magit
     :init
     (setopt forge-database-connector 'sqlite-builtin)
     :config
     (push '("git.sailfishos.org" "git.sailfishos.org/api/v4"
             "git.sailfishos.org" forge-gitlab-repository)
           forge-alist)
     (push '("invent.kde.org" "invent.kde.org/api/v4"
             "invent.kde.org" forge-gitlab-repository)
           forge-alist)
     (push '("gitlab.freedesktop.org" "gitlab.freedesktop.org/api/v4"
             "gitlab.freedesktop.org" forge-gitlab-repository)
           forge-alist))
      #+end_src

** VC
   #+begin_src emacs-lisp
   (use-package vc
     :config
     (add-to-list 'vc-handled-backends 'osc 'append)
     ;; Nicer diff (should be taken from global .config/git/config)
     (setopt vc-git-diff-switches '("--indent-heuristic")))

   (use-package diff-mode
     :config
     ;; Shorten file headers like Magit's diff format.
     (setopt diff-font-lock-prettify t))

   (use-package ediff
     :defer t
     :config
     ;; Always expand files before diffing (especially org files)
     (add-hook 'ediff-prepare-buffer-hook #'outline-show-all)
     ;; Do everything in one frame
     (setopt ediff-window-setup-function 'ediff-setup-windows-plain)
     ;; Split ediff windows horizontally by default
     (setopt ediff-split-window-function 'split-window-horizontally))
   #+end_src

** VC-OSC
   :PROPERTIES:
   :CREATED:  [2023-10-03 Tue 11:30]
   :END:
   #+begin_src emacs-lisp
   (use-package vc-osc)
   #+end_src

* Programming
** Devhelp: Browse documentation in Devhelp format
   :PROPERTIES:
   :CREATED:  [2024-01-21 Sun 10:50]
   :END:
   #+begin_src emacs-lisp
   (use-package devhelp
     :bind
     (("C-h d" . devhelp)))
   #+end_src

** Generic-x: Basic syntax highlighting for many modes (fstab, sudoers, passwd, etc)
   #+begin_src emacs-lisp
   (use-package generic-x
     :if (daemonp)
     :defer 30)
   #+end_src
** xterm-color
   #+begin_src emacs-lisp
   (use-package xterm-color
     :defer t)
   #+end_src
** Comint

   Create a terminfo file for Emacs with ANSI color codes and use it in comint. From https://old.reddit.com/r/emacs/comments/ad90w4/found_a_simple_solution_to_colorize_ls_on_shell/edf40xm/

#+begin_src sh :tangle no
dumb-emacs-ansi|Emacs dumb terminal with ANSI color codes,
    am,
    colors#8, it#8, ncv#13, pairs#64,
    bold=\E[1m, cud1=^J, ht=^I, ind=^J, op=\E[39;49m,
    ritm=\E[23m, rmul=\E[24m, setab=\E[4%p1%dm,
    setaf=\E[3%p1%dm, sgr0=\E[m, sitm=\E[3m, smul=\E[4m,
#+end_src

#+begin_src emacs-lisp
(use-package comint
  :defer t
  :config
  ;; Set terminfo to a dumb terminal with ANSI color codes
  (setopt comint-terminfo-terminal "dumb-emacs-ansi")

  ;; Increase comint buffer size.
  (setopt comint-buffer-maximum-size 8192))
#+end_src

** Compilation
   #+begin_src emacs-lisp
   (use-package compile
     :bind (:map compilation-mode-map
                 ("C-c -" . compilation-add-separator)
                 ("-" . compilation-add-separator)
                 :map comint-mode-map
                 ("C-c -" . compilation-add-separator))
     :init
     ;;(put 'compilation-environment 'safe-local-variable (create-safe-env-p "SENTRY_DSN"))
     :config
     ;; xterm-color config
     (require 'xterm-color)

     (setopt compilation-environment '("TERM=xterm-256color"))

     (defun my/advice-compilation-filter (f proc string)
       (funcall f proc (xterm-color-filter string)))

     (advice-add 'compilation-filter :around #'my/advice-compilation-filter)

     (defun compilation-add-separator ()
       "Insert separator in read-only buffer."
       (interactive)
       (let ((inhibit-read-only t))
         (insert "\n---------------------------------\n\n")
         (point-max)
         (comint-set-process-mark)))
     (defun compile-mode-q-to-quit()
       "press q to quit compile mode"
       (local-set-key "q" 'quit-window))

     ;; Always save before compiling
     (setopt compilation-ask-about-save nil)
     ;; Just kill old compile processes before starting the new one
     (setopt compilation-always-kill t)
     ;; Scroll with the compilation output
     ;; Set to 'first-error to stop scrolling on first error
     (setopt compilation-scroll-output t)
     :hook
     (compilation . compile-mode-q-to-quit))
   #+end_src
** Bitbake-Modes
   #+begin_src emacs-lisp
   (use-package bitbake-modes)
   #+end_src

** Meson-mode
   #+begin_src emacs-lisp
   (use-package meson-mode
     :hook (meson-mode . company-mode))
   #+end_src

** LSP: Language Server Protocol
   For C/C++/Objective C support install ccls and lldb for debugging.
   #+begin_src shell :tangle no
   ccls
   lldb
   #+end_src

   #+begin_src emacs-lisp
   (use-package lsp-mode
     :hook ((lsp-completion-mode . yas-minor-mode))
     :bind (:map lsp-mode-map
                 ("C-c C-a" . lsp-execute-code-action)
                 ("M-." . lsp-find-definition-other)
                 ("M-," . lsp-find-references-other))
     :init
     (setopt lsp-keymap-prefix nil)  ; Don't map the lsp keymap to any key
     (setopt lsp-lens-enable nil)
     :config
     ;; Increase lsp file watch threshold when lsp shows a warning
     (setopt lsp-file-watch-threshold 1500)

     ;; Shutdown lsp-server when all buffers associated with that server are closed
     (setopt lsp-keep-workspace-alive nil)

     (defun lsp-find-definition-other (other?)
       "Like `lsp-find-definition' but open in other window when called with prefix arg."
       (interactive "P")
       (back-button-push-mark-local-and-global)
       (if other?
           (lsp-find-definition :display-action 'window)
         (lsp-find-definition)))
     (defun lsp-find-references-other (other?)
       "Like `lsp-find-references' but open in other window when called with prefix arg."
       (interactive "P")
       (back-button-push-mark-local-and-global)
       (if other?
           (lsp-find-references :display-action 'window)
         (lsp-find-references)))

     ;; Don't watch `build' and `.gradle' directories for file changes
     (add-to-list 'lsp-file-watch-ignored "[/\\\\]build$")
     (add-to-list 'lsp-file-watch-ignored "[/\\\\]\\.gradle$")

     (require 'yasnippet)  ;; We use yasnippet for lsp snippet support
     (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc)))

   (use-package lsp-ui
     :bind (:map lsp-mode-map
                 ("M-?" . lsp-ui-doc-toggle))
     :config
     (defun lsp-ui-doc-toggle ()
       "Shows or hides lsp-ui-doc popup."
       (interactive)
       (if lsp-ui-doc--bounds
           (lsp-ui-doc-hide)
         (lsp-ui-doc-show)))

     ;; Deactivate most of the annoying "fancy features"
     (setopt lsp-headerline-breadcrumb-enable nil)
     (setopt lsp-ui-doc-enable nil)
     (setopt lsp-ui-doc-use-childframe t)
     (setopt lsp-ui-doc-include-signature t)
     (setopt lsp-ui-doc-position 'at-point)
     (setopt lsp-ui-sideline-enable nil)
     (setopt lsp-ui-sideline-show-hover nil)
     (setopt lsp-ui-sideline-show-symbol nil))

   (use-package lsp-treemacs
     :after lsp-mode
     :config
     ;; Enable bidirectional synchronization of lsp workspace folders and treemacs
     (lsp-treemacs-sync-mode))

   (use-package dap-mode
     :after lsp-mode
     :bind (:map dap-server-log-mode-map
                 ("g" . recompile)
                 :map dap-mode-map
                 ([f9] . dap-continue)
                 ([S-f9] . dap-disconnect)
                 ([f10] . dap-next)
                 ([f11] . dap-step-in)
                 ([S-f11] . dap-step-out)
                 ([f12] . dap-hide/show-ui))
     :config
     ;; FIXME: Create nice solution instead of a hack
     (defvar dap-hide/show-ui-hidden? t)
     (defun dap-hide/show-ui ()
       "Hide/show dap ui. FIXME"
       (interactive)
       (if dap-hide/show-ui-hidden?
           (progn
             (setq dap-hide/show-ui-hidden? nil)
             (dap-ui-locals)
             (dap-ui-repl))
         (dolist (buf '("*dap-ui-inspect*" "*dap-ui-locals*" "*dap-ui-repl*" "*dap-ui-sessions*"))
           (when (get-buffer buf)
             (kill-buffer buf)))
         (setq dap-hide/show-ui-hidden? t)))

     (dap-mode)
     ;; displays floating panel with debug buttons
     (dap-ui-controls-mode)
     ;; Displaying DAP visuals
     (dap-ui-mode))

   (use-package ccls
     :hook ((c++-mode c-mode objc-mode) . ccls-lsp-init)
     :config
     (defun ccls-lsp-init ()
       "We need to require ccls before loading lsp in a C buffer.
   Otherwise lsp would use the default clangd backend.
   use-package will load ccls for us simply by calling this function."
       (lsp-deferred)))
   (use-package dap-lldb :after ccls)
   #+end_src

** Flycheck
   #+begin_src emacs-lisp
   (use-package flycheck
     :hook ((prog-mode ledger-mode systemd-mode sh-mode
		       mu4e-compose-mode markdown-mode rst-mode) . flycheck-mode)
     :hook (flycheck-mode . flycheck-color-mode-line-mode)
     :config
     ;; Use the load-path from running Emacs when checking elisp files
     (setopt flycheck-emacs-lisp-load-path 'inherit)

     ;; Only do flycheck when I actually safe the buffer
     (setopt flycheck-check-syntax-automatically '(save idle-change new-line mode-enabled)))

   (use-package flycheck-color-mode-line)
   #+end_src

** Ggtags
   #+begin_src emacs-lisp
   (use-package ggtags)
   #+end_src

** C/C++

*** cc-mode
    #+begin_src emacs-lisp
    (use-package cc-mode
      :config
      (setopt c-default-style "stroustrup"
	    c-indent-level 2)
      (add-hook 'c++-mode-hook
		(lambda ()
		  (unless (file-exists-p "Makefile")
		    (set (make-local-variable 'compile-command)
			 (let ((file (file-name-nondirectory buffer-file-name)))
			   (concat "g++ -g  -Wall -o "
				   (file-name-sans-extension file)
				   " " file))))))
      :hook (c-mode . (lambda ()
			(unless (file-exists-p "Makefile")
			  (set (make-local-variable 'compile-command)
			       (let ((file (file-name-nondirectory buffer-file-name)))
				 (concat "gcc -g  -Wall -o "
					 (file-name-sans-extension file)
					 " " file))))))
      :bind (:map c-mode-base-map
		  ("C-c C-a" . nil)
		  ;; I want to use smartparens for () and {} instead of c-electric
		  ("(" . nil)
		  (")" . nil)
		  ("{" . nil)
		  ("}" . nil)
		  (";" . nil)
		  ("," . nil)))
    #+end_src

*** Cmake-mode
    #+begin_src emacs-lisp
    (use-package cmake-font-lock
      :hook (cmake-mode . cmake-font-lock-activate))

    (use-package cmake-mode
      :mode ("CMakeLists.txt" "\\.cmake\\'"))
    #+end_src

*** Irony
    #+begin_src emacs-lisp
    (use-package irony
      :disabled nil
      :hook (((c++-mode c-mode objc-mode) . irony-mode-on-maybe)
	     (irony-mode . irony-cdb-autosetup-compile-options))
      :config
      (defun irony-mode-on-maybe ()
	;; avoid enabling irony-mode in modes that inherits c-mode, e.g: solidity-mode
	(when (member major-mode irony-supported-major-modes)
	  (irony-mode 1))))

    (use-package company-irony
      :after irony
      :config (add-to-list 'company-backends 'company-irony))

    (use-package irony-eldoc
      :hook (irony-mode))
    #+end_src


** Qt
*** QMake
    #+begin_src emacs-lisp
    (use-package qt-pro-mode
      :mode "\\.pr[io]$"
      :config
      (add-to-list 'auto-mode-alist '("\\.pr[io]$" . qt-pro-mode)))
    #+end_src

*** QML
    #+begin_src emacs-lisp
    (use-package qml-mode
      :mode "\\.qml$")
    #+end_src

** Perl
   #+begin_src emacs-lisp
   (use-package perl-completion
     :config
     (perl-completion-mode t))

   (use-package cperl-mode
     :mode "\\.\\(p\\([lm]\\)\\)\\'"
     :after perl-completition
     :init
     (defalias 'perl-mode 'cperl-mode)
     (fset 'perl-mode 'cperl-mode)
     :config
     ;; use cperl-mode instead of perl-mode
     ;; http://xahlee.info/emacs/emacs/emacs_perl_vs_cperl_mode.html
     (setopt auto-mode-alist (rassq-delete-all 'perl-mode auto-mode-alist))

     (setopt interpreter-mode-alist (rassq-delete-all 'perl-mode interpreter-mode-alist))
     (add-to-list 'interpreter-mode-alist '("perl" . cperl-mode))
     (add-to-list 'interpreter-mode-alist '("perl5" . cperl-mode))
     (add-to-list 'interpreter-mode-alist '("miniperl" . cperl-mode))
     (setopt cperl-indent-level 3
           cperl-set-style "C++"
           cperl-auto-newline-after-colon t
           cperl-continued-statement-offset 4
           cperl-extra-newline-before-brace t
           cperl-highlight-variables-indiscriminately t))
   #+end_src

** Python
   #+begin_src emacs-lisp
   (use-package anaconda-mode
     :after company
     :after python
     :hook
     (((python-mode python-ts-mode) . anaconda-mode)
      ((python-mode python-ts-mode) . anaconda-eldoc-mode))
     :config
     (eval-after-load "company"
       '(add-to-list 'company-backends '(company-anaconda :with company-capf))))
   #+end_src

** Shell-Script
   #+begin_src emacs-lisp
   (use-package sh-script
     :mode "\\.\\(\\(ba\\)sh|\\zsh\\)\\'"
     :hook (sh-script-mode . thao/sh-script-inc-file-shell-rpm)
     :config
     (defun thao/sh-script-inc-file-shell-rpm()
       "Set shell to rpm if `shell-script-mode' is enabled for an inc file"
       (if (not (eq nil buffer-file-name))
    	    (if (string-match "\\.inc$" buffer-file-name)
    		    (sh-set-shell "rpm" nil t)))))
   #+end_src

** Lua
   #+begin_src emacs-lisp
   (use-package lua-mode
     :mode "\\.lua\\'"
     :interpreter ("lua" . lua-mode)
     :hook (lua-mode . lua-outline-mode)
     :bind (:map lua-mode-map
		 ("M-?" . lua-search-documentation)
		 ("M-." . xref-find-definitions))
     :config
     ;; Use eww to browse Lua documentation
     (setopt lua-documentation-function 'eww)
     (defun lua-outline-mode ()
       (setq-local outline-regexp "function")))

   (use-package company-lua
     :hook (lua-mode . my-lua-mode-company-init)
     :config
     (defun my-lua-mode-company-init ()
       (setq-local company-backends '((company-lua
				       company-etags
				       company-dabbrev-code
				       company-yasnippet)))))
   #+end_src

** Webdev

*** Web-Mode
    #+begin_src emacs-lisp
    (use-package web-mode
      :mode (("\\.phtml\\'" . web-mode)
	     ("\\.tpl\\.php\\'" . web-mode)
	     ("\\.jsp\\'" . web-mode)
	     ("\\.as[cp]x\\'" . web-mode)
	     ("\\.erb\\'" . web-mode)
	     ("\\.mustache\\'" . web-mode)
	     ("\\.djhtml\\'" . web-mode)
	     ("\\.html?\\'" . web-mode)
	     ("\\.tmpl?\\'" . web-mode))
      :config
      (setopt web-mode-markup-indent-offset 2)
      (setopt web-mode-indent-style 2)

      (setopt web-mode-ac-sources-alist
	    '(("css" . (ac-source-css-property))
	      ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

      (setopt web-mode-enable-auto-pairing t)
      (setopt web-mode-enable-auto-closing t)

      (setopt web-mode-enable-current-element-highlight t)
      (setopt web-mode-enable-current-column-highlight t)

      (setopt web-mode-enable-css-colorization t))
    #+end_src

** Elixir
   #+begin_src emacs-lisp
   (use-package elixir-mode
     :mode "\\.\\(ex\\([s]\\)\\|elixir\\)\\'")
   #+end_src

** PlantUML
   :PROPERTIES:
   :CREATED:  [2024-02-21 Wed 19:01]
   :END:
   #+begin_src emacs-lisp
   (use-package plantuml-mode
     :mode ("\\.plantuml\\'")
     :config
     (setopt plantuml-exec-mode 'executable)
     (setopt plantuml-default-exec-mode plantuml-exec-mode)
     (setopt plantuml-preview-theme "reddress-darkgreen")
     (setopt plantuml-jar-path "/usr/share/java/plantuml.jar"))
   #+end_src

** Configuration-Files
*** Nginx
    #+begin_src emacs-lisp
    (use-package nginx-mode
      :mode ("\\.nginx\\'" "/etc/nginx/.*\\.conf\\'"))
    (use-package company-nginx
      :after nginx
      :hook (company-nginx . my-nginx-mode-company-init)
      :config
      (defun my-nginx-mode-company-init ()
        (setq-local company-backends '((company-nginx
                                        company-etags
                                        company-dabbrev-code)))))
    #+end_src

*** Arch PKGBUILD
    #+begin_src emacs-lisp
    (use-package pkgbuild-mode
      :mode "/PKGBUILD$")
    #+end_src

*** RPM-Spec
    #+begin_src emacs-lisp
    (use-package rpm-spec-mode
      :mode ("\\.spec\\'" "\\.inc\\'"))
    #+end_src

*** YAML
    #+begin_src emacs-lisp
    (use-package yaml-mode
      :mode ("\\.yaml\\'" "\\.yml\\'")
      :config
      (setopt yaml-indent-offset 2))
    #+end_src

*** Systemd
    #+begin_src emacs-lisp
    (use-package systemd
      :mode ("\\.\\(service\\|timer\\)\\'" . systemd-mode))
    #+end_src

*** TOML
    #+begin_src emacs-lisp
    (use-package toml-mode
      :mode ("\\.toml\\'" "Cargo.lock\\'"))
    #+end_src

*** Salt: GNU Emacs major mode for editing Salt States
    :PROPERTIES:
    :CREATED:  [2024-07-25 Thu 00:00]
    :END:
    #+begin_src emacs-lisp
    (use-package salt-mode
      :config
      (setopt salt-mode-python-program "python3"))
    #+end_src

*** ssh-config
    #+begin_src emacs-lisp
    (use-package ssh-config-mode
      :mode ("\\/\\.ssh/config\\'"))
    #+end_src

* Markup Languages

** Jira-Markup
   #+begin_src emacs-lisp
   (use-package jira-markup-mode
     :mode ("\\.confluence\\'" "\\.jira\\'"))
   #+end_src

** Org Packages
   I know org-mode is not just it's markup syntax but also everything else.

*** Org
    #+begin_src emacs-lisp
    (use-package org
      :mode ("\\.\\(org\\|org_archive\\)\\'" . org-mode)
      :after company
      :hook (org-mode . turn-on-org-cdlatex)
      :bind (("C-c a"   . org-agenda)
             ("<f6>"    . org-agenda)
             ("<f7>"    . org-clock-goto)
             ("C-c l"   . org-store-link)
             ("C-c o c" . org-clock-goto)
             ("C-c o i" . org-clock-in-or-list)
             ("C-c C-x C-j" . org-clock-goto)
             ("C-c C-x C-i" . org-clock-in-or-list)
             ("C-c C-x C-o" . org-clock-out)
             ("C-c o O" . org-clock-out)
             ("C-c o l" . org-store-link)
             ("C-c o a" . org-agenda)
             ("C-c o b" . org-switchb)
             ("C-c o d" . org-hide-all-drawers)
             :map org-mode-map
             ([(shift return)] . crux-smart-open-line)
             ([(control shift return)] . crux-smart-open-line-above)
             ("<M-return>" . org-insert-todo-heading-respect-content)
             ("<M-S-return>" . org-meta-return)
             ("M-." . org-open-at-point)  ; So M-. behaves like in source code.
             ("M-," . org-mark-ring-goto)
             ("M-;" . org-comment-dwim-2)
             ("M-i" . consult-org-heading)
             ("C-c C-x C-i" . org-clock-in-or-list)
             ;; Disable adding and removing org-agenda files via keybinding.
             ;; I explicitly specify agenda file directories in the config.
             ("C-c [" . nil)
             ("C-c ]" . nil)
             ("C-a" . org-beginning-of-line)  ; Overwrite crux-beginning-of-line
             ("M-o" . ace-link-org)
             ("M-p" . org-previous-visible-heading)
             ("M-n" . org-next-visible-heading)
             ("<M-up>" . org-metaup)
             ("<M-down>" . org-metadown))
      ;;:map org-src-mode-map
      ;;"C-x n" . org-edit-src-exit))
      :init
      (add-hook 'org-mode-hook
                (lambda ()
                  ;; Automatic line-wrapping in org-mode
                  ;;(auto-fill-mode 1)
                  (make-local-variable 'company-backends)
                  (add-to-list 'company-backends
                               '(company-capf :with company-dabbrev))

                  (setq-local completion-at-point-functions
                          '(org-completion-symbols
                            org-cap-filesystem))))
      :config
      (require 'xdg)
      ;; Insead of "..." show "â¦" when there's hidden folded content
      ;; Some characters to choose from: â¦, â¤µ, â¼, â´, â¬, â¤·, and â±
      (setopt org-ellipsis "â¦")

      <<org_private>>

      (defun org-clock-in-or-list (&optional select start-time)
        "Like org-clock-in but show list of recent clocks when not in org buffer.
        Show clock history when not in org buffer or when called with prefix argument."
        (interactive "P")
        (if (and (eq major-mode 'org-mode) (not (equal select '(4))))
            (org-clock-in select start-time)
          ;; FIXME: add functionality of (counsel-org-clock-history) to consult
          ;; Use variable org-clock-history with list of markers
          (org-clock-goto)))

      ;; Fold everything when opening an org file.
      ;; Set it to 'overview to onnly show headings up to level 2.
      (setopt org-startup-folded t)

      ;; Show inline images by default
      (setopt org-startup-with-inline-images t)

      ;; Display remotes images
      (setopt org-display-remote-inline-images 'cache)

      ;; Add more levels to headlines that get displayed with imenu
      (setopt org-imenu-depth 5)

      ;; Enter key follows links (= C-c C-o)
      (setopt org-return-follows-link t)

      ;; When enabling the cache I get errors on latest Emacs 29.1
      ;; (wrong-type-argument avl-tree- nil)
      ;; So disable it (temporarily)
      ;; (setopt org-element-use-cache nil)

      ;; Never show 'days' in clocksum (e.g. in report clocktable)
      ;; format string used when creating CLOCKSUM lines and when generating a
      ;; time duration (avoid showing days)
      (setopt org-duration-format '((special . h:mm)))
      ;; Set to  (("d" . nil) (special . h:mm)) if you want to show days

      ;; Set default column view headings: Task Effort Clock_Summary
      ;;(setopt org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")

      ;; Set default column view headings: Task Total-Time Time-Stamp
      (setopt org-columns-default-format "%75ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")

      ;; global Effort estimate values
      ;; global STYLE property values for completion
      (setopt org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                            ("STYLE_ALL" . "habit"))))

      ;; Tags with fast selection keys
      (setopt org-tag-alist (quote ((:startgroup)
                                    ("WAITING" . ?w)
                                    ("HOLD" . ?h)
                                    ("MEETING" . ?m)
                                    ("REVIEW" . ?r)
                                    ("NOTE" . ?n)
                                    (:endgroup)
                                    ("PERSONAL" . ?P)
                                    ("work" . ?W)
                                    ("crypt" . ?c)
                                    ("FLAGGED" . ??)
                                    ("home" . ??)
                                    ("shopping" . ??)
                                    ("routine" . ??)
                                    ("email" . ??))))

      ;; Allow setting single tags without the menu
      (setopt org-fast-tag-selection-single-key (quote expert))

      (setopt org-archive-mark-done nil)
      (setopt org-archive-location "%s_archive::")
      (require 'org-archive-subtree-hierarchy)
      (org-archive-subtree-hierarchy)

      ;; C-RET, C-S-RET insert new heading after current task content
      (setopt org-insert-heading-respect-content nil)

      ;; Show a little bit more when using sparse-trees
      (setopt org-show-following-heading t)
      (setopt org-show-hierarchy-above t)
      (setopt org-show-siblings (quote ((default))))

      ;; don't show * / = etc
      (setopt org-hide-emphasis-markers t)

      ;; leave highlights in sparse tree after edit. C-c C-c removes highlights
      (setopt org-remove-highlights-with-change nil)

      ;; M-RET should not split the lines
      (setopt org-M-RET-may-split-line '((default . nil)))

      (setopt org-special-ctrl-a/e t)
      (setopt org-special-ctrl-k t)
      (setopt org-yank-adjusted-subtrees t)

      ;; Enable hard indentation to have indentation also visible outside
      ;; of emacs.
      (setopt org-adapt-indentation t)
      (setopt org-image-actual-width t)
      (setopt org-support-shift-select 1)


      (require 'smartparens-org)  ;; Additional org sp-local-pairs

      ;; Add org-directory and its sub-directories
      (setopt org-directory `,(append (list (concat (xdg-user-dir "DOCUMENTS") "/org"))
                                      (f-directories (concat (xdg-user-dir "DOCUMENTS") "/org")
                                                     nil t)))

      ;; Log time when we re-schedule a task
      (setopt org-log-reschedule 'time)
      ;; Always take note when marking task as done
      (setopt org-log-done 'note)
      ;; and take note when re-scheduling a deadline
      (setopt org-log-redeadline 'note)

      ;; Show org entities as UTF-8 characters (e.g. \sum as â)
      (setopt org-pretty-entities t)
      ;; But Don't print "bar" as subscript in "foo_bar"
      (setopt org-pretty-entities-include-sub-superscripts nil)
      ;; And also don't display ^ or _ as super/subscripts
      (setopt org-use-sub-superscripts nil)
      ;; Undone TODO entries will block switching the parent to DONE
      (setopt org-enforce-todo-dependencies t)

      (setopt org-use-fast-todo-selection t)

      ;; This allows changing todo states with S-left and S-right skipping all of the normal processing
      ;; when entering or leaving a todo state.
      ;; This cycles through the todo states but skips setting timestamps and entering notes which
      ;; is very convenient when all you want to do is fix up the status of an entry.
      (setopt org-treat-S-cursor-todo-selection-as-state-change nil)

      (setopt org-default-notes-file (concat (car org-directory) "/inbox.org"))

                                            ; Use the current window for indirect buffer display
      (setopt org-indirect-buffer-display 'current-window)


      ;; FIXME: Merge with org mode org-cycle-hide-drawers
      ;;        Using only this would always show all drawers expanded by default
      ;; From: https://stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode
      (defun org-cycle-hide-drawers-all (state)
        "Re-hide all drawers after a visibility state change."
        (when (and (derived-mode-p 'org-mode)
                   (not (memq state '(overview folded contents))))
          (save-excursion
            (let* ((globalp (memq state '(contents all)))
                   (beg (if globalp (point-min) (point)))
                   (end (if globalp (point-max)
                          (if (eq state 'children)
                              (save-excursion (outline-next-heading) (point))
                            (org-end-of-subtree t)))))
              (goto-char beg)
              (while (re-search-forward org-drawer-regexp (max end (point)) t)
                (save-excursion
                  (beginning-of-line 1)
                  (when (looking-at org-drawer-regexp)
                    (let* ((start (1- (match-beginning 0)))
                           (limit
                            (save-excursion
                              (outline-next-heading)
                              (point)))
                           (msg (format
                                 (concat
                                  "org-cycle-hide-drawers:  "
                                  "`:END:`"
                                  " line missing at position %s")
                                 (1+ start))))
                      (if (re-search-forward "^[ \t]*:END:" limit t)
                          (outline-flag-region start (line-end-position) t)
                        (user-error msg))))))))))

      (defun org-hide-all-drawers ()
        "Hide all drawers"
        (interactive)
        (org-cycle-hide-drawers-all 'all))

      ;; FIXME: Create minor mode that always hides drawers and adds/removes advice instead of temp var
      (setopt org-always-hide-all-drawers-p nil)

      (defun org-always-hide-all-drawers (state)
        (when (and (not (eq state 'folded)) org-always-hide-all-drawers-p)
          (org-cycle-hide-drawers-all 'all)))

      (add-hook 'org-cycle-hook #'org-always-hide-all-drawers)

      (defun org-always-hide-all-drawers-toggle ()
        "Toggle always hidden drawers."
        (interactive)
        (setq org-always-hide-all-drawers-p (not org-always-hide-all-drawers-p))
        (org-cycle-hide-drawers-all t))

      ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
      (setopt org-refile-targets '((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9)))

      ;; Allow refile to create parent tasks with confirmation
      (setopt org-refile-allow-creating-parent-nodes (quote confirm))
      (setopt org-refile-use-outline-path 'file)  ; Show filename for refiling
      (setopt org-outline-path-complete-in-steps nil)  ; Refile in a single go

      ;; Exclude DONE state tasks from refile targets
      (defun org-refile-verify-refile-target ()
        "Exclude todo keywords with a done state from refile targets."
        (not (member (nth 2 (org-heading-components)) org-done-keywords)))

      (setopt org-refile-target-verify-function #'org-refile-verify-refile-target)

      ;; Automatically change the list bullets when you change list levels
      (setopt org-list-demote-modify-bullet '(("+" . "-")
                                              ("*" . "-")
                                              ("1." . "-")
                                              ("1)" . "-")
                                              ("A)" . "-")
                                              ("B)" . "-")
                                              ("a)" . "-")
                                              ("b)" . "-")
                                              ("A." . "-")
                                              ("B." . "-")
                                              ("a." . "-")
                                              ("b." . "-")))

      (setopt org-todo-keywords
              (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                      (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")
                      (type "PHONE" "LESSON" "EXAM" "SHIFT" "MEETING" "|" "CANCELLED(c@/!)"))))

      (setopt org-todo-keyword-faces
              (quote (;; Generic TODO's
                      ("TODO"
                       :inverse-video t :weight semibold :height 1.0 :inherit
                       (org-todo))
                      ;;:inherit (org-modern-todo))
                      ("NEXT" :foreground "blue" :weight semibold :inverse-video t )
                      ;; ("DONE" ((default (:inherit (org-modern-label)))
                      ;;         (((background light)) (:foreground "black" :background "gray90"))
                      ;;        (t (:foreground "white" :background "gray20"))))
                      ;; Using org-modern default here
                      ("WAITING" :foreground "orange" :weight semibold :inverse-video t )
                      ("HOLD" :foreground "magenta" :weight semibold :inverse-video t )
                      ("CANCELLED" :foreground "forest green" :weight semibold :inverse-video t )
                      ;; Types of meetings or events
                      ("LESSON" :foreground  "light green" :weight semibold :inverse-video t )
                      ("EXAM" :foreground "dark green" :weight semibold :inverse-video t )
                      ("SHIFT" :foreground "steel blue" :weight semibold :inverse-video t )
                      ("MEETING" :foreground "forest green" :weight semibold :inverse-video t )
                      ("PHONE" :foreground "forest green" :weight semibold :inverse-video t))))
      ;;  If a task moves to CANCELLED state then it gets a CANCELLED tag.
      ;; Moving a CANCELLED task back to TODO removes the CANCELLED tag.
      ;; http://doc.norang.ca/org-mode.html#ToDoStateTriggers
      (setopt org-todo-state-tags-triggers
              (quote (("CANCELLED" ("CANCELLED" . t))
                      ("WAITING" ("WAITING" . t))
                      ("HOLD" ("WAITING") ("HOLD" . t))
                      (done ("WAITING") ("HOLD"))
                      ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                      ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                      ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

      ;; Auto completion for symbols in org-mode
      ;; https://oremacs.com/2017/10/04/completion-at-point/
      (defun org-completion-symbols ()
        (when (looking-back "[`~=][a-zA-Z]+" nil)
          (let (cands)
            (save-match-data
              (save-excursion
                (goto-char (point-min))
                (while (re-search-forward "[`~=]\\([a-zA-Z.\\-_]+\\)[`~=]" nil t)
                  (cl-pushnew
                   (match-string-no-properties 0) cands :test 'equal))
                cands))
            (when cands
              (list (match-beginning 0) (match-end 0) cands)))))

      (require 'ffap)
      (defun org-cap-filesystem ()
        (interactive)
        (when-let* ((path (ffap-string-at-point)))
          (when (string-match "\\`file:\\(.*\\)\\'" path)
            (setq path (match-string 1 path)))
          (when-let* ((compl (all-completions path #'read-file-name-internal)))
            (let* ((str (car compl))
                   (offset
                    (let ((i 0)
                          (len (length str)))
                      (while (and (< i len)
                                  (equal (get-text-property i 'face str)
                                         'completions-common-part))
                        (cl-incf i))
                      i)))
              (list (- (point) offset) (point) compl)))))

      ;; Custom org-sort to sort by TODO and then by priority
      ;; See: https://emacs.stackexchange.com/a/9588/12559
      (defun org-sort-todo-to-int (todo)
        (first (-non-nil
                (mapcar (lambda (keywords)
                          (let ((todo-seq
                                 (-map (lambda (x) (first (split-string  x "(")))
                                       (rest keywords))))
                            (cl-position-if (lambda (x) (string= x todo)) todo-seq)))
                        org-todo-keywords))))

      (defun org-sort-by-todo-and-prio-key ()
        (let* ((todo-max (apply #'max (mapcar #'length org-todo-keywords)))
               (todo (org-entry-get (point) "TODO"))
               (todo-int (if todo (org-sort-todo-to-int todo) todo-max))
               (priority (org-entry-get (point) "PRIORITY"))
               (priority-int (if priority (string-to-char priority) org-default-priority)))
          (format "%03d %03d" todo-int priority-int)))

      (defun org-sort-entries-by-todo-and-prio ()
        "Sort org entries first by TODO keyword and then priority."
        (interactive)
        (org-sort-entries nil ?f #'org-sort-by-todo-and-prio-key))


      ;; set org-mode link abbrevs
      (setopt org-link-abbrev-alist
              '(("google"    . "http://www.google.com/search?q=")
                ("gmap"      . "http://maps.google.com/maps?q=%s")
                ("omap"      . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
                ("wpen"      . "http://en.wikipedia.org/wiki/%s")
                ("wpde"      . "http://de.wikipedia.org/wiki/%s")
                ("mane"      . "http://man.he.net/?topic=%s&section=all")))
      (setopt org-link-abbrev-alist
              (append org-link-abbrev-alist
                      org-link-abbrev-alist-private)))
    #+end_src

*** Outorg
    #+begin_src emacs-lisp
    (use-package outorg)

    (use-package outshine)
    #+end_src

*** Org-Tree slide
    #+begin_src emacs-lisp
    (use-package org-tree-slide
      :after org
      :bind (:map org-tree-slide-mode-map
		  ("<left>" . org-tree-slide-move-next-tree)
		  ("<right>" . org-tree-slide-move-next-tree)))
    #+end_src

*** Org-appear: Make invisible parts of Org elements appear visible
    #+begin_src emacs-lisp
    (use-package org-appear
      :hook (org-mode . org-appear-mode)
      :config
      (setopt org-appear-autolinks nil))
    #+end_src

*** Org-Agenda
    #+begin_src emacs-lisp
    (use-package appt
      :defer t
      :config
      (defvar appt-org-notification-critical-threshold 5)
      (defun appt-org-notification-single (min _time text)
        (notifications-notify
         :title (format "%s in %s minutes." text min)
         :timeout 10000  ;; Close notification after 10s
         :desktop-entry notifications-application-name
         :urgency (if (< (string-to-number min) appt-org-notification-critical-threshold)
                      'critical
                    'normal)))

      (defun appt-org-notification (min time text)
        (if (listp min)
            (mapc #'appt-org-notification-single (-interleave min time text))
          (appt-org-notification-single min time text)))

      (setopt appt-display-format 'window)
      (setopt appt-disp-window-function #'appt-org-notification)
      (setopt appt-message-warning-time 6))

    (use-package org-agenda
      :defer t
      :after org
      :config
      ;; org-org-directory and subdirectories
      (setopt org-agenda-files  `,(append (list (concat (xdg-user-dir "DOCUMENTS")"/org" ))
                                        (f-directories (concat (xdg-user-dir "DOCUMENTS") "/org")
                                                       nil t)))

      (defun org-agenda-custom-command-for (file)
        "Return list usable in org-agenda-custom-commands with agenda and all TODOs for FILE and inbox-FILE."
        (list '((tags "REFILE") (agenda "") (alltodo "")) `((org-agenda-files '(,(expand-file-name "inbox.org" (car org-directory))
                                                                                ,(expand-file-name (concat "caldav-inbox-" file ".org") (car org-directory))
                                                                                ,(expand-file-name "gemeinsam-inbox.org" (car org-directory))
                                                                                ,(expand-file-name "gemeinsam.org" (car org-directory))
                                                                                ,(expand-file-name "refile.org" (car org-directory))
                                                                                ,(expand-file-name "lexis-work.org" (car org-directory))
                                                                                ,(expand-file-name "lexis-work-inbox.org" (car org-directory))
                                                                                ,(expand-file-name "lexis-school.org" (car org-directory))
                                                                                ,(expand-file-name "lexis-school-inbox.org" (car org-directory))
                                                                                ,(expand-file-name (concat file ".org") (car org-directory)))))))
      (defun org-agenda-custom-command-for-work (file)
        "Return list usable in org-agenda-custom-commands with agenda and all TODOs for FILE and work inbox."
        (list '((tags "REFILE") (agenda "") (alltodo ""))  `((org-agenda-files '(,(expand-file-name "inbox.org" (car org-directory))
                                                                                 ,(expand-file-name "caldav-inbox-arbeit.org" (car org-directory))
                                                                                 ,(expand-file-name "refile.org" (car org-directory))
                                                                                 ,(expand-file-name (concat file ".org") (car org-directory)))))))

      (setopt org-clocked-in-project "jolla")

      <<org_agenda_private>>

      (setopt org-agenda-custom-commands
             `(
               ("A" "Agenda and all TODOs" ((agenda "") (alltodo "")))
               (" " "Current Project Agenda and TODOs" ,@(org-agenda-custom-command-for-work org-clocked-in-project))
               ("j" "Jolla Agenda and TODOs" ,@(org-agenda-custom-command-for-work "jolla"))
               ("p" "Personal Agenda and TODOs" ,@(org-agenda-custom-command-for "personal"))
               ;;("t" "PTapp Agenda and TODOs" ,@(org-agenda-custom-command-for "ptapp"))
               ;;("S" "Skor Agenda and TODOs" ,@(org-agenda-custom-command-for "skor"))
               ("W" "Weekly Review"
                ((agenda "" ((org-agenda-span 7))); review upcoming deadlines and appointments
                                            ; type "l" in the agenda to review logged items
                 (stuck "") ; review stuck projects as designated by org-stuck-projects
                 (todo "PROJECT") ; review all projects (assuming you use todo keywords to designate projects)
                 (todo "MAYBE") ; review someday/maybe items
                 (todo "WAITING"))) ; review waiting items
               ;; ...other commands here
               ))
      (setopt org-agenda-custom-commands
            (append
             org-agenda-custom-commands org-agenda-custom-commands-private))

      ;; Overwrite the current window with the agenda
      (setopt org-agenda-window-setup 'other-frame)

      ;; Do not dim blocked tasks
      (setopt org-agenda-dim-blocked-tasks nil)

      ;; Compact the block agenda view
      (setopt org-agenda-compact-blocks nil)

      ;; Agenda clock report parameters
      (setopt org-agenda-clockreport-parameter-plist
            (quote (:link t :maxlevel 5 :fileskip0 t :stepskip0 t :compact nil :narrow 80)))

      ;; Agenda log mode items to display (closed and state changes by default)
      (setopt org-agenda-log-mode-items (quote (closed state clock)))

      ;; Keep tasks with dates on the global todo lists
      (setopt org-agenda-todo-ignore-with-date nil)

      ;; Keep tasks with deadlines on the global todo lists
      (setopt org-agenda-todo-ignore-deadlines nil)

      ;; Keep tasks with scheduled dates on the global todo lists
      (setopt org-agenda-todo-ignore-scheduled nil)

      ;; Keep tasks with timestamps on the global todo lists
      (setopt org-agenda-todo-ignore-timestamp nil)

      ;; Remove completed deadline tasks from the agenda view
      (setopt org-agenda-skip-deadline-if-done t)

      ;; Remove completed scheduled tasks from the agenda view
      ;; (setopt org-agenda-skip-scheduled-if-done t)

      ;; Remove completed items from search results
      ;; (setopt org-agenda-skip-timestamp-if-done t)

      ;; Include agenda archive files when searching for things
      (setopt org-agenda-text-search-extra-files (quote (agenda-archives)))

      ;; Show all future entries for repeating tasks
      (setopt org-agenda-repeating-timestamp-show-all t)

      ;; Show all agenda dates - even if they are empty
      (setopt org-agenda-show-all-dates t)

      ;; Start the weekly agenda on Monday
      (setopt org-agenda-start-on-weekday 1)

      ;; For 0 to 4am show yesterday in the agenda view "toady"
      (setopt org-extend-today-until 4)

      ;; Agenda styling
      (setopt org-agenda-block-separator ?â
            org-agenda-time-grid
            '((daily today require-timed)
              (800 1000 1200 1400 1600 1800 2000)
              " âââââ " "âââââââââââââââ")
            org-agenda-current-time-string
            "â­  now âââââââââââââââââââââââââââââââââââââââââââââââââ")

      ;; Insert a separator between each day
      (setopt org-agenda-format-date (lambda (date) (concat "\n"
                                                          (make-string (window-width) 9472)
                                                          "\n"
                                                          (org-agenda-format-date-aligned date))))

      ;; Use sticky agenda's so they persist
      ;;(setopt org-agenda-sticky t)

      ;; Limit restriction lock highlighting to the headline only
      (setopt org-agenda-restriction-lock-highlight-subtree nil)

      ;; Sorting order for tasks on the agenda
      (setopt org-agenda-sorting-strategy
            (quote ((agenda habit-down time-up user-defined-up effort-up category-keep)
                    (todo category-up effort-up)
                    (tags category-up effort-up)
                    (search category-up))))

      ;; Enable display of the time grid so we can see the marker for the current time
      ;;(setopt org-agenda-time-grid (quote ((daily today remove-match)
      ;;                                   #("----------------" 0 16 (org-heading t))
      ;;                                   (0900 1100 1300 1500 1700))))

      ;; Update appt list on agenda view
      (add-hook 'org-agenda-finalize-hook 'org-agenda-to-appt)
      (appt-activate)
      (org-agenda-to-appt)

      (setopt org-fold-catch-invisible-edits 'show-and-error)
      (setopt org-auto-align-tags t)
      ;; Display tags farther right
      ;; (setopt org-agenda-tags-column 0)
      (setopt org-agenda-tags-column -102)

      (setopt org-agenda-include-diary t)

      ;; Include the last few days in the agenda by default
      ;; Switch w to get a week a agenda
      (setopt org-agenda-span 2)

      ;; http://doc.norang.ca/org-mode.html#CustomAgendaViewFiltering
      (defun thao/org-auto-exclude-function (tag)
        "Automatic task exclusion in the agenda with / RET"
        (and (cond
              ((string= tag "hold")
               t))
             (concat "-" tag)))
      (setopt org-agenda-auto-exclude-function 'thao/org-auto-exclude-function)
      )
    #+end_src

*** Org-Superagenda
    #+begin_src emacs-lisp
    (use-package org-super-agenda
      :after org-agenda
      :config
      (setopt org-super-agenda-groups
            '(;; Each group has an implicit boolean OR operator between its selectors.

              (:name "Items to Refile"
                     :and(:tag "REFILE" :date t)
                     :and(:tag "INBOX" :date t)
                     :order 0)
              (:name "Next to do"
                     :todo "NEXT"
                     :order 1)
              (:name "Due Today"
                     :deadline today
                     :order 0)
              (:name "Due Soon"
                     :deadline future
                     :order 10)
              (:name "Habits/Routines"
                     :habit t
                     :category "Routine"
                     :order 7)
              (:name "Meetings"
                     :time-grid t
                     :and(:date today
                                :todo("MEETING"))
                     :and(:date today
                                :tag "MEETING")
                     :order 1)
              (:name "Work tasks"
                     :time-grid t
                     :and (:tag "work"
                                :todo t
                                :scheduled today
                                :not(:todo ("MEETING"))
                                :not(:tag "MEETING"))
                     ;; Add any work catergories here
                     :and (:category "Jolla" :todo t :scheduled today)
                     :and (:category "Daimler" :todo t :scheduled today)
                     :order 2)
              (:name "Deferred work tasks"
                     :and (:tag "work" :not (:todo ("CNCL" "DONE")) :scheduled past)
                     ;; Add any work catergories here
                     :and (:category "Jolla" :not (:todo ("CNCL" "DONE")) :scheduled past)
                     :and (:category "Daimler" :not (:todo ("CNCL" "DONE")) :scheduled past)
                     :order 3)
              (:name "Information about today"
                     :category "Sunrise" ;; FIXME use geo
                     :category "Day info"
                     :order 9)
              (:name "Personal tasks"
                     :and (:not (:tag "work"))
                     :scheduled today
                     :order 4)
              (:name "Deferred personal tasks"
                     :and (:not (:todo ("CNCL" "DONE")) :scheduled past)
                     :order 5)
              (:name "Done today"
                     :and (:todo ("CANCELLED" "DONE")) :log t)
              (:name "Clocked today"
                     :log t)))

      ;;        :order 9)  ; Items that have this TODO keyword
      ;; (:name "Important"
      ;;        ;; Single arguments given alone
      ;;        ;;:tag "bills"
      ;;        :priority "A"
      ;;        )
      ;; ;; Groups supply their own section names when none are given
      ;; (:name "Waiting for"
      ;;        :todo "WAITING"
      ;;        :order 8)  ; Set order of this section
      ;; (:todo ("DONE")
      ;;        :order 9)
      ;; (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING" "DONE")
      ;;        ;; Show this group at the end of the agenda (since it has the
      ;;        ;; highest number). If you specified this group last, items
      ;;        ;; with these todo keywords that e.g. have priority A would be
      ;;        ;; displayed in that group instead, because items are grouped
      ;;        ;; out in the order the groups are listed.
      ;;        :order 9)
      ;; (:priority<= "B"
      ;;              ;; Show this section after "Today" and "Important", because
      ;;              ;; their order is unspecified, defaulting to 0. Sections
      ;;              ;; are displayed lowest-number-first.
      ;;              :order 1)
      ;; ;; After the last group, the agenda will display items that didn't
      ;; ;; match any of these groups, with the default order position of 99
      ;; ))
      (org-super-agenda-mode)
      )
    #+end_src

*** Org-Babel
    #+begin_src emacs-lisp
    (use-package ob
      :defer t
      :init
      ;; display/update images in the buffer after I evaluate
      (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
      :config
                                            ; don't prompt me to confirm every time I want to evaluate a block
      (setopt org-confirm-babel-evaluate nil)

      (defun org-babel-restart-session-to-point (&optional arg)
        "Restart session up to the src-block in the current point.
    Goes to beginning of buffer and executes each code block with
    `org-babel-execute-src-block' that has the same language and
    session as the current block. ARG has same meaning as in
    `org-babel-execute-src-block'."
        (interactive "P")
        (unless (org-in-src-block-p)
          (error "You must be in a src-block to run this command"))
        (let* ((current-point (point-marker))
               (info (org-babel-get-src-block-info))
               (lang (nth 0 info))
               (params (nth 2 info))
               (session (cdr (assoc :session params))))
          (save-excursion
            (goto-char (point-min))
            (while (re-search-forward org-babel-src-block-regexp nil t)
              ;; goto start of block
              (goto-char (match-beginning 0))
              (let* ((this-info (org-babel-get-src-block-info))
    	             (this-lang (nth 0 this-info))
    	             (this-params (nth 2 this-info))
    	             (this-session (cdr (assoc :session this-params))))
    	        (when
    	            (and
    	             (< (point) (marker-position current-point))
    	             (string= lang this-lang)
    	             (src-block-in-session-p session))
    	          (org-babel-execute-src-block arg)))
              ;; move forward so we can find the next block
              (forward-line)))))

      (defun org-babel-kill-session ()
        "Kill session for current code block."
        (interactive)
        (unless (org-in-src-block-p)
          (error "You must be in a src-block to run this command"))
        (save-window-excursion
          (org-babel-switch-to-session)
          (kill-buffer)))

      (defun org-babel-remove-result-buffer ()
        "Remove results from every code block in buffer."
        (interactive)
        (save-excursion
          (goto-char (point-min))
          (while (re-search-forward org-babel-src-block-regexp nil t)
            (org-babel-remove-result))))


      ;; this adds a "new language" in babel that gets exported as js in html
      ;; https://www.reddit.com/r/orgmode/comments/5bi6ku/tip_for_exporting_javascript_source_block_to/
      (add-to-list 'org-src-lang-modes '("inline-js" . javascript))
      (defvar org-babel-default-header-args:inline-js
        '((:results . "html")
          (:exports . "results")))
      (defun org-babel-execute:inline-js (body _params)
        (format "<script type=\"text/javascript\">\n%s\n</script>" body))

      (setopt org-plantuml-jar-path "/usr/share/java/plantuml.jar")

      ;; add all languages to org mode
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((C . t)
         ;;(R . t)
         (abap)
         (asymptote)
         (awk)
         ;;   (calc . t)
         (clojure . t)
         (comint)
         (css)
         (ditaa . t)
         (dot . t)
         (emacs-lisp . t)
         (fortran)
         (gnuplot . t)
         (haskell)
         (io)
         (java)
         (js . t)
         (latex)
         ;; (ledger . t)
         (lilypond)
         (lisp)
         (lua . t)
         (matlab)
         (maxima)
         (mscgen)
         (ocaml)
         (octave . t)
         (org . t)
         (perl)
         (picolisp)
         (plantuml . t)
         (python . t)
         ;;    (restclient . t)
         (ref)
         (ruby)
         (sass)
         (scala)
         (scheme)
         (screen)
         (shell . t)
         (shen)
         (snippet)
         (sql . t)
         (sqlite . t)))
      ;; jupyter should be the last element as it depends on other lang-modes.
      ;; See jupyter readme for more info.
      ;;(jupyter . t)))

      ;; Load personal library of babel
      ;;(org-babel-lob-ingest (no-littering-expand-etc-file-name "library-of-babel.org")))
      )
    #+end_src

*** Org-src
    #+begin_src emacs-lisp
    (use-package org-src
      :defer t
      :init
      (put 'org-src-preserve-indentation 'safe-local-variable 'booleanp)
      :config
      ;; Always split babel source window below.
      ;; Alternative is `current-window' to don't mess with window layout at all
      (setopt org-src-window-setup 'split-window-below)

      (setopt org-src-fontify-natively t)  ; syntax highlighting for source code blocks

      ;; Tab should do indent in code blocks
      (setopt org-src-tab-acts-natively t)

      ;; Don't remove (or add) any extra whitespace
      (setopt org-src-preserve-indentation nil)
      (setopt org-edit-src-content-indentation 0)

    ;;; Some helper function to manage org-babel sessions

      (defun src-block-in-session-p (&optional name)
        "Return if src-block is in a session of NAME.
    NAME may be nil for unnamed sessions."
        (let* ((info (org-babel-get-src-block-info))
               ;;(lang (nth 0 info))
               ;;(body (nth 1 info))
               (params (nth 2 info))
               (session (cdr (assoc :session params))))

          (cond
           ;; unnamed session, both name and session are nil
           ((and (null session)
                 (null name))
            t)
           ;; Matching name and session
           ((and
             (stringp name)
             (stringp session)
             (string= name session))
            t)
           ;; no match
           (t nil))))

      ;; dot == graphviz-dot
      (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))

      ;; Add 'conf-mode' to org-babel
      (add-to-list 'org-src-lang-modes '("ini" . conf))
      (add-to-list 'org-src-lang-modes '("conf" . conf))

      (add-to-list 'org-src-lang-modes '("web" . web))
      (define-derived-mode web-django-mode web-mode "WebDjango"
        "Major mode for editing web-mode django templates."
        (web-mode)
        (web-mode-set-engine "django")))
    #+end_src

*** Org-Modern
    #+begin_src emacs-lisp
    (use-package org-modern
      :hook ((org-mode . org-modern-mode)
             (org-agenda-finalize . org-modern-agenda))
      :config
      (modify-all-frames-parameters
       '((right-divider-width . 2)
         (internal-border-width . 0)))

      (setopt org-modern-todo-faces org-todo-keyword-faces)
      ;;(setopt org-modern-star ["â¶" "â·" "â¸" "â¹" "âº" "â»" "â¼"])
      )
    #+end_src

*** Org-Capture
    #+begin_src emacs-lisp :noweb no
    (use-package org-protocol :after org)
    ;; org-capture chrome plugin: https://chrome.google.com/webstore/detail/org-capture/kkkjlfejijcjgjllecmnejhogpbcigdc?hl=en

    (use-package org-capture
      :bind ("C-c c c" . org-capture)
      :config
      ;; https://github.com/sprig/org-capture-extension/blob/master/README.md?plain=1#L227
      (defun transform-square-brackets-to-round-ones(string-to-transform)
        "Transforms [ into ( and ] into ), other chars left unchanged."
        (concat
         (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c)))
                 string-to-transform)))

      ;; I don't want that org-capture rearanges the windows for me.
      ;; From https://stackoverflow.com/questions/54192239/open-org-capture-buffer-in-specific-window/54251825#54251825
      (defun org-capture-place-template-dont-delete-windows (oldfun args)
        (cl-letf (((symbol-function 'delete-other-windows) 'ignore))
          (apply oldfun args)))
      (advice-add 'org-capture-place-template :around 'org-capture-place-template-dont-delete-windows)

      ;; Do *NOT* bookmark to the last location when capturing
      (setopt org-capture-bookmark nil)

      ;; Capture/refile new items to the top of the list
      (setopt org-reverse-note-order t)
      ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
      (setopt org-capture-templates
            `(("t" "todo" entry (file ,(concat (car org-directory) "/refile.org"))
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal entry")
              ("jj" "Journal entry" entry (file+olp+datetree ,(concat (car org-directory) "/journal.org"))
               "* %?\n")
              ("jw" "Jolla journal entry" entry (file+olp+datetree ,(concat (car org-directory) "/jolla.org") "Journal")
               "* %?\n")
              ("jJ" "Journal with link" entry (file+olp+datetree ,(concat (car org-directory) "/journal.org"))
               "* %?\n%a\n")
              ("r" "respond" entry (file ,(concat (car org-directory) "/refile.org"))
               "* TODO Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file ,(concat (car org-directory) "/refile.org"))
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file ,(concat (car org-directory) "/refile.org"))
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
              ("m" "Meeting" entry (file ,(concat (car org-directory) "/refile.org"))
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file ,(concat (car org-directory) "/refile.org"))
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file ,(concat (car org-directory) "/refile.org"))
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("p" "Protocol" entry (file ,(concat (car org-directory) "/refile.org"))
               "* %^{Title}\nSource: [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
              ("L" "Protocol Link" entry (file ,(concat (car org-directory) "/refile.org"))
               "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")
              ("w" "Web site" entry (file "")
               "* %a :website:\n\n%U %?\n\n%:initial")
              ("b" "Bugs")
              ("bj" "Work on Jolla Bug" entry
               (file+olp ,(expand-file-name
                           (concat (car org-directory) "/jolla.org"))
                         "Bugs")
               (file ,(no-littering-expand-etc-file-name "org/templates/jb.org"))
               :clock-in t :clock-resume t)
              )))

    ;; FIXME: install bookmarklet and shell script (integrate with org-capture plugin?!)
    (use-package org-protocol-capture-html
      :disabled t  ; Useful but never used since bookmarklet not configured yet
      :after org-capture)
    #+end_src

*** Org-clock
    Script to be called by either polybar, Kargos or Argos.
    Uses lisp helper further down the line.
    #+begin_src sh :tangle no
    #!/bin/sh

    clock_message=$(emacsclient -e '(thao/org-clock-get-clock-string-no-face)' | cut -d '"' -f 2)

    if [ ! "$clock_message" = 'nil' ] ; then
        echo ${clock_message} \| iconName=clock
    else
        echo \| iconName=clock
    fi
    #+end_src

    #+begin_src emacs-lisp
    ;;; Clock Setup
    (use-package org-clock
      :after org
      :init

      (defun thao/org-clock-get-clock-string-no-face ()
        ;; Call org-clock-get-clock-string without properties for use in xbar/Kargos
        (if (org-clock-is-active)
            (org-no-properties (org-clock-get-clock-string))))

      ;; FIXME: remove unused bh functions?
      (setopt bh/keep-clock-running nil)

      (defun bh/clock-in-last-task (arg)
        "Clock in the interrupted task if there is one
    Skip the default task and get the next one.
    A prefix arg forces clock in of the default task."
        (interactive "p")
        (let ((clock-in-to-task
               (cond
                ((eq arg 4) org-clock-default-task)
                ((and (org-clock-is-active)
                      (equal org-clock-default-task (cadr org-clock-history)))
                 (caddr org-clock-history))
                ((org-clock-is-active) (cadr org-clock-history))
                ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
                (t (car org-clock-history)))))
          (widen)
          (org-with-point-at clock-in-to-task
            (org-clock-in nil))))

      (defun bh/clock-in-to-next (kw)
        "Switch a task from TODO to NEXT when clocking in.
    Skips capture tasks, projects, and subprojects.
    Switch projects and subprojects from NEXT back to TODO"
        (when (not (and (boundp 'org-capture-mode) org-capture-mode))
          (cond
           ((and (member (org-get-todo-state) (list "TODO"))
                 (bh/is-task-p))
            "NEXT")
           ((and (member (org-get-todo-state) (list "NEXT"))
                 (bh/is-project-p))
            "TODO"))))

      (defun bh/find-project-task ()
        "Move point to the parent (project) task if any"
        (save-restriction
          (widen)
          (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
            (while (org-up-heading-safe)
              (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
                (setopt parent-task (point))))
            (goto-char parent-task)
            parent-task)))

      (defun bh/punch-in (arg)
        "Start continuous clocking and set the default task to the
    selected task.  If no task is selected set the Organization task
    as the default task."
        (interactive "p")
        (setopt bh/keep-clock-running t)
        (if (equal major-mode 'org-agenda-mode)
            ;;
            ;; We're in the agenda
            ;;
            (let* ((marker (org-get-at-bol 'org-hd-marker))
                   (tags (org-with-point-at marker (org-get-tags))))
              (if (and (eq arg 4) tags)
                  (org-agenda-clock-in '(16))
                (bh/clock-in-organization-task-as-default)))
          ;;
          ;; We are not in the agenda
          ;;
          (save-restriction
            (widen)
                                            ; Find the tags on the current task
            (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
                (org-clock-in '(16))
              (bh/clock-in-organization-task-as-default)))))

      (defun bh/punch-out ()
        (interactive)
        (setopt bh/keep-clock-running nil)
        (when (org-clock-is-active)
          (org-clock-out))
        (org-agenda-remove-restriction-lock))

      (defun bh/clock-in-default-task ()
        (save-excursion
          (org-with-point-at org-clock-default-task
            (org-clock-in))))

      (defun bh/clock-in-parent-task ()
        "Move point to the parent (project) task if any and clock in"
        (let ((parent-task))
          (save-excursion
            (save-restriction
              (widen)
              (while (and (not parent-task) (org-up-heading-safe))
                (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
                  (setopt parent-task (point))))
              (if parent-task
                  (org-with-point-at parent-task
                    (org-clock-in))
                (when bh/keep-clock-running
                  (bh/clock-in-default-task)))))))

      (defvar bh/organization-task-id "f2088c3f-8452-4221-b63e-fbd9fb83089f")

      (defun bh/clock-in-organization-task-as-default ()
        (interactive)
        (org-with-point-at (org-id-find bh/organization-task-id 'marker)
          (org-clock-in '(16))))

      (defun bh/clock-out-maybe ()
        (when (and bh/keep-clock-running
                   (not org-clock-clocking-in)
                   (marker-buffer org-clock-default-task)
                   (not org-clock-resolving-clocks-due-to-idleness))
          (bh/clock-in-parent-task)))

      (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

      :config
      ;; Install `xprintidle' to get idle time over all X11. Otherwise it's only Emacs idle time.
      (setopt org-clock-idle-time 35)  ; idle after 35 minutes

      ;;(setopt org-clock-continuously t)  ; Start clocking from the last clock-out time, if any.

      ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
      (setopt org-clock-history-length 30)

      ;; Save the running clock and all clock history when exiting Emacs, load it on startup
      (setopt org-clock-persist t)
      (org-clock-persistence-insinuate)

      ;; org-clock-display (C-c C-x C-d) shows times for this month by default
      (setopt org-clock-display-default-range 'thismonth)

      ;; Only show the current clocked time in mode line (not all)
      (setopt org-clock-mode-line-total 'current)

      ;; Don't show modeline - display in i3status bar instead
      (setopt org-clock-clocked-in-display nil)

      ;; Clocktable (C-c C-x C-r) defaults
      ;; Use fixed month instead of (current-month) because I want to keep a table for each month
      (setopt org-clock-clocktable-default-properties
            `(:block ,(format-time-string "%Y-%m") :scope file-with-archives))

      ;; Clocktable (reporting: r) in the agenda
      (setopt org-clocktable-defaults
            '(:maxlevel 3 :lang "en" :scope file-with-archives
                        :wstart 1 :mstart 1 :tstart nil :tend nil :step nil :stepskip0 t :fileskip0 t
                        :tags nil :emphasize nil :link t :narrow 70! :indent t :formula nil :timestamp nil
                        :level nil :tcolumns nil :formatter nil))

      ;; Resume clocking task on clock-in if the clock is open
      (setopt org-clock-in-resume t)
      ;; Change tasks to NEXT when clocking in
      ;;(setopt org-clock-in-switch-to-state 'bh/clock-in-to-next)

      ;; Separate drawers for clocking and logs
      ;;(setopt org-drawers (quote ("PROPERTIES" "LOGBOOK")))

      ;; Save clock data and state changes and notes in the LOGBOOK drawer
      (setopt org-clock-into-drawer t)
      ;; Log all State changes to drawer
      (setopt org-log-into-drawer t)
      ;; make time editing use discrete minute intervals (no rounding) increments
      (setopt org-time-stamp-rounding-minutes (quote (1 1)))
      ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
      (setopt org-clock-out-remove-zero-time-clocks t)
      ;; Don't clock out when moving task to a done state
      (setopt org-clock-out-when-done nil)

      ;; Enable auto clock resolution for finding open clocks
      (setopt org-clock-auto-clock-resolution (quote when-no-clock-is-running))
      ;; Include current clocking task in clock reports
      (setopt org-clock-report-include-clocking-task t))
    #+end_src

*** Org-Clock-Helpers: Past clock insertion helpers
    :PROPERTIES:
    :CREATED:  [2024-03-09 Sat 02:58]
    :END:
    #+begin_src emacs-lisp
    (use-package org-clock-helpers
      :after org
      :bind (:map org-mode-map
                  ("C-c q " . org-insert-past-clock))
      :hook (org-trigger . org-clock-helpers-insert-appt-clock))

    #+end_src

*** Org-habit: Track habits
    #+begin_src emacs-lisp
    (use-package org-habit
      :after org)
    #+end_src

*** Org-man: Make org-links work with man pages
    #+begin_src emacs-lisp
    (use-package ol-man
      :after org
      :config
      (setopt org-man-command 'man))  ; open org-link man pages with woman
    #+end_src

*** Org-expiry: Automatically add a CREATED property when inserting a new headline
    #+begin_src emacs-lisp
    (use-package org-expiry
      :after org
      :config
      (setopt org-expiry-inactive-timestamps t)
      (org-expiry-insinuate))
    #+end_src

*** Org-id: Create ID property with new task
    #+begin_src emacs-lisp
    (use-package org-id
      :after org
      :config (setopt org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))
    #+end_src

*** Org-Pomodoro
    Script to be called by either polybar, Kargos or Argos.
    Uses lisp helper further down the line.
    #+begin_src sh :tangle no
    #!/bin/sh
    #underline_color="u#99c2ff"
    underline_color="%{u#99c2ff}%{+u}"
    pomo_message=$(emacsclient -e '(thao/org-pomodoro-time)' | cut -d '"' -f 2)
    if [ ! "$pomo_message" = 'nil' ] ; then
        echo ${pomo_message} \| iconName=ktimetracker
    else
        echo \| iconName=ktimetracker
    fi
    #+end_src

    #+begin_src emacs-lisp
    (use-package org-pomodoro
      :defer t
      :after org
      :init
      ;; called with i3status-rs in ~/.config/i3/status.toml with
      ;; command = "emacsclient --eval '(dakra/org-pomodoro-i3-bar-time)' || echo 'Emacs daemon not started'"
      (require 'org-pomodoro)
      (defun dakra/org-pomodoro-i3-bar-time ()
        "Display remaining pomodoro time in i3 status bar."
        (if (org-pomodoro-active-p)
            (format "Pomodoro: %d minutes - %s" (/ org-pomodoro-countdown 60)
                    org-clock-heading)
          (if (org-clock-is-active)
              (org-no-properties (org-clock-get-clock-string))
            "No active pomodoro or task")))
      ;; https://colekillian.com/posts/org-pomodoro-and-polybar/
      (defun thao/org-pomodoro-time ()
        "Return the remaining pomodoro time"
        (if (org-pomodoro-active-p)
            (cl-case org-pomodoro-state
              (:pomodoro
               (format "Pomo: %d minutes - %s"
                       (/ (org-pomodoro-remaining-seconds) 60)
                       org-clock-heading))
              (:short-break
               (format "Short break time: %d minutes"
                       (/ (org-pomodoro-remaining-seconds) 60)))
              (:long-break
               (format "Long break time: %d minutes"
                       (/ (org-pomodoro-remaining-seconds) 60)))
              (:overtime
               (format "Overtime! %d minutes"
                       (/ (org-pomodoro-remaining-seconds) 60))))
          nil))

      :config
      ;; Don't delete already clocked time when killing a running pomodoro
      (setopt org-pomodoro-keep-killed-pomodoro-time t)
      ;; Never clock-out automatically
      (setopt org-pomodoro-clock-always t))

    #+end_src

*** Org-Export
    #+begin_src emacs-lisp
    (use-package ox
      :after org
      :commands org-formatted-copy
      ;;:bind ("C-c e" . org-formatted-copy)
      :config
      ;; By default only export subtree instead of whole buffer
      (setopt org-export-initial-scope 'subtree)

      ;; Don't evaluate babel source blocks during export
      (setopt org-export-use-babel nil)

      ;; copy org text as rich text
      (defun org-formatted-copy ()
        "Export region to HTML, and copy it to the clipboard."
        (interactive)
        (save-window-excursion
          (let* ((buf (org-export-to-buffer 'html "*Formatted Copy*" nil nil t t))
    	         (_html (with-current-buffer buf (buffer-string))))
            (with-current-buffer buf
              (shell-command-on-region
               (point-min)
               (point-max)
               "xclip -selection clipboard -t 'text/html' -i"))
            (kill-buffer buf))))

      ;; FIXME: This is only a hack as I do NOT want the tags INSIDE the h3 title tag
      (defun my-hack-org-html-format-headline-function
          (todo _todo-type priority text tags info)
        "Default format function for a headline.
    See `org-html-format-headline-function' for details."
        (let ((todo (org-html--todo todo info))
              (priority (org-html--priority priority info))
              (tags (org-html--tags tags info)))
          (concat todo (and todo " ")
    	          priority (and priority " ")
    	          text
    	          (and tags "&#xa0;&#xa0;&#xa0;</h3><p>") tags (and tags "</p><h3>"))))
      (setopt org-html-format-headline-function #'my-hack-org-html-format-headline-function)
      ;; Use html5 as org export and use new tags (I don't care about browsers <=IE8)
      (setopt org-html-doctype "html5")
      (setopt org-html-html5-fancy t)
      ;; Don't add html footer to export
      (setopt org-html-postamble nil)
      ;; Don't export ^ or _ as super/subscripts
      (setopt org-export-with-sub-superscripts nil))

    (use-package ox-extra
      :after ox
      :config
      (ox-extras-activate '(ignore-headlines))
      (ox-extras-activate '(latex-header-blocks)))

    (use-package ox-latex
      :after ox
      :after ox-extra
      :config
      (setopt org-latex-default-packages-alist
            (quote
             (("AUTO" "inputenc" t
               ("pdflatex"))
              ("T1" "fontenc" t
               ("pdflatex"))
              ("" "graphicx" t nil)
              ("" "longtable" nil nil)
              ("" "wrapfig" nil nil)
              ("" "rotating" nil nil)
              ("normalem" "ulem" t nil)
              ("" "amsmath" t nil)
              ("" "textcomp" t nil)
              ("" "amssymb" t nil)
              ("" "capt-of" nil nil)
              ("" "hyperref" nil nil))))
      (setopt org-latex-src-block-backend 'minted)
      (add-to-list 'org-latex-packages-alist '("" "minted"))
      (setopt org-latex-pdf-process
            '("xelatex -shell-escape -interaction nonstopmode %f"
              "xelatex -shell-escape -interaction nonstopmode %f"))
      (setopt org-latex-compiler "xelatex"))

    (use-package ox-koma-letter
      :after ox-latex
      :config
      (add-to-list 'org-latex-classes
    	           '("my-letter"
    	             "\\documentclass\{scrlttr2\}
     \\usepackage[ngerman]{babel}
     \\setkomavar{frombank}{(1234)\\,567\\,890}
     \[DEFAULT-PACKAGES]
     \[PACKAGES]
     \[EXTRA]"))
      (setq org-koma-letter-default-class "my-letter"))
    #+end_src

*** Org-Caldav
    #+begin_src emacs-lisp
    (use-package org-caldav
      :after org
      :config
      (setopt org-caldav-sync-todo t)
      (setopt org-caldav-todo-percent-states '((0 "TODO")
                                               (1 "NEXT")
                                               (2 "STARTED")
                                               (0 "WAITING")
                                               (0 "HOLD")
                                               (100 "CANCELLED")
                                               (100 "DONE")))
      (setopt org-caldav-sync-changes-to-org t)
      (setopt org-icalendar-timezone "Europe/Helsinki")
      (setopt org-icalendar-include-todo (cl-loop for (x y) in org-caldav-todo-percent-states collect y))
      ;; Don't sync entries which are transient and have thus no use outside of org-mode
      (setopt org-caldav-exclude-tags '("Dayinfo"))
      (setopt org-caldav-save-directory (car org-directory))
      <<org_caldav_private>>)
    #+end_src

*** Orgit: org-link support for magit buffers
    #+begin_src emacs-lisp
    (use-package orgit
      ;; Automatically copy orgit link to last commit after commit
      :hook (git-commit-post-finish . orgit-store-after-commit)
      :config
      (defun orgit-store-after-commit ()
        "Store orgit-link for latest commit after commit message editor is finished."
        (let* ((repo (abbreviate-file-name default-directory))
               (rev (magit-git-string "rev-parse" "HEAD"))
               (link (format "orgit-rev:%s::%s" repo rev))
               (summary (substring-no-properties (magit-format-rev-summary rev)))
               (desc (format "%s (%s)" summary repo)))
          (push (list link desc) org-stored-links)))
      (setopt orgit-rev-description-format "%%R %s (%%N)"))
    #+end_src

    Forge support for orgit
    #+begin_src emacs-lisp
    (use-package orgit-forge
      :after orgit)
    #+end_src

*** Helm-Org-Rifle: Rifle through your Org files

    #+begin_src emacs-lisp
    (use-package helm-org-rifle
      :after helm-source
      :bind (
             ("C-c g o" . helm-org-rifle)
             ("C-c g f" . helm-org-rifle-current-buffer)
             ("C-c g d" . helm-org-rifle-directories)
             ("C-c g F" . helm-org-rifle-files)
             ("C-c g a" . helm-org-rifle-agenda-files))
      :config
      (setopt helm-org-rifle-show-path t))
    #+end_src

*** Org-edit-indirect:
    #+begin_src emacs-lisp
    (use-package org-edit-indirect
      :defer t
      :hook (org-mode . org-edit-indirect-mode))
    #+end_src

*** Ical2Org
        #+begin_src emacs-lisp
        (use-package ical2org)
        #+end_src

** Po-Mode: Edit GNU gettext PO files
   :PROPERTIES:
   :CREATED:  [2023-10-16 Mon 00:23]
   :END:
   #+begin_src emacs-lisp
   (use-package po-mode
     :mode "\\.po\\'"
     :config
     (if pop-up-frames
         ;; delete-frame when using popup frames is used
         (defun thao/po-subedit-kill-frame ()
           "Delete frame after exiting when finishing `(po-subedit)'"
           (delete-frame))
       (defun thao/po-subedit-abort-kill-frame ()
         "Delete frame  when aborting in `(po-subedit)'"
         (when (equal this-command #'po-subedit-abort)
           (delete-frame)))
       (advice-add #'po-subedit-exit :after #'thao/po-subedit-kill-frame)
       (advice-add #'po-subedit-abort :after #'thao/po-subedit-abort-kill-frame)))
   #+end_src

** CSV
   :PROPERTIES:
   :CREATED:  [2024-10-11 Fri 12:45]
   :END:
   #+begin_src emacs-lisp
   (use-package csv-mode
     :mode ("\\.csv")
     :hook ((csv-mode . csv-align-mode))
     :config
     (setopt csv-separators '("," ";" ":")))


   (use-package rainbow-csv
     :hook ((csv-mode . rainbow-csv-mode)))
   #+end_src

* Chat/Socialmedia
  :PROPERTIES:
  :CREATED:  [2024-07-18 Thu 21:58]
  :END:

** Circe

*** Base-Setup
    #+begin_src emacs-lisp
    (use-package circe
      :config
      (defun circe--ident (username network)
        (format "%s^%s" username network))
      (defun circe--auth-source-get (keys &rest spec)
        (declare (indent 1))
        (let ((plist (car (apply #'auth-source-search
                 (append spec (list :max 1))))))
      (mapcar (lambda (k)
            (plist-get plist k))
          keys)))
      (defun circe-pass-get (host user &optional network)
        "Retrieve secrets for USER on HOST optionally for NETWORK."
        (auth-source-forget (list :host host :user user :max 1))
        (when network
      (setopt user (circe--ident user network)))
        (let ((match (car (circe--auth-source-get (list :secret)
                :host host :user user))))
      (cond ((null match)
         (error "Auth source empty for %s %s %s" host user network))
            ((functionp match)
         (funcall match)) (t match))))

      (defun circe-connect-all ()
        "Connect to all networks in `circe-network-options'"
        (interactive)
        (dolist (network-option circe-network-options)
          (circe (car network-option))))

      <<circe_base_private>>

      (setopt circe-reduce-lurker-spam t
        circe-format-self-say "<{nick}> {body}"
        circe-use-cycle-completion t
        circe-server-send-unknown-command-p t)
      (set-face-attribute 'circe-originator-face nil
                          :family "Hack"))

    (use-package circe-lagmon
      :hook ((circe-mode . circe-lagmon-mode)))
    #+end_src

*** Misc

    #+begin_src emacs-lisp
    (use-package circe-color-nicks
      :after circe
      :config
      (setopt circe-color-nicks-everywhere t)
      (enable-circe-color-nicks))
    #+end_src


    #+begin_src emacs-lisp
    (use-package circe-display-images
      :after circe
      :config
      (setopt circe-display-images-image-regex
        "\\(https?://[^ ]*?\\.\\(?:png\\|jpg\\|jpeg\\|svg\\|gif\\)[^\]\)>\"\' \n]*\\)"
        circe-display-images-animate-gifs t)
      (enable-circe-display-images))
    #+end_src

    #+begin_src emacs-lisp
    (use-package circe-notifications
      :after circe
      :config
      (add-hook 'circe-server-connected-hook 'enable-circe-notifications)
      (autoload 'enable-circe-notifications "circe-notifications" nil t)
      (eval-after-load "circe-notifications"
        '(setq circe-notifications-watch-strings
               '("Thaodan")
               circe-notifications-alert-style 'notifications-thao))
      (eval-after-load "circe-notifications"
        '(setq circe-notifications-alert-icon
               "/usr/share/icons/breeze-dark/mimetypes/22@2x/message.svg")))
    #+end_src

    #+begin_src emacs-lisp
    (use-package helm-circe
      :demand t
      ;; Handy to have a binding to helm-circe-new-activity
      :bind (("C-c C-x i" . helm-circe)
             ("C-c C-x n" . helm-circe-new-activity)
             ("C-c c i" . helm-circe)
             ("C-c c n" . helm-circe-new-activity)))
    #+end_src

*** Lui
    #+begin_src emacs-lisp
    (use-package lui
      :config
      (require 'company-dabbrev)
      (require 'company-emoji)
      (add-hook 'lui-mode-hook
                (lambda ()
    	           (make-local-variable 'company-backends)
    	           (add-to-list 'company-backends
    		                    '(company-capf :with company-dabbrev :with company-emoji))))

      ;; time stamps in margins
      (setq
       lui-time-stamp-position 'right-margin
       lui-time-stamp-format "%H:%M"
       lui-fill-type nil)
      (enable-lui-irc-colors)
      (unless (fboundp 'jinx-mode)
        (setopt lui-flyspell-p t))
      (setopt lui-formatting-list
            '(("\\(?:^\\|[[:space:]]\\)\\(\\*[^*[:space:]]+?\\*\\)\\(?:$\\|[[:space:]]\\)" 1
               lui-strong-face)
              ("\\(?:^\\|[[:space:]]\\)\\(_[^_[:space:]]+?_\\)\\(?:$\\|[[:space:]]\\)" 1
               lui-emphasis-face)))
      (defun my-lui-setup ()
        (setq
         fringes-outside-margins t
         right-margin-width 5
         word-wrap t
         wrap-prefix "    ")
        (setf (cdr (assoc 'continuation fringe-indicator-alist)) nil))
      (add-hook 'lui-mode-hook 'my-lui-setup))
    #+end_src

    #+begin_src emacs-lisp
    (use-package lui-track
      :after lui
      :config
      (setopt lui-track-behavior 'before-switch-to-buffer)
      (enable-lui-track))
    #+end_src

    #+begin_src emacs-lisp
    (use-package lui-logging
      :after lui
      :config
      (enable-lui-logging-globally)
      (setopt lui-logging-directory "~/logs"))
    #+end_src

    #+begin_src emacs-lisp
    (use-package tracking
      :init
      (setopt tracking-max-mode-line-entries 5)
      (setopt tracking-most-recent-first t)
      (setopt tracking-sort-faces-first t))
    #+end_src

** Mastodon
   #+begin_src emacs-lisp
      (use-package mastodon
        :bind (:map mastodon-mode-map
               ("q" . mastodon-kill-window))
        :config
        (setopt mastodon-toot--enable-custom-instance-emoj t
                mastodon-toot--use-company-for-completion t
                mastodon-toot-display-orig-in-reply-buffer t
                mastodon-toot-orig-in-reply-length 512
                mastodon-toot--proportional-fonts-compose t

                mastodon-tl--show-avatars t
                mastodon-tl--enable-proportional-fonts t
                mastodon-tl--timeline-posts-count "120"


                mastodon-media--avatar-height 48
                mastodon-media--preview-max-height 450)
       <<mastodon_private>>)

      (use-package mastodon-async)
   #+end_src

* Email/PIM
  :PROPERTIES:
  :CREATED:  [2024-07-18 Thu 21:55]
  :END:

** BBDB
   #+begin_src emacs-lisp
   (use-package bbdb
     :config
     (bbdb-initialize)
     (setopt bbdb-north-american-phone-numbers-p nil)
     ;; If non-nil, expand mail aliases in `bbdb-complete-name'.
     (setopt bbdb-expand-mail-aliases t)
     ;; If this is t (the default), then VM, MH, and RMAIL will automatically
     ;; create new bbdb records for people you receive mail from.
     ;; If this variable is a function name or lambda expression,
     ;; then it is called with no arguments to decide whether an entry should be automatically
     ;; created. You can use this to, for example,
     ;; not create records for messages which have reached you through a particular mailing list, or to only create records automatically if the mail has a particular subject.
     ;; See the variables bbdb-ignore-most-messages-alist and
     ;; bbdb-ignore-some-messages-alist (See section Predefined Hooks.)
     ;;(setopt bbdb/mail-auto-create-p t)
     (setopt bbdb-ignore-message-alist
           '(("From" . "donotreply")
             ("Mail-Followup-to" . "donotreply")
             ("Reply-to" . "donotreply")
             ("From" . "noreply")
             ("Mail-Followup-to" . "noreply")
             ("Reply-to" . "noreply")
             ("From" . "no-reply")
             ("Mail-Followup-to" . "no-reply")
             ("Reply-to" . "no-reply")
             ("From" . "no_reply")
             ("Mail-Followup-to" . "no_reply")
             ("Reply-to" . "no_reply"))))

   (use-package bbdb-gnus
     :hook (gnus-startup . bbdb-insinuate-gnus)
     :after gnus-score
     :config
     (setopt gnus-score-find-score-files-function '(gnus-score-find-bnews bbdb/gnus-score))
     (setopt bbdb/gnus-header-prefer-real-names t)
     (setopt bbdb/gnus-header-show-bbdb-names t)
     )

   (use-package bbdb-pgp
     :hook (message-send . bbdb-pgp))

   (use-package bbdb-message
     :hook (message-setup . bbdb-insinuate-message))

   (use-package bbdb-vcard
     :config
     (require 'xdg)
     (setopt bbdb-vcard-default-dir (expand-file-name (concat (xdg-data-home) "/contacts"))))
   #+end_src

** GNUs
   #+begin_src emacs-lisp
   (use-package gnus
     :after org
     :after smtpmail-async
     :after all-the-icons
     :init
     (setopt gnus-select-method '(nnnil ""))
     :hook ((messsage-sent . gnus-score-followup-thread))
     :config
     ;; Save newsrc.eld in ~/News
     (setopt gnus-startup-file (expand-file-name "newsrc" gnus-directory))
     (setopt gnus-use-cache t)
     (setopt gnus-cache-enter-articles '(ticked dormant unread))
     ;; Belongs to gnus-cache
     (setopt gnus-uncacheable-groups nil)
     ;; Belongs to gnus-start
     (setopt gnus-read-newsrc-file nil)
     (setopt gnus-select-method '(nnnil ""))
     (setopt gnus-refer-article-method
             '(current
               (nnregistry)
               (nnweb "google"
                      (nnweb-type google))))
     ;; (setopt gnus-secondary-select-methods '((nntp "Gmane"
     ;;                                             (nntp-address "news.gmane.io"))))

     ;;[[http://stackoverflow.com/questions/4982831/i-dont-want-to-expire-mail-in-gnus]]
     (setopt gnus-large-newsgroup 2000)

     ;; Belongs to gnus-start
     (setopt gnus-subscribe-newsgroup-method 'gnus-subscribe-topics)

     ;; Belongs to gnus-start
     (setopt gnus-check-new-newsgroups 'ask-server)
     ;; Belongs to gnus-uu
     (setopt gnus-asynchronous t)
     ;; gnus-async
     (setopt gnus-use-header-prefetch t)

     (setopt nnmail-split-methods nil)
     (setopt gnus-use-adaptive-scoring '(line))

     ;; Register handler to PrepareForSleep signal on org.freedesktop.login1.Manager
     ;; to close servers
     (setopt gnus-dbus-close-on-sleep t)

     ;; set gnus-parameter
     (setopt gnus-parameters
           '(("INBOX"
              (gnus-use-scoring t))
             ;; (display . all))
             ("list\\."
              (subscribed . t)
              (gcc-self . t))
             ("Gmane"
              (group-notify . t))))
     (defvar gnus-user-format-function-g-prev "" "")
     (defun empty-common-prefix (left right)
       "Given `left' '(\"foo\" \"bar\" \"fie\") and `right' '(\"foo\"
         \"bar\" \"fum\"), return '(\"   \" \"   \" \"fum\")."
       (if (and (cdr right)			; always keep the last part of right
                (equal (car left) (car right)))
           (cons (make-string (length (car left)) ? )
                 (empty-common-prefix (cdr left) (cdr right)))
         right))
     ;; (defun gnus-user-format-function-g (arg)
     ;;   "The full group name, but if it starts with a previously seen
     ;;   prefix, empty that prefix."
     ;;   (if (equal gnus-user-format-function-g-prev gnus-tmp-group) ; line-format is updated on exiting the summary, making prev equal this
     ;;       gnus-tmp-group
     ;;     (let* ((prev (split-string-and-unquote gnus-user-format-function-g-prev "\\."))
     ;;            (this (split-string-and-unquote gnus-tmp-group "\\.")))
     ;;       (setq gnus-user-format-function-g-prev gnus-tmp-group)
     ;;       (combine-and-quote-strings
     ;;        (empty-common-prefix prev this)
     ;;        "."))))
     ;;  (setq gnus-group-line-format "%M%S%p%P%5y:%B%(%ug%)\n")

     ;; FIXME: Handle private vs work invites.

     <<gnus_private>>
     )

   (use-package gnus-demon
     :after gnus
     :after gnus-group
     :hook (gnus-started . gnus-demon-init)
     :config
     (defun gnus-demon-scan-news-2 ()
       (when gnus-plugged
         (let ((win (current-window-configuration))
               (gnus-read-active-file nil)
               (gnus-check-new-newsgroups nil)
               (gnus-verbose 2)
               (gnus-verbose-backends 5))
           (unwind-protect
               (save-window-excursion
                 (when (gnus-alive-p)
                   (with-current-buffer gnus-group-buffer
                     (gnus-group-get-new-news))))
             (set-window-configuration win)))))

     (defun save-gnus-newsrc ()
       (if (and (fboundp 'gnus-group-exit)
                (gnus-alive-p))
           (with-current-buffer (get-buffer "*Group*")
             (gnus-save-newsrc-file))))
     (setopt gnus-demon-handlers '((gnus-demon-scan-mail 120 60)
                                   (gnus-demon-close-connections nil 3)
                                   (save-gnus-newsrc nil 1)
                                   (gnus-demon-scan-news-2 60 nil))))

   (use-package gnus-desktop-notify
     :config
     (defun thao/gnus-desktop-notify-dbus (body)
       "Generate a notification with BODY using `notifications'."
       (notifications-notify
        :title gnus-desktop-notify-send-subject
        :body body
        :app-icon "/usr/share/icons/breeze-dark/actions/32@2x/mail-unread-new.svg"
        ;; fixme ^ this could use the theme spec as mentioned in Freedesktop.org
        ;; Desktop Notifications Specification
        :desktop-entry notifications-application-name))
     (defun thao/gnus-desktop-notify-alert (body)
       "Generate a notification with BODY using `alert'."
       (alert body :title gnus-desktop-notify-send-subject
              :icon "/usr/share/icons/breeze-dark/actions/32@2x/mail-unread-new.svg"))
     (setopt gnus-desktop-notify-function 'thao/gnus-desktop-notify-alert)
     (setopt gnus-desktop-notify-behavior 'gnus-desktop-notify-single)
     (gnus-desktop-notify-mode))

   (use-package gnus-art
     :after gnus
     :config
     ;; Don't auto-expire articles
     (setopt gnus-inhibit-user-auto-expire t)

     (setopt gnus-article-over-scroll t)

     (setopt gnus-treat-mail-gravatar 'head)
     (setopt gnus-treat-from-gravatar 'head)

     ;; https://www.gnu.org/software/emacs/manual//html_node/gnus/Customizing-Articles.html
     (setopt gnus-article-date-headers 'combined-local-lapsed)

     ;;  (setopt gnus-show-mime t)

     (setopt gnus-treat-buttonize t               ; Add buttons
             gnus-treat-buttonize-head 'head      ; Add buttons to the head
             gnus-treat-emphasize t               ; Emphasize text
             gnus-treat-fill-article nil          ; Fill the article
             gnus-treat-strip-cr 'last            ; Remove carriage returns
             gnus-treat-hide-headers 'head        ; Hide headers
             gnus-treat-hide-boring-headers t ; -Hide boring headers
             gnus-treat-hide-signature nil        ; Hide the signature
             gnus-treat-hide-citation nil         ; Hide cited text
             ;; Deprecated.
             ;; gnus-treat-strip-pgp 'last     ; Strip PGP signatures
             gnus-treat-strip-pem 'last           ; Strip PEM signatures
             gnus-treat-highlight-headers 'head   ; Highlight
             ;; Highlight cited text
             ;; Note that `t' is the default setting
             ;; however I like to explicitly set it here
             gnus-treat-highlight-citation t
             gnus-treat-highlight-signature 'last ; Highlight the signature
             gnus-treat-date-ut nil               ; Display the Date in UT (GMT)
             gnus-treat-date-local t           ; Display the Date in the local timezone
             gnus-treat-date-original t        ; Display the date in the original
                                           ; timezone
             gnus-treat-display-x-face t
             gnus-treat-display-face t
             gnus-treat-display-smileys t
             gnus-treat-strip-trailing-blank-lines 'last ; Strip trailing blank lines
             gnus-treat-strip-leading-blank-lines 'last  ; Strip leading blank lines
             gnus-treat-strip-multiple-blank-lines 'last ; Strip multiple blank lines
             ;; gnus-treat-strip-blank-lines  nil            ; Strip all blank lines
             gnus-treat-overstrike 'last)


     ;; Mime
     (setopt gnus-ignored-mime-types '("text/x-vcard")
             gnus-buttonized-mime-types '("multipart/encrypted" "multipart/signed")
             gnus-unbuttonized-mime-types '("text/plain"))
     (setopt gnus-inhibit-images nil))

   (use-package gnus-agent
     :config
     (setopt gnus-agent-synchronize-flags 'always))

   (use-package gnus-msg
     :after gnus
     :config
     ;; Mark article as read on the server
     (setopt gnus-gcc-mark-as-read t)
     ;; Mark these groups are mailing-lists
     (setopt gnus-mailing-list-groups "\\`\\(list\\|wg21\\)\\."))

   (use-package gnus-score
     :config
     (setopt gnus-score-thread-simplify t))

   (use-package gnus-sum
     :after gnus
     :hook ((gnus-summary-mode . hl-line-mode)
            (gnus-summary-mode . thao/gnus-archive-to-refer-thread-search))
     :bind (:map gnus-summary-mode-map
                 ("M M d d" . thao/gnus-summary-mark-article-read))
     :config
     (defun thao/gnus-summary-mark-article-read()
       (interactive)
       (gnus-summary-mark-article nil gnus-read-mark))

     (defun thao/gnus-archive-to-refer-thread-search (&optional group)
       "Add the archive of GROUP to `gnus-refer-thread-use-search' list.
   If GROUP isn't given default to current group.
   If GROUP is a `nnselect' group add the archive of the group contained to list."
       (let* ((group (or group
                         gnus-newsgroup-name))
              (group-method (car (gnus-find-method-for-group group)))
              (group-method-byname (gnus-info-method (gnus-get-info group)))
              (group-server (if (stringp group-method-byname)
                                        group-method-byname
                                      (gnus-method-to-server group-method-byname)))
              (real-group (if (eq group-method
                                  'nnselect)
                              ;; In case we have a nnselect method
                              ;; take the name of the group used
                              ;; from the list element
                              ;; see: (info "(gnus) Selection Groups")
                              (car (car (gnus-group-get-parameter group
                                                                  'nnselect-artlist
                                                                  t)))
                            (gnus-info-group (gnus-get-info group))))
              (archive-group gnus-message-archive-group)
                                           ; taken from gnus-msg.el gnus
              result
              (groups
   	        (cond
   	         ((null gnus-message-archive-method)
   	          ;; Ignore.
   	          nil)
   	         ((stringp archive-group)
   	          ;; Just a single group.
   	          (list archive-group))
   	         ((null archive-group)
   	          ;; We don't want this.
   	          nil)
   	         ((and (listp archive-group) (stringp (car archive-group)))
   	          ;; A list of groups.
   	          archive-group)
   	         ((functionp archive-group)
   	          ;; A function.
   	          (funcall archive-group real-group))
   	         (real-group
   	          ;; An alist of regexps/functions/forms.
   	          (while (and archive-group
   			              (not
   			               (setq result
   			                     (cond
   				                  ((and real-group
   				                        (stringp (caar archive-group)))
   				                   ;; Regexp.
   				                   (when (string-match (caar archive-group) real-group)
   				                     (cdar archive-group)))
   				                  ((and real-group
   				                        (functionp (car archive-group)))
   				                   ;; Function.
   				                   (funcall (car archive-group) real-group))
   				                  (t
   				                   (eval (car archive-group) t))))))
   	            (setq archive-group (cdr archive-group)))
   	          result)))
              name)
         (when groups
           (make-local-variable 'gnus-refer-thread-use-search)
           (when (stringp groups)
             (setq groups (list groups)))
           (while (setq name (pop groups))
             (let* ((group-prefixed-name (if (string-search ":" name)
                                             name
                                           (gnus-group-prefixed-name name
                                                                     gnus-message-archive-method)))
                    (group-method (gnus-info-method (gnus-get-info group-prefixed-name)))
                    (group-server (if (stringp group-method)
                                      group-method
                                    (gnus-method-to-server group-method))))
               (cl-pushnew (list group-server group-prefixed-name) gnus-refer-thread-use-search :test #'equal)))
           ;; We have to add the curent group explicitly here see (Emacs Bug #75305):
           ;; https://mail.gnu.org/archive/html/bug-gnu-emacs/2025-01/msg00420.html
           ;; FIXME: use 'currrent when patch is merged.
           (cl-pushnew (list group-server group) gnus-refer-thread-use-search
                       :test #'equal))))


     ;; Non-nil means that Gnus will try build threads by grabbing old headers
     ;; (info "(gnus) Filling In Threads")
     (setopt gnus-fetch-old-headers t)

     ;; If non-nil, fill in the gaps in threads.
     (setopt gnus-build-sparse-threads t)

     ;; Threads and article sorting
     (define-key gnus-summary-mode-map "-" 'gnus-summary-hide-thread)
     (define-key gnus-summary-mode-map "+" 'gnus-summary-show-thread)

     ;; Also, I prefer to see only the top level message.  If a message has
     ;; several replies or is part of a thread, only show the first message.
     ;; `gnus-thread-ignore-subject' will ignore the subject and
     ;; look at 'In-Reply-To:' and 'References:' headers.
     (setopt gnus-thread-hide-subtree t)
     (setopt gnus-thread-ignore-subject t
             gnus-article-sort-functions '(gnus-article-sort-by-number)
             gnus-thread-sort-functions  '(gnus-thread-sort-by-number
                                           gnus-thread-sort-by-date))
     ;; ;; En plus :  trier les threads en fonctions de la  date la plus rÃ©cente
     (setopt gnus-thread-sort-functions
             '(gnus-thread-sort-by-number gnus-thread-sort-by-most-recent-date))

     (setopt gnus-subthread-sort-functions
             '(gnus-thread-sort-by-number gnus-thread-sort-by-date))
     (setopt gnus-sort-gathered-threads-function 'gnus-thread-sort-by-date)

     (setopt gnus-summary-gather-subject-limit 'fuzzy)

     ;; Gather read by reference, TODO: fix loose threads
     (setopt gnus-summary-thread-gathering-function 'gnus-gather-threads-by-references)


     ;; Override  âgnus-summary-gather-subject-limitâ with the list functions below
     ;; which are applied to the âSubjectâ
     (setopt gnus-simplify-subject-functions '(gnus-simplify-subject-re ;; Strip the leading âRe:â.
                                               ))

     ;; Keep old summary around after leaving in case I go back
     ;; for example after building a thread using refer thread
     (setopt gnus-kill-summary-on-exit nil)

     ;; Summary formatting

     ;; eye candy
     (copy-face 'font-lock-variable-name-face 'gnus-face-6)
     (setopt gnus-face-6 'gnus-face-6)
     (copy-face 'font-lock-constant-face 'gnus-face-7)
     (setopt gnus-face-7 'gnus-face-7)
     (copy-face 'gnus-face-7 'gnus-summary-normal-unread)
     (copy-face 'font-lock-constant-face 'gnus-face-8)
     (set-face-foreground 'gnus-face-8 "gray50")
     (setopt gnus-face-8 'gnus-face-8)
     (copy-face 'font-lock-constant-face 'gnus-face-9)
     (set-face-foreground 'gnus-face-9 "gray70")
     (setopt gnus-face-9 'gnus-face-9)
     (setopt gnus-summary-make-false-root 'dummy)
     (setopt gnus-summary-make-false-root-always nil)

     ;; (setopt gnus-summary-line-format "%8{%4kâ%}%9{%U%R%z%}%8{â%}%*%(%-23,23f%)%7{â%} %6{%B%} %s\n"
     ;;      gnus-summary-same-subject  ""
     ;;     gnus-summary-dummy-line-format "    %8{â%}   %(%8{â%}                       %7{â%}%) %6{ââ%}  %S\n"
     ;;     gnus-sum-thread-tree-indent " "
     ;;     gnus-sum-thread-tree-root "ââ "
     ;;     gnus-sum-thread-tree-false-root " â "
     ;;     gnus-sum-thread-tree-single-indent " â "
     ;;     gnus-sum-thread-tree-leaf-with-other "â£âââ¯ "
     ;;     gnus-sum-thread-tree-vertical "â"
     ;;     gnus-sum-thread-tree-single-leaf "ââââ¯ ")

     ;; fancy summary
     ;;(setopt gnus-summary-line-format "%U|%R|%z|%ur|%(%-20&user-date;|%-30B%[%5L: %-40n%] %s%)\n")
     (setopt gnus-summary-make-false-root 'dummy
             gnus-sum-thread-tree-false-root      "âââº"
             gnus-sum-thread-tree-single-indent   "â   "
             gnus-sum-thread-tree-root            "â   "
             gnus-sum-thread-tree-vertical        "â   "
             gnus-sum-thread-tree-leaf-with-other "âââº"
             gnus-sum-thread-tree-single-leaf     "â°ââº"
             gnus-sum-thread-tree-indent          "    ")


     (setopt gnus-user-date-format-alist
             `(((gnus-seconds-today)
                . ,(concat (propertize ;(all-the-icons-faicon "calendar" :v-adjust -0.01)
                            (all-the-icons-material "date_range")
                            'display '(raise 0.0)) " Today, %H:%M"))
               ((+ 86400
                   (gnus-seconds-today))
                . ,(concat
                    (propertize ;(all-the-icons-faicon "calendar" :v-adjust -0.01)
                     (all-the-icons-material "date_range")
                     'display '(raise 0.0)) " Yesterday, %H:%M"))
               (604800 . ,(concat (propertize ;(all-the-icons-faicon "calendar" :v-adjust -0.01)
                                   (all-the-icons-material "date_range")
                                   'display '(raise 0.0)) " %A %H:%M"))
               ((gnus-seconds-month)
                . ,(concat (propertize ;(all-the-icons-faicon "calendar" :v-adjust -0.01)
                            (all-the-icons-material "date_range")
                            'display '(raise 0.0)) " %A %d"))
               ((gnus-seconds-year)
                . ,(concat (propertize ;(all-the-icons-faicon "calendar" :v-adjust -0.01)
                            (all-the-icons-material "date_range")
                            'display '(raise 0.0)) " %B %d"))
               (t . ,(concat (propertize ;(all-the-icons-faicon "calendar" :v-adjust -0.01)
                              (all-the-icons-material "date_range")
                              'display '(raise 0.0)) " %b %d %Y"))))

     (setopt gnus-topic-line-format (concat "%i[ "
                                            (propertize ;(all-the-icons-faicon "folder-open")
                                             (all-the-icons-material "folder")
                                             'display '(raise 0.0))
                                            " %(%{%n -- %A%}%) ]%v\n"))
     (setopt gnus-topic-display-empty-topics nil)



     ;;      gnus-summary-line-format ":%U%R %B %s %-60=|%4L |%-20,20f |%&user-date; \n")
     ;; gnus-summary-line-format "%U%R%z %12&user-date; %(%[%-30,30f%]%) %B %s\n"

     (setopt gnus-summary-line-format (concat ":%U%R %B "
                                              ;; (propertize ;(all-the-icons-faicon "terminal")
                                              ;;  (all-the-icons-material "send")
                                              ;;  'display '(raise 0.0)) ;; FIXME: Buggy sometimes morphes from î£ to î
                                              "%s %-60=|%4L |"
                                              (propertize ;(all-the-icons-faicon "male")
                                               (all-the-icons-material "person")
                                               'display '(raise 0.0)) "%-20,20n |%&user-date; \n"))
     ;; (setopt gnus-summary-line-format
     ;;       "%9{%U%R%z%}%8{â%}%*%(%-23,23f%)%7{â%} %6{%B%} | %s | %&user-date; \n")


     (setopt gnus-cached-mark 9741 ;; â
             gnus-canceled-mark 10060 ;; â
             gnus-del-mark 10062 ;; â maybe ð instead?
             gnus-dormant-mark 127988 ;; ð´
             gnus-expirable-mark 9851 ;; â»
             gnus-forwarded-mark 8618 ;; âª
             gnus-killed-mark 9760 ;; â 
             gnus-process-mark 9881 ;; â
             gnus-read-mark 9989 ;; â
             gnus-unread-mark 9993 ;;  â
             gnus-recent-mark 127381 ;; ð
             gnus-replied-mark 10548 ;; â¤´
             gnus-unseen-mark 128232 ;; ð¨
             gnus-ancient-mark 128336 ;; ð
             gnus-duplicate-mark 9410;; â
             gnus-score-over-mark 11088 ;; â­
             gnus-score-below-mark 9734 ;; â
             gnus-low-score-marl 8902 ;; â
             gnus-saved-mark 128190 ;; ð¾
             gnus-ticked-mark 127987 ;; ð³
             ;; gnus-no-mark 9723;; â»
             gnus-not-empty-thread-mark 11015;; â¬ , maybe ð½ instead?
             ))

   (use-package gnus-registry
     :config
     (setopt gnus-registry-max-entries 5000)
     (setopt gnus-registry-ignored-grous '(("nntp" t)
                                           ("nnrss" t)
                                           ("spam" t)))
     (setopt gnus-registry-track-extra '(sender subject))
     (setopt gnus-registry-register-all t)
     (gnus-registry-initialize))

   (use-package gnus-ml
     :hook (((gnus-summary-mode . turn-on-gnus-mailing-list-mode))))

   (use-package gnus-group
     :after gnus
     :hook ((gnus-group-mode . hl-line-mode)
            (gnus-group-mode . gnus-topic-mode))
     :bind (:map gnus-group-mode-map
                 ("o" . thao/gnus-group-list-subscribed-groups))
     :config
     (setopt gnus-group-use-permanent-levels t)
     (setopt gnus-group-line-format (concat "%M%S%p%P%5y "
                                          (propertize ;(all-the-icons-faicon "envelope-o")
                                           (all-the-icons-material "mail")
                                           'display '(raise 0.0))
                                          " : [%T]:%B%(%G%)\n"))

     (setopt gnus-permanently-visible-groups "INBOX")

     (defvar thao/gnus-group-get-new-news-group-level 4
       "The level of which groups should be checked during `gnus-group-get-new-news'
   The purpose of this level is to have groups which are only fetched on demand.
   However the groups above this level should be still visible unless hidden
   on purpose.")

     (defun thao/gnus-group-get-new-news(fun &rest args)
       "Like `gnus-group-get-new-news' but with default value for ARG.
   `thao/gnus-group-get-new-news-group-level'"
       (let* ((level (pop args))
              (gnus-group-use-permanent-levels)
              (new-args (list (or level
                                  thao/gnus-group-get-new-news-group-level) args)))
         (apply fun new-args)
         (gnus-group-list-groups (gnus-group-default-level level nil))))
     (advice-add 'gnus-group-get-new-news :around #'thao/gnus-group-get-new-news)

     (defun thao/gnus-group-get-new-news-no-group-level (&optional LEVEL UNREAD LOWEST UPDATE-LEVEL)
       "Make `gnus-group-get-new-news' not do '`gnus-group-list-level'"
       (if (not (or (equal last-command 'gnus-group-get-new-news)
                    (equal this-command 'gnus-group-get-new-news)))
           t))
     (advice-add 'gnus-group-list-groups :before-while #'thao/gnus-group-get-new-news-no-group-level)

     ;; {{ press "o" to view all groups
     (defun thao/gnus-group-list-subscribed-groups()
       "List all subscribed groups with or without un-read messages"
       (interactive)
       (gnus-group-list-all-groups 5))

     (define-key gnus-group-mode-map
                 ;; list all the subscribed groups even they contain zero un-read messages
                 (kbd "o") 'my-gnus-group-list-subscribed-groups))

   (use-package message
     :config
     ;; Kill message buffer after sending a message.
     (setopt message-kill-buffer-on-exit t)
     (setopt message-subscribed-address-functions
             '(gnus-find-subscribed-addresses)))

   (use-package message-attachment-reminder
     :hook (message-send . message-attachment-reminder-warn-if-no-attachments))

   (use-package message-view-patch
     :hook (gnus-part-display . message-view-patch-highlight))

   (use-package mm-decode
     :config
     ;; Tell mm that we like  text/html the least.
     (setopt mm-discouraged-alternatives '("text/html"))
     ;; set renderer for html mail to w3m in emacs
     ;; (setopt mm-text-html-renderer 'gnus-w3m)
     (setopt mm-text-html-renderer 'w3m))
   (use-package smtpmail
     :config
     <<smtpmail_private>>)

   (use-package smtpmail-async
     :config
     (setopt send-mail-function 'async-smtpmail-send-it))

   (use-package gnus-alias
     :hook ((message-setup . gnus-alias-determine-identity))
     :config
     (setopt gnus-alias-override-user-mail-address t)
     (setopt gnus-alias-allow-forward-as-reply t)
     (setopt gnus-alias-use-buttonized-from t)
     <<gnus_alias_private>>) ;; Signature

   (use-package gnus-icalendar
     :after org
     :config
     (setopt gnus-icalendar-org-capture-file (expand-file-name (concat (car org-directory) "/inbox.org")))
     (setopt gnus-icalendar-org-capture-headline '("Calendar"))
     (gnus-icalendar-org-setup))

   (use-package gnus-recent
     :after gnus
     :bind (("M-s a" . gnus-recent-goto-ivy)
            :map gnus-summary-mode-map
            ("l" . gnus-recent-goto-previous)
            :map gnus-group-mode-map
            ("C-c L" . gnus-recent-goto-previous)))

   (use-package gnus-notes-org
     :after org
     :bind ( ;; define keybindings here instead of using gnus-notes-org-define-key
            ;; to profit from use-packages lazy loading
            :map org-mode-map
            ("C-c t" . gnus-notes-org-handle-mail)
            :map org-agenda-keymap
            ("C-c t" . gnus-notes-org-handle-mail)
            :map gnus-summary-mode-map
            ("C-c t" . gnus-notes-org-capture-mail)
            :map gnus-article-mode-map
            ("C-c t" . gnus-notes-org-capture-mail))
     :config
     (require 'no-littering)
     (setopt gnus-notes-org-capture-template
           `("e" "Email Reply Scheduled (a)" entry
             (file+olp ,(expand-file-name
                         (concat (car org-directory)
                                 "/inbox.org"))
                       "Emails")
             (file ,(no-littering-expand-etc-file-name "org/templates/email.org"))
             :prepend nil :clock-in t :clock-resume t)
           ))

   (use-package gnus-notes
     :after no-littering
     :after gnus
     :after gnus-notes-org
     :config
     (gnus-notes-init))

   (use-package gnus-notes-helm
     :after gnus-notes
     :bind (("C-c g m" . gnus-notes-helm)))

   ;; (use-package all-the-icons-gnus
   ;;   :config)
   ;; ;; (all-the-icons-gnus-setup))

   (use-package autocrypt
     :config
     <<autocrypt_private>>)

   (use-package autocrypt-message
     :hook ((message-mode . autocrypt-mode)))

   (use-package autocrypt-gnus
     :hook ((gnus-mode . autocrypt-mode)))

   (use-package smiley
     :config
     (setopt smiley-style 'emoji))

   (use-package gravatar
     :config
     (setopt gravatar-default-image "robohash")
     ;; Allow any level of gravatar image rating
     ;; "g"  - Suitable for any audience.
     ;; "pg" - May contain rude gestures, provocatively dressed
     ;;        individuals, mild profanity, or mild violence.
     ;; "r"  - May contain harsh profanity, intense violence, nudity,
     ;;        or hard drug use.
     ;; "x"  - May contain hardcore sexual imagery or extremely
     ;;        disturbing violence.
     (setopt gravatar-rating "x"))

   (use-package piem
     :config
     <<piem_private>>)
   #+end_src

** Khardel
   #+begin_src emacs-lisp
     (use-package khardel
       :config
       (setopt khardel-command "khard"))
   #+end_src

* Multimedia

** Emms
   #+begin_src  emacs-lisp
   (use-package emms
     :hook ((emms-player-started . emms-last-played-update-current))
     :config
     (require 'xdg)
     ;; FIXME
     ;; These explicit requires shouldn't be required.
     (require 'emms-source-file)
     (require 'emms-source-playlist)
     (require 'emms-info)
     (require 'emms-info-libtag)
     (require 'emms-info-native)
     ;; (require 'emms-info-mp3info)
     ;; (require 'emms-info-ogginfo)
     ;; (require 'emms-info-opusinfo)
     ;; (require 'emms-info-metaflac)
     ;; (require 'emms-info-tinytag)
     ;; (require 'emms-info-exiftool)
     (require 'emms-info-libtag)
     (require 'emms-info-native)
     (require 'emms-cache)
     (require 'emms-mark)
     (require 'emms-tag-editor)
     (require 'emms-tag-tracktag)
     (require 'emms-show-all)
     (require 'emms-streams)
     (require 'emms-lyrics)
     (require 'emms-playing-time)
     ;;(require 'emms-player-mpd)
     (require 'emms-playlist-sort)
     (require 'emms-cue)
     (require 'emms-bookmarks)
     (require 'emms-last-played)
     (require 'emms-metaplaylist-mode)
     (require 'emms-stream-info)
     (require 'emms-score)
     (require 'emms-i18n)
     (require 'emms-volume)
     ;; FIXME END

     ;; https://www.reddit.com/r/emacs/comments/qg2d0k/comment/hi47dh5/?context=3
     (defun thao/emms-track-description (track)
       "Return a description of TRACK, for EMMS, but try to cut just
      the track name from the file name, and just use the file name too
      rather than the whole path."
       (let ((artist (emms-track-get track 'info-artist))
             (title (emms-track-get track 'info-title))
             (tracknumber (emms-track-get track 'info-tracknumber))
             (year (emms-track-get track track 'info-year))
             (album (emms-track-get track 'abum)))
         (cond ((and artist title)
                ;; Converting the artist/title to a string works around a bug in `emms-info-exiftool'
                ;; where, if your track name is a number, e.g. "1999" by Jeroen Tel, then it will be an
                ;; integer type here, confusing everything.
                ;;
                ;; I would fix the bug properly and submit a patch but I just cannot be bothered to
                ;; figure out how to do that.
                (concat (format "%s" artist) " - " (format "%s" title)))
               (title title)
               ((eq (emms-track-type track) 'file)
                (track-title-from-file-name (emms-track-name track)))
               (t (emms-track-simple-description track)))))


     (add-to-list 'emms-track-initialize-functions #'emms-info-initialize-track)
     (setopt emms-player-list '(emms-player-mpd))
     (setopt emms-info-functions '(emms-info-mpd
                                   emms-info-native
                                   emms-info-cueinfo
                                   emms-info-libtag))
     (setopt emms-score-enabled-p t)
     (setopt emms-source-file-default-directory (xdg-user-dir "MUSIC"))
     (setopt emmms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
     (setopt emms-info-libtag-program-name (concat user-emacs-directory
                                                   "lib/emms/src/emms-print-metadata"))

     (setopt emms-track-description-function 'thao/emms-track-description)

     (setopt emms-info-libtag-known-extensions
             (regexp-opt '("mp3" "mp4" "m4a" "ogg" "flac" "spx" "wma" "aif")))

     (emms-cache 1)
     (emms-score 1)

     (defun track-title-from-file-name (file)
       "For using with EMMS description functions. Extracts the track
      title from the file name FILE, which just means a) taking only
      the file component at the end of the path, and b) removing any
      file extension."
       (with-temp-buffer
         (save-excursion (insert (file-name-nondirectory (directory-file-name file))))
         (ignore-error search-failed
           (search-forward-regexp (rx "." (+ alnum) eol))
           (delete-region (match-beginning 0) (match-end 0)))
         (buffer-string))))

   (use-package emms-browser
     :bind (("s-h b" . emms-browser))
     :hook ((emms-browser . hl-line-mode)
            (emms-browser-filter-changed . emms-browser-toggle-album-display))
     :config
     ;; Source mpd manual section 17.4
     ;; https://www.gnu.org/software/emms/manual/#Changing-Looks
     ;; The following code displays artist->track instead of artist->album->track
     ;; when you switch to the âsinglesâ filter:
     (defun emms-browser-next-mapping-type-articles-noalbum (returned-mapping)
       (when (eq returned-mapping 'info-album)
         (setq returned-mapping 'info-title))
       returned-mapping)

     (defun emms-browser-toggle-album-display ()
       (if (string= emms-browser-current-filter-name "singles")
           (advice-add 'emms-browser-next-mapping-type :filter-return #'emms-browser-next-mapping-type-articles-noalbum)
         (advice-remove 'emms-browser-next-mapping-type #'emms-browser-next-mapping-type-articles-noalbum)))

     (setopt emms-browser-covers #'emms-browser-cache-thumbnail-async))

   (use-package emms-history
     :config (emms-history-load))

   ;; (use-package emms-player-mpv
   ;;   :after (:any emms dired)
   ;;   :config
   ;;   (setopt emms-player-mpv-parameters '("--no-terminal" "--force-window=no" "--audio-display=no")))

   (use-package emms-lyrics
     :after emms
     :config
     (emms-lyrics 1))
   (use-package emms-playing-time
     :after emms
     :config
     (emms-playing-time-mode 1))

   (use-package emms-playlist-mode
     :bind (("s-h p" . emms-playlist-mode-go))
     :config
     (setopt emms-playlist-insert-track-function #'emms-playlist-mode-insert-track))

   (use-package emms-player-mpd
     :config
     (require 'xdg)
     (setopt emms-player-mpd-server-name (concat (xdg-runtime-dir)
                                                 "/mpd/socket"))
     (setopt emms-player-mpd-server-port nil)
     (setopt emms-player-mpd-music-directory (xdg-user-dir "MUSIC"))
     (emms-player-mpd-connect)
     (emms-player-mpd-update-all)
     (emms-cache-set-from-mpd-all))

   (use-package helm-emms
     :bind ("s-h h" . helm-emms)
     :config
     (setopt helm-emms-default-sources '(helm-source-emms-dired
                                         helm-source-emms-files
                                         helm-source-emms-streams)))

   ;; (use-package emms-dbus
   ;;   :config
   ;;   (emms-dbus-enable))
   #+end_src

** Elfeed
   #+begin_src emacs-lisp
   (use-package elfeed
     :defer t
     :bind (:map elfeed-show-mode-map
                 ("d" . elfeed-search-youtube-dl)
                 ;; Make n/p scroll and N/P switch articles
                 ("N" . elfeed-show-next)
                 ("P" . elfeed-show-prev)
                 ("p" . elfeed-show-next)
                 ("n" . elfeed-show-prev)
                 ("Q" . thao/elfeed-quit-window-delete)
                 ("q" . thao/elfeed-quit-window-delete)
                 ("/" . elfeed-show-new-live-search)
                 :map elfeed-search-mode-map
                 ("RET" . elfeed-search-show-entry)
                 ;;   ("RET" . elfeed-entry-other-window)
                 ("g" . elfeed-update)
                 ("/ /" . elfeed-search-set-filter)
                 ("/ s" . elfeed-search-live-filter)
                 ;; M for unread like in mu4e where R is for reply
                 ("m" . elfeed-search-untag-all-unread)
                 ("M" . elfeed-mark-all-as-read)
                 ("N" . elfeed-mark-all-read-and-next-tag)
                 ("U" . elfeed-search-fetch)
                 ("c" . elfeed-mark-all-as-read)
                 ("x" . elfeed-reset-filter)
                 ("t" . elfeed-toggle-tags)
                 ("y" . elfeed-toggle-youtube)
                 ("$" . elfeed-show-log)
                 ("d" . elfeed-search-youtube-dl)
                 ("D" . elfeed-search-youtube-dl-slow)
                 ("L" . youtube-dl-list))
     :config
     ;; Config from https://github.com/skeeto/.emacs.d/blob/master/etc/feed-setup.el
     (setq-default elfeed-search-filter "-youtube ")

     ;; Show unique buffer instead of a single buffer
     (setopt elfeed-show-unique-buffers t)

     (setopt elfeed-show-entry-switch 'display-buffer)
     (setopt elfeed-show-entry-delete 'thao/elfeed-quit-window-delete)

     ;; Remain on entry after performing a command such as viewing an article
     (setopt elfeed-search-remain-on-entry t)

     (defun elfeed-entry-other-window ()
       "In elfeed-search mode, open elfeed entry in the other window
      if other window is present, else sensibly splits the frame if
      there is only a single window and opens the elfeed entry in the
      other window."
       (interactive)
       (if (get-buffer "*elfeed-search*")
           (progn
             (split-window-sensibly (selected-window))
             (switch-to-buffer-other-window "*elfeed-search*")
             (call-interactively #'elfeed-search-show-entry)
             (other-window 1)
             (forward-line))))

     (defun thao/elfeed-quit-window-delete ()
       (interactive)
       (quit-window 'kill))

     (defun elfeed-mark-all-as-read ()
       "Mark all as read."
       (interactive)
       (call-interactively 'mark-whole-buffer)
       (elfeed-search-untag-all-unread))

     (defun elfeed-reset-filter ()
       "Reset filter."
       (interactive)
       (elfeed-search-set-filter (default-value 'elfeed-search-filter)))

     (defun elfeed-show-log ()
       "Show elfeed log buffer."
       (interactive)
       (switch-to-buffer (elfeed-log-buffer)))

     (defun elfeed-mark-all-read-and-next-tag ()
       "Marks all as read and filters by another tag."
       (interactive)
       ;; Only toggle all as read if we're not in the overview
       (unless (eq elfeed-search-filter (default-value 'elfeed-search-filter))
         (elfeed-mark-all-as-read))
       (elfeed-toggle-tags))

     (defun elfeed-toggle-tags ()
       "Iterate over taglist and set filter for each tag."
       (interactive)
       ;; FIXME: simplify list
       (cl-macrolet ((re (re rep str) `(replace-regexp-in-string ,re ,rep ,str)))
         (elfeed-search-set-filter
          (cond
           ((string-match-p "-youtube" elfeed-search-filter)
            (re " *-youtube" " +emacs" elfeed-search-filter))
           ((string-match-p "\\+emacs" elfeed-search-filter)
            (re " *\\+emacs" " +clojure" elfeed-search-filter))
           ((string-match-p "\\+clojure" elfeed-search-filter)
            (re " *\\+clojure" " +python" elfeed-search-filter))
           ((string-match-p "\\+python" elfeed-search-filter)
            (re " *\\+python" " +dev" elfeed-search-filter))
           ((string-match-p "\\+dev" elfeed-search-filter)
            (re " *\\+dev" " +fefe" elfeed-search-filter))
           ((string-match-p "\\+fefe" elfeed-search-filter)
            (re " *\\+fefe" " +mma" elfeed-search-filter))
           (re " *\\+health" " +news" elfeed-search-filter)
           ((string-match-p "\\+news" elfeed-search-filter)
            (re " *\\+news" " -youtube" elfeed-search-filter))
           ((concat elfeed-search-filter " -youtube")))))
       ;; Skip tags when there's no result
       (unless (or (string-match-p "-youtube" elfeed-search-filter) (elfeed-search-selected t))
         (elfeed-toggle-tags)))

     (defun elfeed-toggle-unread ()
       "Toggle unread filter"
       (interactive)
       (cl-macrolet ((re (re rep str) `(replace-regexp-in-string ,re ,rep ,str)))
         (elfeed-search-set-filter
          (cond
           ((string-match-p "-unread" elfeed-search-filter)
            (re " *-unread" " +unread" elfeed-search-filter))
           ((string-match-p "\\+unread" elfeed-search-filter)
            (re " *\\+unread" " -unread" elfeed-search-filter))
           ((concat elfeed-search-filter " -unread"))))))

     ;; Some youtube helpers
     (defun elfeed-toggle-youtube ()
       "Toggle youtube filter"
       (interactive)
       (cl-macrolet ((re (re rep str) `(replace-regexp-in-string ,re ,rep ,str)))
         (elfeed-search-set-filter
          (cond
           ((string-match-p "-youtube" elfeed-search-filter)
            (re " *-youtube" " +youtube" elfeed-search-filter))
           ((string-match-p "\\+youtube" elfeed-search-filter)
            (re " *\\+youtube" " -youtube" elfeed-search-filter))
           ((concat elfeed-search-filter " -youtube"))))))

     (defun elfeed-show-youtube-dl ()
       "Download the current entry with youtube-dl."
       (interactive)
       (pop-to-buffer (youtube-dl (elfeed-entry-link elfeed-show-entry))))

     (defun elfeed-play-with-mpv ()
       "Play entry link with mpv."
       (interactive)
       (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
             (quality-arg "")
             (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720") nil nil)))
         (setq quality-val (string-to-number quality-val))
         (message "Opening %s with heightâ¤%s with mpv..." (elfeed-entry-link entry) quality-val)
         (when (< 0 quality-val)
           (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
         (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))

     (setopt elfeed-show-entry-retrieve-content-link
             '("yle.fi"
               "helsinkitimes.fi"
               ;; Images won't load without JavaScript :/
               ;; Text works fine though
               "wowhead.com"
               180))
     (setopt elfeed-show-entry-retrieve-content-link-readability
             '("yle.fi"
               ;; Some of these fail sometimes
               ;; eww-readability might remove the page content breaking the dispaly
               "helsinkitimes.fi"
               "wowhead.com"))
     (cl-defun elfeed-search-youtube-dl (&key slow)
       "Download the current entry with youtube-dl."
       (interactive)
       (let ((entries (elfeed-search-selected)))
         (dolist (entry entries)
           (if (null (youtube-dl (elfeed-entry-link entry)
                                 :title (elfeed-entry-title entry)
                                 :slow slow))
               (message "Entry is not a YouTube link!")
             (message "Downloading %s" (elfeed-entry-title entry)))
           (elfeed-untag entry 'unread)
           (elfeed-search-update-entry entry)
           (unless (use-region-p) (forward-line)))))

     (defalias 'elfeed-search-youtube-dl-slow
       (elfeed-expose #'elfeed-search-youtube-dl :slow t)
       "Slowly download the current entry with youtube-dl.")

     ;; Custom faces
     (defface elfeed-comic
       '((t :foreground "#BFF"))
       "Marks comics in Elfeed."
       :group 'elfeed)

     (push '(comic elfeed-comic)
           elfeed-search-face-alist)

     (defface elfeed-youtube
       '((t :foreground "#f9f"))
       "Marks YouTube videos in Elfeed."
       :group 'elfeed)

     (push '(youtube elfeed-youtube)
           elfeed-search-face-alist)

     (defface elfeed-important
       '((t :foreground "#E33"))
       "Marks important entries in Elfeed."
       :group 'elfeed)

     (push '(important elfeed-important)
           elfeed-search-face-alist))

   (use-package elfeed-protocol
     :config
     (setopt elfeed-protocol-enabled-protocols '(owncloud))
     (setopt elfeed-protocol-owncloud-update-with-modified-time t)
     (setopt elfeed-protocol-owncloud-maxsize 1000)
     <<elfeed_protocol_private>>
     (elfeed-protocol-enable))

   (use-package elfeed-tube
     :after elfeed
     :demand t
     :config
     ;; (setopt elfeed-tube-auto-save-p nil) ; default value
     ;; (setopt elfeed-tube-auto-fetch-p t)  ; default value

     <<elfeed_tube_private>>

     (elfeed-tube-setup)

     :bind (:map elfeed-show-mode-map
                 ("F" . elfeed-tube-fetch)
                 ([remap save-buffer] . elfeed-tube-save)
                 :map elfeed-search-mode-map
                 ("F" . elfeed-tube-fetch)
                 ([remap save-buffer] . elfeed-tube-save)))

   (use-package elfeed-summary
     :after elfeed
     :bind (("C-c e" . elfeed-summary)
            ;; binds similarly to gnus
            :map elfeed-summary-mode-map
            ("g" . elfeed-summary-update)
            ("o" . elfeed-summary-toggle-only-unread)
            ("c" . elfeed-summary--action-mark-read)
            ("l" . elfeed-show-log)
            ("$" . elfeed-show-log))
     :config
     ;; https://github.com/SqrtMinusOne/elfeed-summary#opening-elfeed-search-in-other-window
     ;;(setopt elfeed-summary-other-window t)
     (setopt elfeed-summary-refresh-on-each-update t)
     (setopt elfeed-summary-default-filter "")

     <<elfeed_summary_private>>)

   (use-package elfeed-score
     :after elfeed
     :config
     (progn
       (elfeed-score-enable)
       (define-key elfeed-search-mode-map "=" elfeed-score-map)))

   (use-package elfeed-autotag
     :after elfeed
     :config
     (defun elfeed-update-call-autotag()
       "Load all feed settings before elfeed is started."
       (elfeed-log 'debug "Calling Elfeed-Autotag before elfeed-update")
       (elfeed-autotag-process elfeed-autotag-files elfeed-autotag-tree-id))
     (advice-add #'elfeed-update :before #'elfeed-update-call-autotag)
     (advice-add #'elfeed-summary-update :before #'elfeed-update-call-autotag)
     (elfeed-autotag))
   #+end_src

** Nov: Featureful EPUB reader mode
   :PROPERTIES:
   :CREATED:  [2024-08-30 Fri 19:40]
   :END:
   #+begin_src emacs-lisp
   (use-package nov
     :mode ("\\.epub\\'" . nov-mode))
   #+end_src

** Yeetube
   :PROPERTIES:
   :CREATED:  [2024-06-16 Sun 01:26]
   :END:
   #+begin_src emacs-lisp
   (use-package yeetube
     :init
     (unbind-key "C-x C-l")
     (define-prefix-command 'thao/yeetube-map)
     :config
     ;;(setopt yeetube-mpv-disable-video t) ;; Disable video output
     :bind (("C-x C-l y" . 'thao/yeetube-map)
            :map thao/yeetube-map
   		 ("s" . 'yeetube-search)
   		 ("b" . 'yeetube-play-saved-video)
   		 ("d" . 'yeetube-download-videos)
   		 ("p" . 'yeetube-mpv-toggle-pause)
   		 ("v" . 'yeetube-mpv-toggle-video)
   		 ("V" . 'yeetube-mpv-toggle-no-video-flag)
   		 ("k" . 'yeetube-remove-saved-video)))
   #+end_src

* Post Initialization
  #+begin_src emacs-lisp
  (message "Loading %s...done (%.3fs)" user-init-file
	   (float-time (time-subtract (current-time)
				      before-user-init-time)))
  (add-hook 'after-init-hook
	    (lambda ()
	      (message
	       "Loading %s...done (%.3fs) [after-init]" user-init-file
	       (float-time (time-subtract (current-time)
					  before-user-init-time)))
	      ;; Restore original file name handlers
	      (setopt file-name-handler-alist file-name-handler-alist-old)
	      ;; Let's lower our GC thresholds back down to a sane level.
	      (setopt gc-cons-threshold (* 32 1024 1024)))
	    t)
  #+end_src
